// This file contains a simple Javascript broker that encapsulates 
// the AJAST technique, allowing for cross-domain REST 
// (REpresentatoinal State Transfer) calls.
// 
// Copyright (c) 2008 HÃ¥vard Stranden <havard.stranden@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

if(typeof(OX) === 'undefined') var OX = {};
OX.AJAST = 
{
  Broker : function(url, callbackparameter, optional_decode_json_response, optional_timeout_milliseconds, optional_default_params)
  {
    this.url = url;
    this.cb = callbackparameter;
    this.params = [];
    this.timeout = optional_timeout_milliseconds || 5000; // Timeout in milliseconds
    if(typeof(optional_default_params) !== 'undefined')
    {
      for(p in optional_default_params)
        this.params.push(p + '=' + encodeURIComponent(optional_default_params[p]));
    }
    
    this.jsonmode = optional_decode_json_response || false;
  },
  
  __callbacks__ : {},
  
  __callid__ : 1,
  
  call: function(url, callbackparameter, callbackfunction, optional_timeout, optional_decode_json_response)
  {
    var callbackid = 'callback' + OX.AJAST.__callid__;
    
    // Append callback parameter (this also implicitly avoids caching, since the callback id is different for each call)
    url += '&' + encodeURIComponent(callbackparameter) + '=' + encodeURIComponent('OX.AJAST.__callbacks__.' + callbackid);
      
    // Create script tag for the call
    var tag = OX.AJAST.createScriptTag(url);
    // Get the head of the document
    var head = document.getElementsByTagName('head').item(0);
    
      
    // Create a timeout function  
    var timedout = function()
    {
      if(OX.AJAST.__callbacks__[callbackid] !== 'undefined') // If the callback still exists...
      {
        // Replace original wrapped callback with a dummy that just deletes itself
        OX.AJAST.__callbacks__[callbackid] = function(){ delete OX.AJAST.__callbacks__[callbackid]; }; 
        // Signal that the call timed out
        callbackfunction(false); 
        // Remove the script tag (timed out)
        head.removeChild(tag); 
      }    
    };
    
    // Create timer for the timeout function
    var timer = setTimeout(timedout, optional_timeout || 5000);
      
    var decode_response = optional_decode_json_response || false;
    
    // Create the callback function          
    OX.AJAST.__callbacks__[callbackid] = function(data)
    {
      // Clear the timeout
      clearTimeout(timer);
      
      if(typeof(data) === 'undefined')
        callbackfunction(false); // Callback with nothing
      else
      {
        callbackfunction(true, decode_response ? eval(data) : data);
      }
      // Replace original callback with a dummy function 
      delete OX.AJAST.__callbacks__[callbackid];
      // Remove the script tag (finished)
      head.removeChild(tag);
    };
    
    // Inject the call
    head.appendChild(tag);
  },
  
  createScriptTag: function(url)
  {
    var s = document.createElement('script');
    s.setAttribute('type', 'text/javascript');
    //BUG-FIX (Zohar,04-01-2010): OX.AJAST.Broker.__callid__++) should be OX.AJAST.__callid__++
    s.setAttribute('id', 'oxajastcall' + OX.AJAST.__callid__++);
    s.setAttribute('src', url);
    return s;
  }
};

OX.AJAST.Broker.prototype.call = function(params, callback)
{
  // Create arguments
  var args = [];
  for(p in params)
    args.push(p + '=' + encodeURIComponent(params[p]));
  for(p in this.params)
    args.push(this.params[p]);
  //BUG-FIX (Zohar,04-01-2010): Consider cases with ? already in the Url
  if (this.url.indexOf('?', 0) > -1)
	  this.url += '&' + args.join('&');
  else
	  this.url += '?' + args.join('&');
  OX.AJAST.call(this.url, this.cb, callback, this.timeout, this.jsonmode);
};;
/**
*
*  MD5 (Message-Digest Algorithm)
*  http://www.webtoolkit.info/
*
**/
 
var MD5 = function (string) {
 
	function RotateLeft(lValue, iShiftBits) {
		return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
	}
 
	function AddUnsigned(lX,lY) {
		var lX4,lY4,lX8,lY8,lResult;
		lX8 = (lX & 0x80000000);
		lY8 = (lY & 0x80000000);
		lX4 = (lX & 0x40000000);
		lY4 = (lY & 0x40000000);
		lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
		if (lX4 & lY4) {
			return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
		}
		if (lX4 | lY4) {
			if (lResult & 0x40000000) {
				return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
			} else {
				return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
			}
		} else {
			return (lResult ^ lX8 ^ lY8);
		}
 	}
 
 	function F(x,y,z) { return (x & y) | ((~x) & z); }
 	function G(x,y,z) { return (x & z) | (y & (~z)); }
 	function H(x,y,z) { return (x ^ y ^ z); }
	function I(x,y,z) { return (y ^ (x | (~z))); }
 
	function FF(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};
 
	function GG(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};
 
	function HH(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};
 
	function II(a,b,c,d,x,s,ac) {
		a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
		return AddUnsigned(RotateLeft(a, s), b);
	};
 
	function ConvertToWordArray(string) {
		var lWordCount;
		var lMessageLength = string.length;
		var lNumberOfWords_temp1=lMessageLength + 8;
		var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
		var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
		var lWordArray=Array(lNumberOfWords-1);
		var lBytePosition = 0;
		var lByteCount = 0;
		while ( lByteCount < lMessageLength ) {
			lWordCount = (lByteCount-(lByteCount % 4))/4;
			lBytePosition = (lByteCount % 4)*8;
			lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
			lByteCount++;
		}
		lWordCount = (lByteCount-(lByteCount % 4))/4;
		lBytePosition = (lByteCount % 4)*8;
		lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
		lWordArray[lNumberOfWords-2] = lMessageLength<<3;
		lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
		return lWordArray;
	};
 
	function WordToHex(lValue) {
		var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
		for (lCount = 0;lCount<=3;lCount++) {
			lByte = (lValue>>>(lCount*8)) & 255;
			WordToHexValue_temp = "0" + lByte.toString(16);
			WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
		}
		return WordToHexValue;
	};
 
	function Utf8Encode(string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
 
		for (var n = 0; n < string.length; n++) {
 
			var c = string.charCodeAt(n);
 
			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
 
		}
 
		return utftext;
	};
 
	var x=Array();
	var k,AA,BB,CC,DD,a,b,c,d;
	var S11=7, S12=12, S13=17, S14=22;
	var S21=5, S22=9 , S23=14, S24=20;
	var S31=4, S32=11, S33=16, S34=23;
	var S41=6, S42=10, S43=15, S44=21;
 
	string = Utf8Encode(string);
 
	x = ConvertToWordArray(string);
 
	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;
 
	for (k=0;k<x.length;k+=16) {
		AA=a; BB=b; CC=c; DD=d;
		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
		a=AddUnsigned(a,AA);
		b=AddUnsigned(b,BB);
		c=AddUnsigned(c,CC);
		d=AddUnsigned(d,DD);
	}
 
	var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);
 
	return temp.toLowerCase();
};
// ===================================================================================================
//                           _  __     _ _
//                          | |/ /__ _| | |_ _  _ _ _ __ _
//                          | ' </ _` | |  _| || | '_/ _` |
//                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
//
// This file is part of the Kaltura Collaborative Media Suite which allows users
// to do with audio, video, and animation what Wiki platfroms allow them to do with
// text.
//
// Copyright (C) 2006-2011  Kaltura Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @ignore
// ===================================================================================================
/**
 * Generates a URL-encoded query string from the associative (or indexed) array provided.
 * Ported from PHP. 
 * @param formdata			May be an array or object containing properties. 
 * @param numeric_prefix	If numeric indices are used in the base array and this parameter is provided, it will be prepended to the numeric index for elements in the base array only. 
 * @param arg_separator		arg_separator.output  is used to separate arguments, unless this parameter is specified, and is then used. 
 * @return	Returns a URL-encoded string. 
 */
function http_build_query (formdata, numeric_prefix, arg_separator) {
    var value, key, tmp = [];
    var _http_build_query_helper = function (key, val, arg_separator) {
        var k, tmp = [];
		if (val === true) {
            val = "1";
        } else if (val === false) {
            val = "0";
        }
		if (val !== null && typeof(val) === "object") {
            for (k in val) {
                if (val[k] !== null) {
                    tmp.push(_http_build_query_helper(key + "[" + k + "]", val[k], arg_separator));
                }
			}
            return tmp.join(arg_separator);
        } else if (typeof(val) !== "function") {
            return key + "=" + encodeURIComponent(val);
        } else { 
        	//throw new Error('There was an error processing for http_build_query().');
        	return '';
        }
    };
 
    if (!arg_separator) {
		arg_separator = "&";
    }
    for (key in formdata) {
        value = formdata[key];
        if (numeric_prefix && !isNaN(key)) {
			key = String(numeric_prefix) + key;
        }
        tmp.push(_http_build_query_helper(key, value, arg_separator));
    }
    return tmp.join(arg_separator);
}

/**
 * This will only return (a string) if the object passed to getFunctionName is a function or an "object" function from IE. 
 * The function does not rely on function.name if present as it can't always be trusted.
 * @param func	The function to test.
 * @return string the function name.
 */
function getFunctionName(func) {
  if ( typeof func == "function" || typeof func == "object" )
  var fName = (""+func).match(/^function\s*([\w\$]*)\s*\(/); 
  if ( fName !== null ) 
	  	return fName[1];
  return null;
}

/**
 * Getting the name of the constructor if the constructor hasn't been modified, 
 * which if it has modified (and is therfor invalid to use), it falls back to using Object.prototype.toString 
 * to get the class though it won't return the name of the constructor function that created it then. 
 * If you absolutely need the constructor's name, pass true as the second argument, 
 * and it will reset the constructor if it has been modified, to get the real constructor.
 * @param obj	The object to get the constructor of.
 * @param forceConstructor	preform a deep lookup for the real constructor.
 * @return	The constructor of the given class.
 */
function getClass(obj, forceConstructor) {
  if ( typeof obj == "undefined" ) return "undefined";
  if ( obj === null ) return "null";
  if ( forceConstructor == true && obj.hasOwnProperty("constructor") ) delete obj.constructor; // reset constructor
  if ( forceConstructor != false && !obj.hasOwnProperty("constructor") ) return getFunctionName(obj.constructor);
  return Object.prototype.toString.call(obj)
    .match(/^\[object\s(.*)\]$/)[1];
}

/**
 * validate a paramter's value is not null, if not null, add the parameter to the collection.
 * @param	params		the collection of parameters to send in a service action request.
 * @param	paramName	the new parameter name to add.
 * @param	paramValue	the new parameter value to add.
 */
function addIfNotNull(obj, params, paramName, paramValue)
{
	if (paramValue != null) {
		if(paramValue instanceof KalturaObjectBase) {
			params[paramName] = toParams(paramValue);
		} else {
			params[paramName] = paramValue;
		}
	}
}

/**
 * Serializes new object's parameters.
 * @param obj	The object who's members to serialize.
 * @return		a serialized object.
 */
function toParams(obj)
{
	var params = new Object();
	params["objectType"] = getClass(obj);
    for(var prop in obj) {
    	var val = obj[prop];
    	addIfNotNull(obj, params, prop, val);
	}
	return params;
}

/**
 * Utility global method for extending javascript for allowing easier Inheritance.
 * This method should be called directly after defining the class or object, before extending it's prototype. 
 * @param parentClassOrObject		the parent class or object to inherit from.
 * @return	the object or class being created (the child class).
 */
Function.prototype.inheritsFrom = function( parentClassOrObject ){ 
	if ( parentClassOrObject.constructor == Function ) 
	{ 
		//Normal Inheritance 
		this.prototype = new parentClassOrObject;
		this.prototype.constructor = this;
		this.prototype.parentClass = parentClassOrObject.prototype;
	} 
	else 
	{ 
		//Pure Virtual Inheritance 
		this.prototype = parentClassOrObject;
		this.prototype.constructor = this;
		this.prototype.parentClass = parentClassOrObject;
	} 
	return this;
}

/**
 * Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays. 
 * @param arr 	The array to sort.
 * @return		The sorted array.
 */
function ksort(arr) {
  var sArr = [];
  var tArr = [];
  var n = 0;
  for (i in arr)
	  tArr[n++] = i+" |"+arr[i];
  tArr = tArr.sort();
  for (var i=0; i<tArr.length; i++) {
	var x = tArr[i].split(" |");
    sArr[x[0]] = x[1];
  }
  return sArr;
}

/**
 * Construct new Kaltura service action call, if params array contain sub-arrays (for objects), it will be flattened.
 * @param string	service		The Kaltura service to use.
 * @param string	action			The service action to execute.
 * @param array		params			The parameters to pass to the service action.
 * @param array 	files			Files to upload or manipulate.
 */
function KalturaServiceActionCall(service, action, params, files)
{
	if(!params)
		params = new Object();
	if(!files)
		files = new Object();

	this.service = service;
	this.action = action;
	this.params = this.parseParams(params);
	this.files = files;
}
/**
 * @param string	service		The Kaltura service to use.
 */
KalturaServiceActionCall.prototype.service = null;
/**
 * @param string	action			The service action to execute.
 */
KalturaServiceActionCall.prototype.action = null;
/**
 * @param array		params			The parameters to pass to the service action.
 */
KalturaServiceActionCall.prototype.params = null;
/**
 * @param array 	files			Files to upload or manipulate.
 */
KalturaServiceActionCall.prototype.files = null;
/**
 * Parse params array and sub arrays (clone objects)
 * @param array params	the object to clone.
 * @return the newly cloned object from the input object.
 */
KalturaServiceActionCall.prototype.parseParams = function(params)
{
	var newParams = new Object();
	for(var key in params) {
		var val = params[key];
		if (typeof(val) == 'object') {
			newParams[key] = this.parseParams(val);
		} else {
			newParams[key] = val;
		}
	}
	return newParams;
};

/**
 * Create params object for a multirequest call.
 * @param int multiRequestIndex		the index of the call inside the multirequest.
 */
KalturaServiceActionCall.prototype.getParamsForMultiRequest = function(multiRequestIndex)
{
	var multiRequestParams = new Object();
	multiRequestParams[multiRequestIndex + ":service"] = this.service;
	multiRequestParams[multiRequestIndex + ":action"] = this.action;
	for(var key in this.params) {
		var val = this.params[key];
		multiRequestParams[multiRequestIndex + ":" + key] = val;
	}
	return multiRequestParams;
};

/**
 * Create files object for a multirequest call.
 * @param int multiRequestIndex		the index of the call inside the multirequest.
 */
KalturaServiceActionCall.prototype.getFilesForMultiRequest = function(multiRequestIndex)
{
	var multiRequestFiles = new Object();
	for(var key in this.files) {
		var val = this.files[key];
		multiRequestFiles[multiRequestIndex + ":" + key] = val;
	}
	return multiRequestFiles;
};

/**
 * Implement to get Kaltura Client logs
 * 
 */
function IKalturaLogger() 
{
}
IKalturaLogger.prototype.log = function(msg){
	if (console && console.log){
		console.log(msg);
	}
};

/**
 * Kaltura client constructor
 * 
 */
function KalturaClientBase()
{
}

/**
 * Kaltura client init
 * @param KalturaConfiguration config
 */
KalturaClientBase.prototype.init = function(config)
{
    this.config = config;
    var logger = this.config.getLogger();
	if (logger) {
		this.shouldLog = true;	
	}
};

KalturaClientBase.prototype.KALTURA_SERVICE_FORMAT_JSON = 1;
KalturaClientBase.prototype.KALTURA_SERVICE_FORMAT_XML = 2;
KalturaClientBase.prototype.KALTURA_SERVICE_FORMAT_PHP = 3;
KalturaClientBase.prototype.KALTURA_SERVICE_FORMAT_JSONP = 9;
/**
 * @param string
 */
KalturaClientBase.prototype.apiVersion = null;
/**
 * @param KalturaConfiguration The Kaltura Client - this is the facade through which all service actions should be called.
 */
KalturaClientBase.prototype.config = null;
	
/**
 * @param string	the Kaltura session to use.
 */
KalturaClientBase.prototype.ks = null;
	
/**
 * @param boolean	should the client log all actions.
 */
KalturaClientBase.prototype.shouldLog = false;
	
/**
 * @param boolean	should the call be multirequest (set to true when creating multirequest calls).
 */
KalturaClientBase.prototype.useMultiRequest = false;
	
/**
 * @param Array 	queue of service action calls.
 */
KalturaClientBase.prototype.callsQueue = new Array();

/**
 * prepare a call for service action (queue the call and wait for doQueue).
 */
KalturaClientBase.prototype.queueServiceActionCall = function (service, action, params, files)
{
	// in start session partner id is optional (default -1). if partner id was not set, use the one in the config
	if (!params.hasOwnProperty("partnerId") || params["partnerId"] == -1)
		params["partnerId"] = this.config.partnerId;
	this.addParam(params, "ks", this.ks);
	var call = new KalturaServiceActionCall(service, action, params, files);
	this.callsQueue.push(call);
};

/**
 * executes the actions queue.
 */
KalturaClientBase.prototype.doQueue = function(callback)
{
	if (this.callsQueue.length == 0)
		return null;
	var params = new Object();
	var files = new Object();
	this.log("service url: [" + this.config.serviceUrl + "]");
	// append the basic params
	this.addParam(params, "apiVersion", this.apiVersion);
	this.addParam(params, "format", this.config.format);
	this.addParam(params, "clientTag", this.config.clientTag);
	var url = this.config.serviceUrl + this.config.serviceBase;
	var call = null;
	if (this.useMultiRequest){
		url += "/multirequest";
		$i = 1;
		for(var v in this.callsQueue){
			call = this.callsQueue[v];
			var callParams = call.getParamsForMultiRequest($i);
			for(var sv1 in callParams)
				params[sv1] = callParams[sv1];
			var callFiles = call.getFilesForMultiRequest($i);
			for(var sv2 in callFiles)
				files[sv2] = call.files[sv2];
			$i++;
		}
	} else {
		call = this.callsQueue[0];
		url += "/" + call.service + "/action/" + call.action;
		for(var sv3 in call.params)
			params[sv3] = call.params[sv3];
		for(var sv4 in call.files)
			files[sv4] = call.files[sv4];
	}
	// reset
	this.callsQueue = new Array();
	this.useMultiRequest = false; 
	var signature = this.signature(params);
	this.addParam(params, "kalsig", signature);
	this.doHttpRequest(callback, url, params, files);
	return true;
};

/**
 * Sign array of parameters for requests validation (CRC).
 * @param array params		service action call parameters that will be sent on the request.
 * @return string			a hashed signed signature that can identify the sent request parameters.
 */
KalturaClientBase.prototype.signature = function(params)
{
	params = ksort(params);
	var str = "";
	for(var v in params) {
		var k = params[v];
		str += v + k;
	}
	return MD5(str);
};

/**
 * send the http request.
 * @param string url						the url to call.
 * @param parameters params					the parameters to pass.
 * @return array 							the results and errors inside an array.
 */
KalturaClientBase.prototype.doHttpRequest = function (callCompletedCallback, url, params, files)
{
	url += '?' + http_build_query(params);
	OX.AJAST.call(url, "callback", callCompletedCallback, 20000, false);
};

/**
 * getter for the Kaltura session.
 * @return string	KS
 */
KalturaClientBase.prototype.getKs = function()
{
	return this.ks;
};

/**
 * @param string ks	setter for the Kaltura session.
 */
KalturaClientBase.prototype.setKs = function(ks)
{
	this.ks = ks;
};

/**
 * getter for the referenced configuration object. 
 * @return KalturaConfiguration
 */
KalturaClientBase.prototype.getConfig = function()
{
	return this.config;
};

/**
 * @param KalturaConfiguration config	setter for the referenced configuration object.
 */
KalturaClientBase.prototype.setConfig = function(config)
{
	this.config = config;
	logger = this.config.getLogger();
	if (logger instanceof IKalturaLogger){
		this.shouldLog = true;	
	}
};

/**
 * Add parameter to array of parameters that is passed by reference
 * @param array params			array of parameters to pass to a call.
 * @param string paramName		the name of the new parameter to add.
 * @param string paramValue		the value of the new parameter to add.
 */
KalturaClientBase.prototype.addParam = function(params, paramName, paramValue)
{
	if (paramValue == null)
		return;
	
	// native
	if(typeof(paramValue) != 'object') {
		params[paramName] = paramValue;
		return;
	}
	
	// object
	if(isNaN(paramValue.length)){
		for(var subParamName in paramValue) {
			var subParamValue = paramValue[subParamName];
			this.addParam(params, paramName + ":" + subParamName, subParamValue);
		}
		return;
	}
	
	// array
	if(paramValue.length){
		for(var subParamName in paramValue) {
			var subParamValue = paramValue[subParamName];
			this.addParam(params, paramName + ":" + subParamName, subParamValue);
		}
	}
	else{
		this.addParam(params, paramName + ":-", "");
	}
};

/**
 * set to true to indicate a multirequest is being defined.
 */
KalturaClientBase.prototype.startMultiRequest = function()
{
	this.useMultiRequest = true;
};

/**
 * execute a multirequest.
 */
KalturaClientBase.prototype.doMultiRequest = function(callback)
{
	return this.doQueue(callback);
};

/**
 * indicate if current mode is constructing a multirequest or single requests.
 */
KalturaClientBase.prototype.isMultiRequest = function()
{
	return this.useMultiRequest;	
};

/**
 * @param string msg	client logging utility. 
 */
KalturaClientBase.prototype.log = function(msg)
{
	if (this.shouldLog)
		this.config.getLogger().log(msg);
};

/**
 * Abstract base class for all client objects
 */
function KalturaObjectBase()
{
}

/**
 * Abstract base class for all client services
 * Initialize the service keeping reference to the KalturaClient
 * @param KalturaClientm client
 */
function KalturaServiceBase()
{
}
KalturaServiceBase.prototype.init = function(client)
{
	this.client = client;
};
/**
 * @param KalturaClient
 */
KalturaServiceBase.prototype.client = null;

/**
 * Constructs new Kaltura configuration object
 * @param partnerId		a valid Kaltura partner id.
 */
function KalturaConfiguration(partnerId)
{
	if(!partnerId)
		partnerId = -1;
    if (typeof(partnerId) != 'number')
        throw "Invalid partner id - partnerId must be numeric!";
    this.partnerId = partnerId;
}

KalturaConfiguration.prototype.logger		= null;
KalturaConfiguration.prototype.serviceUrl	= "http://www.kaltura.com";
KalturaConfiguration.prototype.serviceBase 	= "/api_v3/service";
KalturaConfiguration.prototype.partnerId	= null;
KalturaConfiguration.prototype.format		= KalturaClientBase.prototype.KALTURA_SERVICE_FORMAT_JSONP;
KalturaConfiguration.prototype.clientTag	= "js:16-01-11";

/**
 * Set logger to get kaltura client debug logs.
 * @param IKalturaLogger log
 */
KalturaConfiguration.prototype.setLogger = function(log)
{
	this.logger = log;
};

/**
 * Gets the logger (Internal client use)
 * @return IKalturaLogger
 */
KalturaConfiguration.prototype.getLogger = function()
{
	return this.logger;
};
;
// ===================================================================================================
//                           _  __     _ _
//                          | |/ /__ _| | |_ _  _ _ _ __ _
//                          | ' </ _` | |  _| || | '_/ _` |
//                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
//
// This file is part of the Kaltura Collaborative Media Suite which allows users
// to do with audio, video, and animation what Wiki platfroms allow them to do with
// text.
//
// Copyright (C) 2006-2015  Kaltura Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @ignore
// ===================================================================================================

function KalturaAppTokenStatus(){
}
KalturaAppTokenStatus.DISABLED = 1;
KalturaAppTokenStatus.ACTIVE = 2;
KalturaAppTokenStatus.DELETED = 3;

function KalturaAppearInListType(){
}
KalturaAppearInListType.PARTNER_ONLY = 1;
KalturaAppearInListType.CATEGORY_MEMBERS_ONLY = 3;

function KalturaAssetParamsDeletePolicy(){
}
KalturaAssetParamsDeletePolicy.KEEP = 0;
KalturaAssetParamsDeletePolicy.DELETE = 1;

function KalturaAssetParamsOrigin(){
}
KalturaAssetParamsOrigin.CONVERT = 0;
KalturaAssetParamsOrigin.INGEST = 1;
KalturaAssetParamsOrigin.CONVERT_WHEN_MISSING = 2;

function KalturaAssetStatus(){
}
KalturaAssetStatus.ERROR = -1;
KalturaAssetStatus.QUEUED = 0;
KalturaAssetStatus.READY = 2;
KalturaAssetStatus.DELETED = 3;
KalturaAssetStatus.IMPORTING = 7;
KalturaAssetStatus.EXPORTING = 9;

function KalturaAttachmentAssetStatus(){
}
KalturaAttachmentAssetStatus.ERROR = -1;
KalturaAttachmentAssetStatus.QUEUED = 0;
KalturaAttachmentAssetStatus.READY = 2;
KalturaAttachmentAssetStatus.DELETED = 3;
KalturaAttachmentAssetStatus.IMPORTING = 7;
KalturaAttachmentAssetStatus.EXPORTING = 9;

function KalturaBatchJobErrorTypes(){
}
KalturaBatchJobErrorTypes.APP = 0;
KalturaBatchJobErrorTypes.RUNTIME = 1;
KalturaBatchJobErrorTypes.HTTP = 2;
KalturaBatchJobErrorTypes.CURL = 3;
KalturaBatchJobErrorTypes.KALTURA_API = 4;
KalturaBatchJobErrorTypes.KALTURA_CLIENT = 5;

function KalturaBatchJobStatus(){
}
KalturaBatchJobStatus.PENDING = 0;
KalturaBatchJobStatus.QUEUED = 1;
KalturaBatchJobStatus.PROCESSING = 2;
KalturaBatchJobStatus.PROCESSED = 3;
KalturaBatchJobStatus.MOVEFILE = 4;
KalturaBatchJobStatus.FINISHED = 5;
KalturaBatchJobStatus.FAILED = 6;
KalturaBatchJobStatus.ABORTED = 7;
KalturaBatchJobStatus.ALMOST_DONE = 8;
KalturaBatchJobStatus.RETRY = 9;
KalturaBatchJobStatus.FATAL = 10;
KalturaBatchJobStatus.DONT_PROCESS = 11;
KalturaBatchJobStatus.FINISHED_PARTIALLY = 12;

function KalturaBitRateMode(){
}
KalturaBitRateMode.CBR = 1;
KalturaBitRateMode.VBR = 2;

function KalturaBulkUploadCsvVersion(){
}
KalturaBulkUploadCsvVersion.V1 = 1;
KalturaBulkUploadCsvVersion.V2 = 2;
KalturaBulkUploadCsvVersion.V3 = 3;

function KalturaCaptionAssetStatus(){
}
KalturaCaptionAssetStatus.ERROR = -1;
KalturaCaptionAssetStatus.QUEUED = 0;
KalturaCaptionAssetStatus.READY = 2;
KalturaCaptionAssetStatus.DELETED = 3;
KalturaCaptionAssetStatus.IMPORTING = 7;
KalturaCaptionAssetStatus.EXPORTING = 9;

function KalturaCategoryEntryStatus(){
}
KalturaCategoryEntryStatus.PENDING = 1;
KalturaCategoryEntryStatus.ACTIVE = 2;
KalturaCategoryEntryStatus.DELETED = 3;
KalturaCategoryEntryStatus.REJECTED = 4;

function KalturaCategoryStatus(){
}
KalturaCategoryStatus.UPDATING = 1;
KalturaCategoryStatus.ACTIVE = 2;
KalturaCategoryStatus.DELETED = 3;
KalturaCategoryStatus.PURGED = 4;

function KalturaCategoryUserPermissionLevel(){
}
KalturaCategoryUserPermissionLevel.MANAGER = 0;
KalturaCategoryUserPermissionLevel.MODERATOR = 1;
KalturaCategoryUserPermissionLevel.CONTRIBUTOR = 2;
KalturaCategoryUserPermissionLevel.MEMBER = 3;
KalturaCategoryUserPermissionLevel.NONE = 4;

function KalturaCategoryUserStatus(){
}
KalturaCategoryUserStatus.ACTIVE = 1;
KalturaCategoryUserStatus.PENDING = 2;
KalturaCategoryUserStatus.NOT_ACTIVE = 3;
KalturaCategoryUserStatus.DELETED = 4;

function KalturaCommercialUseType(){
}
KalturaCommercialUseType.NON_COMMERCIAL_USE = 0;
KalturaCommercialUseType.COMMERCIAL_USE = 1;

function KalturaContributionPolicyType(){
}
KalturaContributionPolicyType.ALL = 1;
KalturaContributionPolicyType.MEMBERS_WITH_CONTRIBUTION_PERMISSION = 2;

function KalturaControlPanelCommandStatus(){
}
KalturaControlPanelCommandStatus.PENDING = 1;
KalturaControlPanelCommandStatus.HANDLED = 2;
KalturaControlPanelCommandStatus.DONE = 3;
KalturaControlPanelCommandStatus.FAILED = 4;

function KalturaControlPanelCommandTargetType(){
}
KalturaControlPanelCommandTargetType.DATA_CENTER = 1;
KalturaControlPanelCommandTargetType.SCHEDULER = 2;
KalturaControlPanelCommandTargetType.JOB_TYPE = 3;
KalturaControlPanelCommandTargetType.JOB = 4;
KalturaControlPanelCommandTargetType.BATCH = 5;

function KalturaControlPanelCommandType(){
}
KalturaControlPanelCommandType.KILL = 4;

function KalturaCountryRestrictionType(){
}
KalturaCountryRestrictionType.RESTRICT_COUNTRY_LIST = 0;
KalturaCountryRestrictionType.ALLOW_COUNTRY_LIST = 1;

function KalturaCuePointStatus(){
}
KalturaCuePointStatus.READY = 1;
KalturaCuePointStatus.DELETED = 2;
KalturaCuePointStatus.HANDLED = 3;
KalturaCuePointStatus.PENDING = 4;

function KalturaDVRStatus(){
}
KalturaDVRStatus.DISABLED = 0;
KalturaDVRStatus.ENABLED = 1;

function KalturaDeleteFlavorsLogicType(){
}
KalturaDeleteFlavorsLogicType.KEEP_LIST_DELETE_OTHERS = 1;
KalturaDeleteFlavorsLogicType.DELETE_LIST = 2;
KalturaDeleteFlavorsLogicType.DELETE_KEEP_SMALLEST = 3;

function KalturaDeliveryStatus(){
}
KalturaDeliveryStatus.ACTIVE = 0;
KalturaDeliveryStatus.DELETED = 1;
KalturaDeliveryStatus.STAGING_IN = 2;
KalturaDeliveryStatus.STAGING_OUT = 3;

function KalturaDirectoryRestrictionType(){
}
KalturaDirectoryRestrictionType.DONT_DISPLAY = 0;
KalturaDirectoryRestrictionType.DISPLAY_WITH_LINK = 1;

function KalturaDistributionAction(){
}
KalturaDistributionAction.SUBMIT = 1;
KalturaDistributionAction.UPDATE = 2;
KalturaDistributionAction.DELETE = 3;
KalturaDistributionAction.FETCH_REPORT = 4;

function KalturaDistributionErrorType(){
}
KalturaDistributionErrorType.MISSING_FLAVOR = 1;
KalturaDistributionErrorType.MISSING_THUMBNAIL = 2;
KalturaDistributionErrorType.MISSING_METADATA = 3;
KalturaDistributionErrorType.INVALID_DATA = 4;
KalturaDistributionErrorType.MISSING_ASSET = 5;
KalturaDistributionErrorType.CONDITION_NOT_MET = 6;

function KalturaDistributionFieldRequiredStatus(){
}
KalturaDistributionFieldRequiredStatus.NOT_REQUIRED = 0;
KalturaDistributionFieldRequiredStatus.REQUIRED_BY_PROVIDER = 1;
KalturaDistributionFieldRequiredStatus.REQUIRED_BY_PARTNER = 2;
KalturaDistributionFieldRequiredStatus.REQUIRED_FOR_AUTOMATIC_DISTRIBUTION = 3;

function KalturaDistributionProfileActionStatus(){
}
KalturaDistributionProfileActionStatus.DISABLED = 1;
KalturaDistributionProfileActionStatus.AUTOMATIC = 2;
KalturaDistributionProfileActionStatus.MANUAL = 3;

function KalturaDistributionProfileStatus(){
}
KalturaDistributionProfileStatus.DISABLED = 1;
KalturaDistributionProfileStatus.ENABLED = 2;
KalturaDistributionProfileStatus.DELETED = 3;

function KalturaDistributionProtocol(){
}
KalturaDistributionProtocol.FTP = 1;
KalturaDistributionProtocol.SCP = 2;
KalturaDistributionProtocol.SFTP = 3;
KalturaDistributionProtocol.HTTP = 4;
KalturaDistributionProtocol.HTTPS = 5;
KalturaDistributionProtocol.ASPERA = 10;

function KalturaDistributionValidationErrorType(){
}
KalturaDistributionValidationErrorType.CUSTOM_ERROR = 0;
KalturaDistributionValidationErrorType.STRING_EMPTY = 1;
KalturaDistributionValidationErrorType.STRING_TOO_LONG = 2;
KalturaDistributionValidationErrorType.STRING_TOO_SHORT = 3;
KalturaDistributionValidationErrorType.INVALID_FORMAT = 4;

function KalturaDocumentType(){
}
KalturaDocumentType.DOCUMENT = 11;
KalturaDocumentType.SWF = 12;
KalturaDocumentType.PDF = 13;

function KalturaDropFolderContentFileHandlerMatchPolicy(){
}
KalturaDropFolderContentFileHandlerMatchPolicy.ADD_AS_NEW = 1;
KalturaDropFolderContentFileHandlerMatchPolicy.MATCH_EXISTING_OR_ADD_AS_NEW = 2;
KalturaDropFolderContentFileHandlerMatchPolicy.MATCH_EXISTING_OR_KEEP_IN_FOLDER = 3;

function KalturaDropFolderFileDeletePolicy(){
}
KalturaDropFolderFileDeletePolicy.MANUAL_DELETE = 1;
KalturaDropFolderFileDeletePolicy.AUTO_DELETE = 2;
KalturaDropFolderFileDeletePolicy.AUTO_DELETE_WHEN_ENTRY_IS_READY = 3;

function KalturaDropFolderFileStatus(){
}
KalturaDropFolderFileStatus.UPLOADING = 1;
KalturaDropFolderFileStatus.PENDING = 2;
KalturaDropFolderFileStatus.WAITING = 3;
KalturaDropFolderFileStatus.HANDLED = 4;
KalturaDropFolderFileStatus.IGNORE = 5;
KalturaDropFolderFileStatus.DELETED = 6;
KalturaDropFolderFileStatus.PURGED = 7;
KalturaDropFolderFileStatus.NO_MATCH = 8;
KalturaDropFolderFileStatus.ERROR_HANDLING = 9;
KalturaDropFolderFileStatus.ERROR_DELETING = 10;
KalturaDropFolderFileStatus.DOWNLOADING = 11;
KalturaDropFolderFileStatus.ERROR_DOWNLOADING = 12;
KalturaDropFolderFileStatus.PROCESSING = 13;
KalturaDropFolderFileStatus.PARSED = 14;
KalturaDropFolderFileStatus.DETECTED = 15;

function KalturaDropFolderStatus(){
}
KalturaDropFolderStatus.DISABLED = 0;
KalturaDropFolderStatus.ENABLED = 1;
KalturaDropFolderStatus.DELETED = 2;
KalturaDropFolderStatus.ERROR = 3;

function KalturaEditorType(){
}
KalturaEditorType.SIMPLE = 1;
KalturaEditorType.ADVANCED = 2;

function KalturaEmailIngestionProfileStatus(){
}
KalturaEmailIngestionProfileStatus.INACTIVE = 0;
KalturaEmailIngestionProfileStatus.ACTIVE = 1;

function KalturaEmailNotificationTemplatePriority(){
}
KalturaEmailNotificationTemplatePriority.HIGH = 1;
KalturaEmailNotificationTemplatePriority.NORMAL = 3;
KalturaEmailNotificationTemplatePriority.LOW = 5;

function KalturaEntryDistributionFlag(){
}
KalturaEntryDistributionFlag.NONE = 0;
KalturaEntryDistributionFlag.SUBMIT_REQUIRED = 1;
KalturaEntryDistributionFlag.DELETE_REQUIRED = 2;
KalturaEntryDistributionFlag.UPDATE_REQUIRED = 3;
KalturaEntryDistributionFlag.ENABLE_REQUIRED = 4;
KalturaEntryDistributionFlag.DISABLE_REQUIRED = 5;

function KalturaEntryDistributionStatus(){
}
KalturaEntryDistributionStatus.PENDING = 0;
KalturaEntryDistributionStatus.QUEUED = 1;
KalturaEntryDistributionStatus.READY = 2;
KalturaEntryDistributionStatus.DELETED = 3;
KalturaEntryDistributionStatus.SUBMITTING = 4;
KalturaEntryDistributionStatus.UPDATING = 5;
KalturaEntryDistributionStatus.DELETING = 6;
KalturaEntryDistributionStatus.ERROR_SUBMITTING = 7;
KalturaEntryDistributionStatus.ERROR_UPDATING = 8;
KalturaEntryDistributionStatus.ERROR_DELETING = 9;
KalturaEntryDistributionStatus.REMOVED = 10;
KalturaEntryDistributionStatus.IMPORT_SUBMITTING = 11;
KalturaEntryDistributionStatus.IMPORT_UPDATING = 12;

function KalturaEntryDistributionSunStatus(){
}
KalturaEntryDistributionSunStatus.BEFORE_SUNRISE = 1;
KalturaEntryDistributionSunStatus.AFTER_SUNRISE = 2;
KalturaEntryDistributionSunStatus.AFTER_SUNSET = 3;

function KalturaEntryModerationStatus(){
}
KalturaEntryModerationStatus.PENDING_MODERATION = 1;
KalturaEntryModerationStatus.APPROVED = 2;
KalturaEntryModerationStatus.REJECTED = 3;
KalturaEntryModerationStatus.FLAGGED_FOR_REVIEW = 5;
KalturaEntryModerationStatus.AUTO_APPROVED = 6;

function KalturaEventNotificationTemplateStatus(){
}
KalturaEventNotificationTemplateStatus.DISABLED = 1;
KalturaEventNotificationTemplateStatus.ACTIVE = 2;
KalturaEventNotificationTemplateStatus.DELETED = 3;

function KalturaFeatureStatusType(){
}
KalturaFeatureStatusType.LOCK_CATEGORY = 1;
KalturaFeatureStatusType.CATEGORY = 2;
KalturaFeatureStatusType.CATEGORY_ENTRY = 3;
KalturaFeatureStatusType.ENTRY = 4;
KalturaFeatureStatusType.CATEGORY_USER = 5;
KalturaFeatureStatusType.USER = 6;

function KalturaFileSyncStatus(){
}
KalturaFileSyncStatus.ERROR = -1;
KalturaFileSyncStatus.PENDING = 1;
KalturaFileSyncStatus.READY = 2;
KalturaFileSyncStatus.DELETED = 3;
KalturaFileSyncStatus.PURGED = 4;

function KalturaFileSyncType(){
}
KalturaFileSyncType.FILE = 1;
KalturaFileSyncType.LINK = 2;
KalturaFileSyncType.URL = 3;

function KalturaFlavorAssetStatus(){
}
KalturaFlavorAssetStatus.ERROR = -1;
KalturaFlavorAssetStatus.QUEUED = 0;
KalturaFlavorAssetStatus.CONVERTING = 1;
KalturaFlavorAssetStatus.READY = 2;
KalturaFlavorAssetStatus.DELETED = 3;
KalturaFlavorAssetStatus.NOT_APPLICABLE = 4;
KalturaFlavorAssetStatus.TEMP = 5;
KalturaFlavorAssetStatus.WAIT_FOR_CONVERT = 6;
KalturaFlavorAssetStatus.IMPORTING = 7;
KalturaFlavorAssetStatus.VALIDATING = 8;
KalturaFlavorAssetStatus.EXPORTING = 9;

function KalturaFlavorReadyBehaviorType(){
}
KalturaFlavorReadyBehaviorType.NO_IMPACT = 0;
KalturaFlavorReadyBehaviorType.INHERIT_FLAVOR_PARAMS = 0;
KalturaFlavorReadyBehaviorType.REQUIRED = 1;
KalturaFlavorReadyBehaviorType.OPTIONAL = 2;

function KalturaGender(){
}
KalturaGender.UNKNOWN = 0;
KalturaGender.MALE = 1;
KalturaGender.FEMALE = 2;

function KalturaGenericDistributionProviderParser(){
}
KalturaGenericDistributionProviderParser.XSL = 1;
KalturaGenericDistributionProviderParser.XPATH = 2;
KalturaGenericDistributionProviderParser.REGEX = 3;

function KalturaGenericDistributionProviderStatus(){
}
KalturaGenericDistributionProviderStatus.ACTIVE = 2;
KalturaGenericDistributionProviderStatus.DELETED = 3;

function KalturaGroupUserStatus(){
}
KalturaGroupUserStatus.ACTIVE = 0;
KalturaGroupUserStatus.DELETED = 1;

function KalturaHttpNotificationAuthenticationMethod(){
}
KalturaHttpNotificationAuthenticationMethod.ANYSAFE = -18;
KalturaHttpNotificationAuthenticationMethod.ANY = -17;
KalturaHttpNotificationAuthenticationMethod.BASIC = 1;
KalturaHttpNotificationAuthenticationMethod.DIGEST = 2;
KalturaHttpNotificationAuthenticationMethod.GSSNEGOTIATE = 4;
KalturaHttpNotificationAuthenticationMethod.NTLM = 8;

function KalturaHttpNotificationMethod(){
}
KalturaHttpNotificationMethod.GET = 1;
KalturaHttpNotificationMethod.POST = 2;
KalturaHttpNotificationMethod.PUT = 3;
KalturaHttpNotificationMethod.DELETE = 4;

function KalturaHttpNotificationSslVersion(){
}
KalturaHttpNotificationSslVersion.V2 = 2;
KalturaHttpNotificationSslVersion.V3 = 3;

function KalturaInheritanceType(){
}
KalturaInheritanceType.INHERIT = 1;
KalturaInheritanceType.MANUAL = 2;

function KalturaIpAddressRestrictionType(){
}
KalturaIpAddressRestrictionType.RESTRICT_LIST = 0;
KalturaIpAddressRestrictionType.ALLOW_LIST = 1;

function KalturaLicenseType(){
}
KalturaLicenseType.UNKNOWN = -1;
KalturaLicenseType.NONE = 0;
KalturaLicenseType.COPYRIGHTED = 1;
KalturaLicenseType.PUBLIC_DOMAIN = 2;
KalturaLicenseType.CREATIVECOMMONS_ATTRIBUTION = 3;
KalturaLicenseType.CREATIVECOMMONS_ATTRIBUTION_SHARE_ALIKE = 4;
KalturaLicenseType.CREATIVECOMMONS_ATTRIBUTION_NO_DERIVATIVES = 5;
KalturaLicenseType.CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL = 6;
KalturaLicenseType.CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL_SHARE_ALIKE = 7;
KalturaLicenseType.CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL_NO_DERIVATIVES = 8;
KalturaLicenseType.GFDL = 9;
KalturaLicenseType.GPL = 10;
KalturaLicenseType.AFFERO_GPL = 11;
KalturaLicenseType.LGPL = 12;
KalturaLicenseType.BSD = 13;
KalturaLicenseType.APACHE = 14;
KalturaLicenseType.MOZILLA = 15;

function KalturaLimitFlavorsRestrictionType(){
}
KalturaLimitFlavorsRestrictionType.RESTRICT_LIST = 0;
KalturaLimitFlavorsRestrictionType.ALLOW_LIST = 1;

function KalturaLiveEntryStatus(){
}
KalturaLiveEntryStatus.STOPPED = 0;
KalturaLiveEntryStatus.PLAYABLE = 1;
KalturaLiveEntryStatus.BROADCASTING = 2;

function KalturaLivePublishStatus(){
}
KalturaLivePublishStatus.DISABLED = 0;
KalturaLivePublishStatus.ENABLED = 1;

function KalturaLiveReportExportType(){
}
KalturaLiveReportExportType.PARTNER_TOTAL_ALL = 1;
KalturaLiveReportExportType.PARTNER_TOTAL_LIVE = 2;
KalturaLiveReportExportType.ENTRY_TIME_LINE_ALL = 11;
KalturaLiveReportExportType.ENTRY_TIME_LINE_LIVE = 12;
KalturaLiveReportExportType.LOCATION_ALL = 21;
KalturaLiveReportExportType.LOCATION_LIVE = 22;
KalturaLiveReportExportType.SYNDICATION_ALL = 31;
KalturaLiveReportExportType.SYNDICATION_LIVE = 32;

function KalturaLiveStatsEventType(){
}
KalturaLiveStatsEventType.LIVE = 1;
KalturaLiveStatsEventType.DVR = 2;

function KalturaMailJobStatus(){
}
KalturaMailJobStatus.PENDING = 1;
KalturaMailJobStatus.SENT = 2;
KalturaMailJobStatus.ERROR = 3;
KalturaMailJobStatus.QUEUED = 4;

function KalturaMediaServerIndex(){
}
KalturaMediaServerIndex.PRIMARY = 0;
KalturaMediaServerIndex.SECONDARY = 1;

function KalturaMediaType(){
}
KalturaMediaType.VIDEO = 1;
KalturaMediaType.IMAGE = 2;
KalturaMediaType.AUDIO = 5;
KalturaMediaType.LIVE_STREAM_FLASH = 201;
KalturaMediaType.LIVE_STREAM_WINDOWS_MEDIA = 202;
KalturaMediaType.LIVE_STREAM_REAL_MEDIA = 203;
KalturaMediaType.LIVE_STREAM_QUICKTIME = 204;

function KalturaMetadataProfileCreateMode(){
}
KalturaMetadataProfileCreateMode.API = 1;
KalturaMetadataProfileCreateMode.KMC = 2;
KalturaMetadataProfileCreateMode.APP = 3;

function KalturaMetadataProfileStatus(){
}
KalturaMetadataProfileStatus.ACTIVE = 1;
KalturaMetadataProfileStatus.DEPRECATED = 2;
KalturaMetadataProfileStatus.TRANSFORMING = 3;

function KalturaMetadataStatus(){
}
KalturaMetadataStatus.VALID = 1;
KalturaMetadataStatus.INVALID = 2;
KalturaMetadataStatus.DELETED = 3;

function KalturaModerationFlagType(){
}
KalturaModerationFlagType.SEXUAL_CONTENT = 1;
KalturaModerationFlagType.VIOLENT_REPULSIVE = 2;
KalturaModerationFlagType.HARMFUL_DANGEROUS = 3;
KalturaModerationFlagType.SPAM_COMMERCIALS = 4;
KalturaModerationFlagType.COPYRIGHT = 5;
KalturaModerationFlagType.TERMS_OF_USE_VIOLATION = 6;

function KalturaMrssExtensionMode(){
}
KalturaMrssExtensionMode.APPEND = 1;
KalturaMrssExtensionMode.REPLACE = 2;

function KalturaNotificationObjectType(){
}
KalturaNotificationObjectType.ENTRY = 1;
KalturaNotificationObjectType.KSHOW = 2;
KalturaNotificationObjectType.USER = 3;
KalturaNotificationObjectType.BATCH_JOB = 4;

function KalturaNotificationStatus(){
}
KalturaNotificationStatus.PENDING = 1;
KalturaNotificationStatus.SENT = 2;
KalturaNotificationStatus.ERROR = 3;
KalturaNotificationStatus.SHOULD_RESEND = 4;
KalturaNotificationStatus.ERROR_RESENDING = 5;
KalturaNotificationStatus.SENT_SYNCH = 6;
KalturaNotificationStatus.QUEUED = 7;

function KalturaNotificationType(){
}
KalturaNotificationType.ENTRY_ADD = 1;
KalturaNotificationType.ENTR_UPDATE_PERMISSIONS = 2;
KalturaNotificationType.ENTRY_DELETE = 3;
KalturaNotificationType.ENTRY_BLOCK = 4;
KalturaNotificationType.ENTRY_UPDATE = 5;
KalturaNotificationType.ENTRY_UPDATE_THUMBNAIL = 6;
KalturaNotificationType.ENTRY_UPDATE_MODERATION = 7;
KalturaNotificationType.USER_ADD = 21;
KalturaNotificationType.USER_BANNED = 26;

function KalturaNullableBoolean(){
}
KalturaNullableBoolean.NULL_VALUE = -1;
KalturaNullableBoolean.FALSE_VALUE = 0;
KalturaNullableBoolean.TRUE_VALUE = 1;

function KalturaPartnerGroupType(){
}
KalturaPartnerGroupType.PUBLISHER = 1;
KalturaPartnerGroupType.VAR_GROUP = 2;
KalturaPartnerGroupType.GROUP = 3;
KalturaPartnerGroupType.TEMPLATE = 4;

function KalturaPartnerStatus(){
}
KalturaPartnerStatus.DELETED = 0;
KalturaPartnerStatus.ACTIVE = 1;
KalturaPartnerStatus.BLOCKED = 2;
KalturaPartnerStatus.FULL_BLOCK = 3;

function KalturaPartnerType(){
}
KalturaPartnerType.KMC = 1;
KalturaPartnerType.WIKI = 100;
KalturaPartnerType.WORDPRESS = 101;
KalturaPartnerType.DRUPAL = 102;
KalturaPartnerType.DEKIWIKI = 103;
KalturaPartnerType.MOODLE = 104;
KalturaPartnerType.COMMUNITY_EDITION = 105;
KalturaPartnerType.JOOMLA = 106;
KalturaPartnerType.BLACKBOARD = 107;
KalturaPartnerType.SAKAI = 108;
KalturaPartnerType.ADMIN_CONSOLE = 109;

function KalturaPermissionStatus(){
}
KalturaPermissionStatus.ACTIVE = 1;
KalturaPermissionStatus.BLOCKED = 2;
KalturaPermissionStatus.DELETED = 3;

function KalturaPermissionType(){
}
KalturaPermissionType.NORMAL = 1;
KalturaPermissionType.SPECIAL_FEATURE = 2;
KalturaPermissionType.PLUGIN = 3;
KalturaPermissionType.PARTNER_GROUP = 4;

function KalturaPlaylistType(){
}
KalturaPlaylistType.STATIC_LIST = 3;
KalturaPlaylistType.DYNAMIC = 10;
KalturaPlaylistType.EXTERNAL = 101;

function KalturaPrivacyType(){
}
KalturaPrivacyType.ALL = 1;
KalturaPrivacyType.AUTHENTICATED_USERS = 2;
KalturaPrivacyType.MEMBERS_ONLY = 3;

function KalturaQuizOutputType(){
}
KalturaQuizOutputType.PDF = 1;

function KalturaRecordStatus(){
}
KalturaRecordStatus.DISABLED = 0;
KalturaRecordStatus.APPENDED = 1;
KalturaRecordStatus.PER_SESSION = 2;

function KalturaResponseProfileStatus(){
}
KalturaResponseProfileStatus.DISABLED = 1;
KalturaResponseProfileStatus.ENABLED = 2;
KalturaResponseProfileStatus.DELETED = 3;

function KalturaResponseProfileType(){
}
KalturaResponseProfileType.INCLUDE_FIELDS = 1;
KalturaResponseProfileType.EXCLUDE_FIELDS = 2;

function KalturaResponseType(){
}
KalturaResponseType.RESPONSE_TYPE_JSON = 1;
KalturaResponseType.RESPONSE_TYPE_XML = 2;
KalturaResponseType.RESPONSE_TYPE_PHP = 3;
KalturaResponseType.RESPONSE_TYPE_PHP_ARRAY = 4;
KalturaResponseType.RESPONSE_TYPE_HTML = 7;
KalturaResponseType.RESPONSE_TYPE_MRSS = 8;
KalturaResponseType.RESPONSE_TYPE_JSONP = 9;

function KalturaScheduledTaskAddOrRemoveType(){
}
KalturaScheduledTaskAddOrRemoveType.ADD = 1;
KalturaScheduledTaskAddOrRemoveType.REMOVE = 2;

function KalturaScheduledTaskProfileStatus(){
}
KalturaScheduledTaskProfileStatus.DISABLED = 1;
KalturaScheduledTaskProfileStatus.ACTIVE = 2;
KalturaScheduledTaskProfileStatus.DELETED = 3;
KalturaScheduledTaskProfileStatus.SUSPENDED = 4;
KalturaScheduledTaskProfileStatus.DRY_RUN_ONLY = 5;

function KalturaSchedulerStatusType(){
}
KalturaSchedulerStatusType.RUNNING_BATCHES_COUNT = 1;
KalturaSchedulerStatusType.RUNNING_BATCHES_CPU = 2;
KalturaSchedulerStatusType.RUNNING_BATCHES_MEMORY = 3;
KalturaSchedulerStatusType.RUNNING_BATCHES_NETWORK = 4;
KalturaSchedulerStatusType.RUNNING_BATCHES_DISC_IO = 5;
KalturaSchedulerStatusType.RUNNING_BATCHES_DISC_SPACE = 6;
KalturaSchedulerStatusType.RUNNING_BATCHES_IS_RUNNING = 7;

function KalturaSearchOperatorType(){
}
KalturaSearchOperatorType.SEARCH_AND = 1;
KalturaSearchOperatorType.SEARCH_OR = 2;

function KalturaSearchProviderType(){
}
KalturaSearchProviderType.FLICKR = 3;
KalturaSearchProviderType.YOUTUBE = 4;
KalturaSearchProviderType.MYSPACE = 7;
KalturaSearchProviderType.PHOTOBUCKET = 8;
KalturaSearchProviderType.JAMENDO = 9;
KalturaSearchProviderType.CCMIXTER = 10;
KalturaSearchProviderType.NYPL = 11;
KalturaSearchProviderType.CURRENT = 12;
KalturaSearchProviderType.MEDIA_COMMONS = 13;
KalturaSearchProviderType.KALTURA = 20;
KalturaSearchProviderType.KALTURA_USER_CLIPS = 21;
KalturaSearchProviderType.ARCHIVE_ORG = 22;
KalturaSearchProviderType.KALTURA_PARTNER = 23;
KalturaSearchProviderType.METACAFE = 24;
KalturaSearchProviderType.SEARCH_PROXY = 28;
KalturaSearchProviderType.PARTNER_SPECIFIC = 100;

function KalturaServerNodeStatus(){
}
KalturaServerNodeStatus.ACTIVE = 1;
KalturaServerNodeStatus.DISABLED = 2;
KalturaServerNodeStatus.DELETED = 3;
KalturaServerNodeStatus.NOT_REGISTERED = 4;

function KalturaSessionType(){
}
KalturaSessionType.USER = 0;
KalturaSessionType.ADMIN = 2;

function KalturaShortLinkStatus(){
}
KalturaShortLinkStatus.DISABLED = 1;
KalturaShortLinkStatus.ENABLED = 2;
KalturaShortLinkStatus.DELETED = 3;

function KalturaSiteRestrictionType(){
}
KalturaSiteRestrictionType.RESTRICT_SITE_LIST = 0;
KalturaSiteRestrictionType.ALLOW_SITE_LIST = 1;

function KalturaStatsEventType(){
}
KalturaStatsEventType.WIDGET_LOADED = 1;
KalturaStatsEventType.MEDIA_LOADED = 2;
KalturaStatsEventType.PLAY = 3;
KalturaStatsEventType.PLAY_REACHED_25 = 4;
KalturaStatsEventType.PLAY_REACHED_50 = 5;
KalturaStatsEventType.PLAY_REACHED_75 = 6;
KalturaStatsEventType.PLAY_REACHED_100 = 7;
KalturaStatsEventType.OPEN_EDIT = 8;
KalturaStatsEventType.OPEN_VIRAL = 9;
KalturaStatsEventType.OPEN_DOWNLOAD = 10;
KalturaStatsEventType.OPEN_REPORT = 11;
KalturaStatsEventType.BUFFER_START = 12;
KalturaStatsEventType.BUFFER_END = 13;
KalturaStatsEventType.OPEN_FULL_SCREEN = 14;
KalturaStatsEventType.CLOSE_FULL_SCREEN = 15;
KalturaStatsEventType.REPLAY = 16;
KalturaStatsEventType.SEEK = 17;
KalturaStatsEventType.OPEN_UPLOAD = 18;
KalturaStatsEventType.SAVE_PUBLISH = 19;
KalturaStatsEventType.CLOSE_EDITOR = 20;
KalturaStatsEventType.PRE_BUMPER_PLAYED = 21;
KalturaStatsEventType.POST_BUMPER_PLAYED = 22;
KalturaStatsEventType.BUMPER_CLICKED = 23;
KalturaStatsEventType.PREROLL_STARTED = 24;
KalturaStatsEventType.MIDROLL_STARTED = 25;
KalturaStatsEventType.POSTROLL_STARTED = 26;
KalturaStatsEventType.OVERLAY_STARTED = 27;
KalturaStatsEventType.PREROLL_CLICKED = 28;
KalturaStatsEventType.MIDROLL_CLICKED = 29;
KalturaStatsEventType.POSTROLL_CLICKED = 30;
KalturaStatsEventType.OVERLAY_CLICKED = 31;
KalturaStatsEventType.PREROLL_25 = 32;
KalturaStatsEventType.PREROLL_50 = 33;
KalturaStatsEventType.PREROLL_75 = 34;
KalturaStatsEventType.MIDROLL_25 = 35;
KalturaStatsEventType.MIDROLL_50 = 36;
KalturaStatsEventType.MIDROLL_75 = 37;
KalturaStatsEventType.POSTROLL_25 = 38;
KalturaStatsEventType.POSTROLL_50 = 39;
KalturaStatsEventType.POSTROLL_75 = 40;

function KalturaStatsFeatureType(){
}
KalturaStatsFeatureType.NONE = 0;
KalturaStatsFeatureType.RELATED = 1;

function KalturaStatsKmcEventType(){
}
KalturaStatsKmcEventType.CONTENT_PAGE_VIEW = 1001;
KalturaStatsKmcEventType.CONTENT_ADD_PLAYLIST = 1010;
KalturaStatsKmcEventType.CONTENT_EDIT_PLAYLIST = 1011;
KalturaStatsKmcEventType.CONTENT_DELETE_PLAYLIST = 1012;
KalturaStatsKmcEventType.CONTENT_EDIT_ENTRY = 1013;
KalturaStatsKmcEventType.CONTENT_CHANGE_THUMBNAIL = 1014;
KalturaStatsKmcEventType.CONTENT_ADD_TAGS = 1015;
KalturaStatsKmcEventType.CONTENT_REMOVE_TAGS = 1016;
KalturaStatsKmcEventType.CONTENT_ADD_ADMIN_TAGS = 1017;
KalturaStatsKmcEventType.CONTENT_REMOVE_ADMIN_TAGS = 1018;
KalturaStatsKmcEventType.CONTENT_DOWNLOAD = 1019;
KalturaStatsKmcEventType.CONTENT_APPROVE_MODERATION = 1020;
KalturaStatsKmcEventType.CONTENT_REJECT_MODERATION = 1021;
KalturaStatsKmcEventType.CONTENT_BULK_UPLOAD = 1022;
KalturaStatsKmcEventType.CONTENT_ADMIN_KCW_UPLOAD = 1023;
KalturaStatsKmcEventType.ACCOUNT_CHANGE_PARTNER_INFO = 1030;
KalturaStatsKmcEventType.ACCOUNT_CHANGE_LOGIN_INFO = 1031;
KalturaStatsKmcEventType.ACCOUNT_CONTACT_US_USAGE = 1032;
KalturaStatsKmcEventType.ACCOUNT_UPDATE_SERVER_SETTINGS = 1033;
KalturaStatsKmcEventType.ACCOUNT_ACCOUNT_OVERVIEW = 1034;
KalturaStatsKmcEventType.ACCOUNT_ACCESS_CONTROL = 1035;
KalturaStatsKmcEventType.ACCOUNT_TRANSCODING_SETTINGS = 1036;
KalturaStatsKmcEventType.ACCOUNT_ACCOUNT_UPGRADE = 1037;
KalturaStatsKmcEventType.ACCOUNT_SAVE_SERVER_SETTINGS = 1038;
KalturaStatsKmcEventType.ACCOUNT_ACCESS_CONTROL_DELETE = 1039;
KalturaStatsKmcEventType.ACCOUNT_SAVE_TRANSCODING_SETTINGS = 1040;
KalturaStatsKmcEventType.LOGIN = 1041;
KalturaStatsKmcEventType.DASHBOARD_IMPORT_CONTENT = 1042;
KalturaStatsKmcEventType.DASHBOARD_UPDATE_CONTENT = 1043;
KalturaStatsKmcEventType.DASHBOARD_ACCOUNT_CONTACT_US = 1044;
KalturaStatsKmcEventType.DASHBOARD_VIEW_REPORTS = 1045;
KalturaStatsKmcEventType.DASHBOARD_EMBED_PLAYER = 1046;
KalturaStatsKmcEventType.DASHBOARD_EMBED_PLAYLIST = 1047;
KalturaStatsKmcEventType.DASHBOARD_CUSTOMIZE_PLAYERS = 1048;
KalturaStatsKmcEventType.APP_STUDIO_NEW_PLAYER_SINGLE_VIDEO = 1050;
KalturaStatsKmcEventType.APP_STUDIO_NEW_PLAYER_PLAYLIST = 1051;
KalturaStatsKmcEventType.APP_STUDIO_NEW_PLAYER_MULTI_TAB_PLAYLIST = 1052;
KalturaStatsKmcEventType.APP_STUDIO_EDIT_PLAYER_SINGLE_VIDEO = 1053;
KalturaStatsKmcEventType.APP_STUDIO_EDIT_PLAYER_PLAYLIST = 1054;
KalturaStatsKmcEventType.APP_STUDIO_EDIT_PLAYER_MULTI_TAB_PLAYLIST = 1055;
KalturaStatsKmcEventType.APP_STUDIO_DUPLICATE_PLAYER = 1056;
KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE = 1057;
KalturaStatsKmcEventType.CONTENT_DELETE_ITEM = 1058;
KalturaStatsKmcEventType.CONTENT_DELETE_MIX = 1059;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_TAB = 1070;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_CONTENT_REPORTS_TAB = 1071;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_USERS_AND_COMMUNITY_REPORTS_TAB = 1072;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_TOP_CONTRIBUTORS = 1073;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_MAP_OVERLAYS = 1074;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_TOP_SYNDICATIONS = 1075;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_TOP_CONTENT = 1076;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_CONTENT_DROPOFF = 1077;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_CONTENT_INTERACTIONS = 1078;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_CONTENT_CONTRIBUTIONS = 1079;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_VIDEO_DRILL_DOWN = 1080;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_CONTENT_DRILL_DOWN_INTERACTION = 1081;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_CONTENT_CONTRIBUTIONS_DRILLDOWN = 1082;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_VIDEO_DRILL_DOWN_DROPOFF = 1083;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_MAP_OVERLAYS_DRILLDOWN = 1084;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_TOP_SYNDICATIONS_DRILL_DOWN = 1085;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_VIEW_MONTHLY = 1086;
KalturaStatsKmcEventType.REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_VIEW_YEARLY = 1087;
KalturaStatsKmcEventType.CONTENT_ENTRY_DRILLDOWN = 1088;
KalturaStatsKmcEventType.CONTENT_OPEN_PREVIEW_AND_EMBED = 1089;

function KalturaStorageProfileDeliveryStatus(){
}
KalturaStorageProfileDeliveryStatus.ACTIVE = 1;
KalturaStorageProfileDeliveryStatus.BLOCKED = 2;

function KalturaStorageProfileReadyBehavior(){
}
KalturaStorageProfileReadyBehavior.NO_IMPACT = 0;
KalturaStorageProfileReadyBehavior.REQUIRED = 1;

function KalturaStorageProfileStatus(){
}
KalturaStorageProfileStatus.DISABLED = 1;
KalturaStorageProfileStatus.AUTOMATIC = 2;
KalturaStorageProfileStatus.MANUAL = 3;

function KalturaStorageServePriority(){
}
KalturaStorageServePriority.KALTURA_ONLY = 1;
KalturaStorageServePriority.KALTURA_FIRST = 2;
KalturaStorageServePriority.EXTERNAL_FIRST = 3;
KalturaStorageServePriority.EXTERNAL_ONLY = 4;

function KalturaSyndicationFeedStatus(){
}
KalturaSyndicationFeedStatus.DELETED = -1;
KalturaSyndicationFeedStatus.ACTIVE = 1;

function KalturaSyndicationFeedType(){
}
KalturaSyndicationFeedType.GOOGLE_VIDEO = 1;
KalturaSyndicationFeedType.YAHOO = 2;
KalturaSyndicationFeedType.ITUNES = 3;
KalturaSyndicationFeedType.TUBE_MOGUL = 4;
KalturaSyndicationFeedType.KALTURA = 5;
KalturaSyndicationFeedType.KALTURA_XSLT = 6;

function KalturaThumbAssetStatus(){
}
KalturaThumbAssetStatus.ERROR = -1;
KalturaThumbAssetStatus.QUEUED = 0;
KalturaThumbAssetStatus.CAPTURING = 1;
KalturaThumbAssetStatus.READY = 2;
KalturaThumbAssetStatus.DELETED = 3;
KalturaThumbAssetStatus.IMPORTING = 7;
KalturaThumbAssetStatus.EXPORTING = 9;

function KalturaThumbCropType(){
}
KalturaThumbCropType.RESIZE = 1;
KalturaThumbCropType.RESIZE_WITH_PADDING = 2;
KalturaThumbCropType.CROP = 3;
KalturaThumbCropType.CROP_FROM_TOP = 4;
KalturaThumbCropType.RESIZE_WITH_FORCE = 5;

function KalturaThumbCuePointSubType(){
}
KalturaThumbCuePointSubType.SLIDE = 1;
KalturaThumbCuePointSubType.CHAPTER = 2;

function KalturaTrackEntryEventType(){
}
KalturaTrackEntryEventType.UPLOADED_FILE = 1;
KalturaTrackEntryEventType.WEBCAM_COMPLETED = 2;
KalturaTrackEntryEventType.IMPORT_STARTED = 3;
KalturaTrackEntryEventType.ADD_ENTRY = 4;
KalturaTrackEntryEventType.UPDATE_ENTRY = 5;
KalturaTrackEntryEventType.DELETED_ENTRY = 6;

function KalturaUiConfCreationMode(){
}
KalturaUiConfCreationMode.WIZARD = 2;
KalturaUiConfCreationMode.ADVANCED = 3;

function KalturaUiConfObjType(){
}
KalturaUiConfObjType.PLAYER = 1;
KalturaUiConfObjType.CONTRIBUTION_WIZARD = 2;
KalturaUiConfObjType.SIMPLE_EDITOR = 3;
KalturaUiConfObjType.ADVANCED_EDITOR = 4;
KalturaUiConfObjType.PLAYLIST = 5;
KalturaUiConfObjType.APP_STUDIO = 6;
KalturaUiConfObjType.KRECORD = 7;
KalturaUiConfObjType.PLAYER_V3 = 8;
KalturaUiConfObjType.KMC_ACCOUNT = 9;
KalturaUiConfObjType.KMC_ANALYTICS = 10;
KalturaUiConfObjType.KMC_CONTENT = 11;
KalturaUiConfObjType.KMC_DASHBOARD = 12;
KalturaUiConfObjType.KMC_LOGIN = 13;
KalturaUiConfObjType.PLAYER_SL = 14;
KalturaUiConfObjType.CLIENTSIDE_ENCODER = 15;
KalturaUiConfObjType.KMC_GENERAL = 16;
KalturaUiConfObjType.KMC_ROLES_AND_PERMISSIONS = 17;
KalturaUiConfObjType.CLIPPER = 18;
KalturaUiConfObjType.KSR = 19;
KalturaUiConfObjType.KUPLOAD = 20;
KalturaUiConfObjType.WEBCASTING = 21;

function KalturaUpdateMethodType(){
}
KalturaUpdateMethodType.MANUAL = 0;
KalturaUpdateMethodType.AUTOMATIC = 1;

function KalturaUploadErrorCode(){
}
KalturaUploadErrorCode.NO_ERROR = 0;
KalturaUploadErrorCode.GENERAL_ERROR = 1;
KalturaUploadErrorCode.PARTIAL_UPLOAD = 2;

function KalturaUploadTokenStatus(){
}
KalturaUploadTokenStatus.PENDING = 0;
KalturaUploadTokenStatus.PARTIAL_UPLOAD = 1;
KalturaUploadTokenStatus.FULL_UPLOAD = 2;
KalturaUploadTokenStatus.CLOSED = 3;
KalturaUploadTokenStatus.TIMED_OUT = 4;
KalturaUploadTokenStatus.DELETED = 5;

function KalturaUserAgentRestrictionType(){
}
KalturaUserAgentRestrictionType.RESTRICT_LIST = 0;
KalturaUserAgentRestrictionType.ALLOW_LIST = 1;

function KalturaUserJoinPolicyType(){
}
KalturaUserJoinPolicyType.AUTO_JOIN = 1;
KalturaUserJoinPolicyType.REQUEST_TO_JOIN = 2;
KalturaUserJoinPolicyType.NOT_ALLOWED = 3;

function KalturaUserRoleStatus(){
}
KalturaUserRoleStatus.ACTIVE = 1;
KalturaUserRoleStatus.BLOCKED = 2;
KalturaUserRoleStatus.DELETED = 3;

function KalturaUserStatus(){
}
KalturaUserStatus.BLOCKED = 0;
KalturaUserStatus.ACTIVE = 1;
KalturaUserStatus.DELETED = 2;

function KalturaUserType(){
}
KalturaUserType.USER = 0;
KalturaUserType.GROUP = 1;

function KalturaVirusFoundAction(){
}
KalturaVirusFoundAction.NONE = 0;
KalturaVirusFoundAction.DELETE = 1;
KalturaVirusFoundAction.CLEAN_NONE = 2;
KalturaVirusFoundAction.CLEAN_DELETE = 3;

function KalturaVirusScanJobResult(){
}
KalturaVirusScanJobResult.SCAN_ERROR = 1;
KalturaVirusScanJobResult.FILE_IS_CLEAN = 2;
KalturaVirusScanJobResult.FILE_WAS_CLEANED = 3;
KalturaVirusScanJobResult.FILE_INFECTED = 4;

function KalturaVirusScanProfileStatus(){
}
KalturaVirusScanProfileStatus.DISABLED = 1;
KalturaVirusScanProfileStatus.ENABLED = 2;
KalturaVirusScanProfileStatus.DELETED = 3;

function KalturaWidgetSecurityType(){
}
KalturaWidgetSecurityType.NONE = 1;
KalturaWidgetSecurityType.TIMEHASH = 2;

function KalturaAccessControlOrderBy(){
}
KalturaAccessControlOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAccessControlOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaAccessControlProfileOrderBy(){
}
KalturaAccessControlProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAccessControlProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAccessControlProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAccessControlProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAdCuePointOrderBy(){
}
KalturaAdCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAdCuePointOrderBy.DURATION_ASC = "+duration";
KalturaAdCuePointOrderBy.END_TIME_ASC = "+endTime";
KalturaAdCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaAdCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaAdCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaAdCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAdCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAdCuePointOrderBy.DURATION_DESC = "-duration";
KalturaAdCuePointOrderBy.END_TIME_DESC = "-endTime";
KalturaAdCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaAdCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaAdCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaAdCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAdProtocolType(){
}
KalturaAdProtocolType.CUSTOM = "0";
KalturaAdProtocolType.VAST = "1";
KalturaAdProtocolType.VAST_2_0 = "2";
KalturaAdProtocolType.VPAID = "3";

function KalturaAdType(){
}
KalturaAdType.VIDEO = "1";
KalturaAdType.OVERLAY = "2";

function KalturaAdminUserOrderBy(){
}
KalturaAdminUserOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAdminUserOrderBy.ID_ASC = "+id";
KalturaAdminUserOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAdminUserOrderBy.ID_DESC = "-id";

function KalturaAkamaiUniversalStreamType(){
}
KalturaAkamaiUniversalStreamType.HD_IPHONE_IPAD_LIVE = "HD iPhone/iPad Live";
KalturaAkamaiUniversalStreamType.UNIVERSAL_STREAMING_LIVE = "Universal Streaming Live";

function KalturaAmazonS3StorageProfileFilesPermissionLevel(){
}
KalturaAmazonS3StorageProfileFilesPermissionLevel.ACL_AUTHENTICATED_READ = "authenticated-read";
KalturaAmazonS3StorageProfileFilesPermissionLevel.ACL_PRIVATE = "private";
KalturaAmazonS3StorageProfileFilesPermissionLevel.ACL_PUBLIC_READ = "public-read";
KalturaAmazonS3StorageProfileFilesPermissionLevel.ACL_PUBLIC_READ_WRITE = "public-read-write";

function KalturaAmazonS3StorageProfileOrderBy(){
}
KalturaAmazonS3StorageProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAmazonS3StorageProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAmazonS3StorageProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAmazonS3StorageProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAnnotationOrderBy(){
}
KalturaAnnotationOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAnnotationOrderBy.DURATION_ASC = "+duration";
KalturaAnnotationOrderBy.END_TIME_ASC = "+endTime";
KalturaAnnotationOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaAnnotationOrderBy.START_TIME_ASC = "+startTime";
KalturaAnnotationOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaAnnotationOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAnnotationOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAnnotationOrderBy.DURATION_DESC = "-duration";
KalturaAnnotationOrderBy.END_TIME_DESC = "-endTime";
KalturaAnnotationOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaAnnotationOrderBy.START_TIME_DESC = "-startTime";
KalturaAnnotationOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaAnnotationOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAnswerCuePointOrderBy(){
}
KalturaAnswerCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAnswerCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaAnswerCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaAnswerCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaAnswerCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAnswerCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAnswerCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaAnswerCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaAnswerCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaAnswerCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaApiActionPermissionItemOrderBy(){
}
KalturaApiActionPermissionItemOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaApiActionPermissionItemOrderBy.ID_ASC = "+id";
KalturaApiActionPermissionItemOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaApiActionPermissionItemOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaApiActionPermissionItemOrderBy.ID_DESC = "-id";
KalturaApiActionPermissionItemOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaApiParameterPermissionItemAction(){
}
KalturaApiParameterPermissionItemAction.USAGE = "all";
KalturaApiParameterPermissionItemAction.INSERT = "insert";
KalturaApiParameterPermissionItemAction.READ = "read";
KalturaApiParameterPermissionItemAction.UPDATE = "update";

function KalturaApiParameterPermissionItemOrderBy(){
}
KalturaApiParameterPermissionItemOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaApiParameterPermissionItemOrderBy.ID_ASC = "+id";
KalturaApiParameterPermissionItemOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaApiParameterPermissionItemOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaApiParameterPermissionItemOrderBy.ID_DESC = "-id";
KalturaApiParameterPermissionItemOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAppTokenHashType(){
}
KalturaAppTokenHashType.MD5 = "MD5";
KalturaAppTokenHashType.SHA1 = "SHA1";
KalturaAppTokenHashType.SHA256 = "SHA256";
KalturaAppTokenHashType.SHA512 = "SHA512";

function KalturaAppTokenOrderBy(){
}
KalturaAppTokenOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAppTokenOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAppTokenOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAppTokenOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAssetOrderBy(){
}
KalturaAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaAssetOrderBy.SIZE_ASC = "+size";
KalturaAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaAssetOrderBy.SIZE_DESC = "-size";
KalturaAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAssetParamsOrderBy(){
}

function KalturaAssetParamsOutputOrderBy(){
}

function KalturaAssetType(){
}
KalturaAssetType.ATTACHMENT = "attachment.Attachment";
KalturaAssetType.CAPTION = "caption.Caption";
KalturaAssetType.DOCUMENT = "document.Document";
KalturaAssetType.IMAGE = "document.Image";
KalturaAssetType.PDF = "document.PDF";
KalturaAssetType.SWF = "document.SWF";
KalturaAssetType.TIMED_THUMB_ASSET = "thumbCuePoint.timedThumb";
KalturaAssetType.TRANSCRIPT = "transcript.Transcript";
KalturaAssetType.FLAVOR = "1";
KalturaAssetType.THUMBNAIL = "2";
KalturaAssetType.LIVE = "3";

function KalturaAttachmentAssetOrderBy(){
}
KalturaAttachmentAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaAttachmentAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaAttachmentAssetOrderBy.SIZE_ASC = "+size";
KalturaAttachmentAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaAttachmentAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaAttachmentAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaAttachmentAssetOrderBy.SIZE_DESC = "-size";
KalturaAttachmentAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaAttachmentType(){
}
KalturaAttachmentType.TEXT = "1";
KalturaAttachmentType.MEDIA = "2";
KalturaAttachmentType.DOCUMENT = "3";

function KalturaAudioCodec(){
}
KalturaAudioCodec.NONE = "";
KalturaAudioCodec.AAC = "aac";
KalturaAudioCodec.AACHE = "aache";
KalturaAudioCodec.AC3 = "ac3";
KalturaAudioCodec.AMRNB = "amrnb";
KalturaAudioCodec.COPY = "copy";
KalturaAudioCodec.MP3 = "mp3";
KalturaAudioCodec.MPEG2 = "mpeg2";
KalturaAudioCodec.PCM = "pcm";
KalturaAudioCodec.VORBIS = "vorbis";
KalturaAudioCodec.WMA = "wma";
KalturaAudioCodec.WMAPRO = "wmapro";

function KalturaBaseEntryCloneOptions(){
}
KalturaBaseEntryCloneOptions.USERS = "1";
KalturaBaseEntryCloneOptions.CATEGORIES = "2";

function KalturaBaseEntryCompareAttribute(){
}
KalturaBaseEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaBaseEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaBaseEntryCompareAttribute.END_DATE = "endDate";
KalturaBaseEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaBaseEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaBaseEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaBaseEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaBaseEntryCompareAttribute.RANK = "rank";
KalturaBaseEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaBaseEntryCompareAttribute.START_DATE = "startDate";
KalturaBaseEntryCompareAttribute.STATUS = "status";
KalturaBaseEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaBaseEntryCompareAttribute.TYPE = "type";
KalturaBaseEntryCompareAttribute.UPDATED_AT = "updatedAt";

function KalturaBaseEntryMatchAttribute(){
}
KalturaBaseEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaBaseEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaBaseEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaBaseEntryMatchAttribute.DESCRIPTION = "description";
KalturaBaseEntryMatchAttribute.GROUP_ID = "groupId";
KalturaBaseEntryMatchAttribute.ID = "id";
KalturaBaseEntryMatchAttribute.NAME = "name";
KalturaBaseEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaBaseEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaBaseEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaBaseEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaBaseEntryMatchAttribute.TAGS = "tags";
KalturaBaseEntryMatchAttribute.USER_ID = "userId";

function KalturaBaseEntryOrderBy(){
}
KalturaBaseEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaBaseEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaBaseEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaBaseEntryOrderBy.NAME_ASC = "+name";
KalturaBaseEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaBaseEntryOrderBy.RANK_ASC = "+rank";
KalturaBaseEntryOrderBy.RECENT_ASC = "+recent";
KalturaBaseEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaBaseEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaBaseEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaBaseEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaBaseEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaBaseEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaBaseEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaBaseEntryOrderBy.NAME_DESC = "-name";
KalturaBaseEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaBaseEntryOrderBy.RANK_DESC = "-rank";
KalturaBaseEntryOrderBy.RECENT_DESC = "-recent";
KalturaBaseEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaBaseEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaBaseEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaBaseEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaBaseSyndicationFeedOrderBy(){
}
KalturaBaseSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaBaseSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaBaseSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaBaseSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaBaseSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaBaseSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaBaseSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaBaseSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaBaseSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaBaseSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaBatchJobObjectType(){
}
KalturaBatchJobObjectType.ENTRY_DISTRIBUTION = "contentDistribution.EntryDistribution";
KalturaBatchJobObjectType.DROP_FOLDER_FILE = "dropFolderXmlBulkUpload.DropFolderFile";
KalturaBatchJobObjectType.METADATA = "metadata.Metadata";
KalturaBatchJobObjectType.METADATA_PROFILE = "metadata.MetadataProfile";
KalturaBatchJobObjectType.SCHEDULED_TASK_PROFILE = "scheduledTask.ScheduledTaskProfile";
KalturaBatchJobObjectType.ENTRY = "1";
KalturaBatchJobObjectType.CATEGORY = "2";
KalturaBatchJobObjectType.FILE_SYNC = "3";
KalturaBatchJobObjectType.ASSET = "4";

function KalturaBatchJobOrderBy(){
}
KalturaBatchJobOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaBatchJobOrderBy.ESTIMATED_EFFORT_ASC = "+estimatedEffort";
KalturaBatchJobOrderBy.EXECUTION_ATTEMPTS_ASC = "+executionAttempts";
KalturaBatchJobOrderBy.FINISH_TIME_ASC = "+finishTime";
KalturaBatchJobOrderBy.LOCK_VERSION_ASC = "+lockVersion";
KalturaBatchJobOrderBy.PRIORITY_ASC = "+priority";
KalturaBatchJobOrderBy.QUEUE_TIME_ASC = "+queueTime";
KalturaBatchJobOrderBy.STATUS_ASC = "+status";
KalturaBatchJobOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaBatchJobOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaBatchJobOrderBy.ESTIMATED_EFFORT_DESC = "-estimatedEffort";
KalturaBatchJobOrderBy.EXECUTION_ATTEMPTS_DESC = "-executionAttempts";
KalturaBatchJobOrderBy.FINISH_TIME_DESC = "-finishTime";
KalturaBatchJobOrderBy.LOCK_VERSION_DESC = "-lockVersion";
KalturaBatchJobOrderBy.PRIORITY_DESC = "-priority";
KalturaBatchJobOrderBy.QUEUE_TIME_DESC = "-queueTime";
KalturaBatchJobOrderBy.STATUS_DESC = "-status";
KalturaBatchJobOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaBatchJobType(){
}
KalturaBatchJobType.CONVERT = "0";
KalturaBatchJobType.PARSE_MULTI_LANGUAGE_CAPTION_ASSET = "caption.parsemultilanguagecaptionasset";
KalturaBatchJobType.PARSE_CAPTION_ASSET = "captionSearch.parseCaptionAsset";
KalturaBatchJobType.DISTRIBUTION_DELETE = "contentDistribution.DistributionDelete";
KalturaBatchJobType.DISTRIBUTION_DISABLE = "contentDistribution.DistributionDisable";
KalturaBatchJobType.DISTRIBUTION_ENABLE = "contentDistribution.DistributionEnable";
KalturaBatchJobType.DISTRIBUTION_FETCH_REPORT = "contentDistribution.DistributionFetchReport";
KalturaBatchJobType.DISTRIBUTION_SUBMIT = "contentDistribution.DistributionSubmit";
KalturaBatchJobType.DISTRIBUTION_SYNC = "contentDistribution.DistributionSync";
KalturaBatchJobType.DISTRIBUTION_UPDATE = "contentDistribution.DistributionUpdate";
KalturaBatchJobType.DROP_FOLDER_CONTENT_PROCESSOR = "dropFolder.DropFolderContentProcessor";
KalturaBatchJobType.DROP_FOLDER_WATCHER = "dropFolder.DropFolderWatcher";
KalturaBatchJobType.EVENT_NOTIFICATION_HANDLER = "eventNotification.EventNotificationHandler";
KalturaBatchJobType.INTEGRATION = "integration.Integration";
KalturaBatchJobType.SCHEDULED_TASK = "scheduledTask.ScheduledTask";
KalturaBatchJobType.INDEX_TAGS = "tagSearch.IndexTagsByPrivacyContext";
KalturaBatchJobType.TAG_RESOLVE = "tagSearch.TagResolve";
KalturaBatchJobType.VIRUS_SCAN = "virusScan.VirusScan";
KalturaBatchJobType.IMPORT = "1";
KalturaBatchJobType.DELETE = "2";
KalturaBatchJobType.FLATTEN = "3";
KalturaBatchJobType.BULKUPLOAD = "4";
KalturaBatchJobType.DVDCREATOR = "5";
KalturaBatchJobType.DOWNLOAD = "6";
KalturaBatchJobType.OOCONVERT = "7";
KalturaBatchJobType.CONVERT_PROFILE = "10";
KalturaBatchJobType.POSTCONVERT = "11";
KalturaBatchJobType.EXTRACT_MEDIA = "14";
KalturaBatchJobType.MAIL = "15";
KalturaBatchJobType.NOTIFICATION = "16";
KalturaBatchJobType.CLEANUP = "17";
KalturaBatchJobType.SCHEDULER_HELPER = "18";
KalturaBatchJobType.BULKDOWNLOAD = "19";
KalturaBatchJobType.DB_CLEANUP = "20";
KalturaBatchJobType.PROVISION_PROVIDE = "21";
KalturaBatchJobType.CONVERT_COLLECTION = "22";
KalturaBatchJobType.STORAGE_EXPORT = "23";
KalturaBatchJobType.PROVISION_DELETE = "24";
KalturaBatchJobType.STORAGE_DELETE = "25";
KalturaBatchJobType.EMAIL_INGESTION = "26";
KalturaBatchJobType.METADATA_IMPORT = "27";
KalturaBatchJobType.METADATA_TRANSFORM = "28";
KalturaBatchJobType.FILESYNC_IMPORT = "29";
KalturaBatchJobType.CAPTURE_THUMB = "30";
KalturaBatchJobType.DELETE_FILE = "31";
KalturaBatchJobType.INDEX = "32";
KalturaBatchJobType.MOVE_CATEGORY_ENTRIES = "33";
KalturaBatchJobType.COPY = "34";
KalturaBatchJobType.CONCAT = "35";
KalturaBatchJobType.CONVERT_LIVE_SEGMENT = "36";
KalturaBatchJobType.COPY_PARTNER = "37";
KalturaBatchJobType.VALIDATE_LIVE_MEDIA_SERVERS = "38";
KalturaBatchJobType.SYNC_CATEGORY_PRIVACY_CONTEXT = "39";
KalturaBatchJobType.LIVE_REPORT_EXPORT = "40";
KalturaBatchJobType.RECALCULATE_CACHE = "41";

function KalturaBulkUploadAction(){
}
KalturaBulkUploadAction.ADD = "1";
KalturaBulkUploadAction.UPDATE = "2";
KalturaBulkUploadAction.DELETE = "3";
KalturaBulkUploadAction.REPLACE = "4";
KalturaBulkUploadAction.TRANSFORM_XSLT = "5";
KalturaBulkUploadAction.ADD_OR_UPDATE = "6";

function KalturaBulkUploadObjectType(){
}
KalturaBulkUploadObjectType.ENTRY = "1";
KalturaBulkUploadObjectType.CATEGORY = "2";
KalturaBulkUploadObjectType.USER = "3";
KalturaBulkUploadObjectType.CATEGORY_USER = "4";
KalturaBulkUploadObjectType.CATEGORY_ENTRY = "5";

function KalturaBulkUploadOrderBy(){
}

function KalturaBulkUploadResultObjectType(){
}
KalturaBulkUploadResultObjectType.ENTRY = "1";
KalturaBulkUploadResultObjectType.CATEGORY = "2";
KalturaBulkUploadResultObjectType.USER = "3";
KalturaBulkUploadResultObjectType.CATEGORY_USER = "4";
KalturaBulkUploadResultObjectType.CATEGORY_ENTRY = "5";

function KalturaBulkUploadResultStatus(){
}
KalturaBulkUploadResultStatus.ERROR = "1";
KalturaBulkUploadResultStatus.OK = "2";
KalturaBulkUploadResultStatus.IN_PROGRESS = "3";

function KalturaBulkUploadType(){
}
KalturaBulkUploadType.CSV = "bulkUploadCsv.CSV";
KalturaBulkUploadType.FILTER = "bulkUploadFilter.FILTER";
KalturaBulkUploadType.XML = "bulkUploadXml.XML";
KalturaBulkUploadType.DROP_FOLDER_XML = "dropFolderXmlBulkUpload.DROP_FOLDER_XML";

function KalturaCaptionAssetOrderBy(){
}
KalturaCaptionAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCaptionAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaCaptionAssetOrderBy.SIZE_ASC = "+size";
KalturaCaptionAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaCaptionAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaCaptionAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaCaptionAssetOrderBy.SIZE_DESC = "-size";
KalturaCaptionAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaCaptionParamsOrderBy(){
}

function KalturaCaptionType(){
}
KalturaCaptionType.SRT = "1";
KalturaCaptionType.DFXP = "2";
KalturaCaptionType.WEBVTT = "3";

function KalturaCategoryEntryAdvancedOrderBy(){
}
KalturaCategoryEntryAdvancedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCategoryEntryAdvancedOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaCategoryEntryOrderBy(){
}
KalturaCategoryEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCategoryEntryOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaCategoryIdentifierField(){
}
KalturaCategoryIdentifierField.FULL_NAME = "fullName";
KalturaCategoryIdentifierField.ID = "id";
KalturaCategoryIdentifierField.REFERENCE_ID = "referenceId";

function KalturaCategoryOrderBy(){
}
KalturaCategoryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCategoryOrderBy.DEPTH_ASC = "+depth";
KalturaCategoryOrderBy.DIRECT_ENTRIES_COUNT_ASC = "+directEntriesCount";
KalturaCategoryOrderBy.DIRECT_SUB_CATEGORIES_COUNT_ASC = "+directSubCategoriesCount";
KalturaCategoryOrderBy.ENTRIES_COUNT_ASC = "+entriesCount";
KalturaCategoryOrderBy.FULL_NAME_ASC = "+fullName";
KalturaCategoryOrderBy.MEMBERS_COUNT_ASC = "+membersCount";
KalturaCategoryOrderBy.NAME_ASC = "+name";
KalturaCategoryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaCategoryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaCategoryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaCategoryOrderBy.DEPTH_DESC = "-depth";
KalturaCategoryOrderBy.DIRECT_ENTRIES_COUNT_DESC = "-directEntriesCount";
KalturaCategoryOrderBy.DIRECT_SUB_CATEGORIES_COUNT_DESC = "-directSubCategoriesCount";
KalturaCategoryOrderBy.ENTRIES_COUNT_DESC = "-entriesCount";
KalturaCategoryOrderBy.FULL_NAME_DESC = "-fullName";
KalturaCategoryOrderBy.MEMBERS_COUNT_DESC = "-membersCount";
KalturaCategoryOrderBy.NAME_DESC = "-name";
KalturaCategoryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaCategoryOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaCategoryUserOrderBy(){
}
KalturaCategoryUserOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCategoryUserOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaCategoryUserOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaCategoryUserOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaCielo24Fidelity(){
}
KalturaCielo24Fidelity.MECHANICAL = "MECHANICAL";
KalturaCielo24Fidelity.PREMIUM = "PREMIUM";
KalturaCielo24Fidelity.PROFESSIONAL = "PROFESSIONAL";

function KalturaCielo24Priority(){
}
KalturaCielo24Priority.PRIORITY = "PRIORITY";
KalturaCielo24Priority.STANDARD = "STANDARD";

function KalturaCloneComponentSelectorType(){
}
KalturaCloneComponentSelectorType.INCLUDE_COMPONENT = "0";
KalturaCloneComponentSelectorType.EXCLUDE_COMPONENT = "1";

function KalturaCodeCuePointOrderBy(){
}
KalturaCodeCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCodeCuePointOrderBy.DURATION_ASC = "+duration";
KalturaCodeCuePointOrderBy.END_TIME_ASC = "+endTime";
KalturaCodeCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaCodeCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaCodeCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaCodeCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaCodeCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaCodeCuePointOrderBy.DURATION_DESC = "-duration";
KalturaCodeCuePointOrderBy.END_TIME_DESC = "-endTime";
KalturaCodeCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaCodeCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaCodeCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaCodeCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaConditionType(){
}
KalturaConditionType.EVENT_NOTIFICATION_FIELD = "eventNotification.BooleanField";
KalturaConditionType.EVENT_NOTIFICATION_OBJECT_CHANGED = "eventNotification.ObjectChanged";
KalturaConditionType.METADATA_FIELD_CHANGED = "metadata.FieldChanged";
KalturaConditionType.METADATA_FIELD_COMPARE = "metadata.FieldCompare";
KalturaConditionType.METADATA_FIELD_MATCH = "metadata.FieldMatch";
KalturaConditionType.AUTHENTICATED = "1";
KalturaConditionType.COUNTRY = "2";
KalturaConditionType.IP_ADDRESS = "3";
KalturaConditionType.SITE = "4";
KalturaConditionType.USER_AGENT = "5";
KalturaConditionType.FIELD_MATCH = "6";
KalturaConditionType.FIELD_COMPARE = "7";
KalturaConditionType.ASSET_PROPERTIES_COMPARE = "8";
KalturaConditionType.USER_ROLE = "9";
KalturaConditionType.GEO_DISTANCE = "10";
KalturaConditionType.OR_OPERATOR = "11";
KalturaConditionType.HASH = "12";
KalturaConditionType.DELIVERY_PROFILE = "13";
KalturaConditionType.ACTIVE_EDGE_VALIDATE = "14";

function KalturaConfigurableDistributionProfileOrderBy(){
}
KalturaConfigurableDistributionProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaConfigurableDistributionProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaConfigurableDistributionProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaConfigurableDistributionProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaContainerFormat(){
}
KalturaContainerFormat._3GP = "3gp";
KalturaContainerFormat.APPLEHTTP = "applehttp";
KalturaContainerFormat.AVI = "avi";
KalturaContainerFormat.BMP = "bmp";
KalturaContainerFormat.COPY = "copy";
KalturaContainerFormat.FLV = "flv";
KalturaContainerFormat.HLS = "hls";
KalturaContainerFormat.ISMA = "isma";
KalturaContainerFormat.ISMV = "ismv";
KalturaContainerFormat.JPG = "jpg";
KalturaContainerFormat.M2TS = "m2ts";
KalturaContainerFormat.M4V = "m4v";
KalturaContainerFormat.MKV = "mkv";
KalturaContainerFormat.MOV = "mov";
KalturaContainerFormat.MP3 = "mp3";
KalturaContainerFormat.MP4 = "mp4";
KalturaContainerFormat.MPEG = "mpeg";
KalturaContainerFormat.MPEGTS = "mpegts";
KalturaContainerFormat.MXF = "mxf";
KalturaContainerFormat.OGG = "ogg";
KalturaContainerFormat.OGV = "ogv";
KalturaContainerFormat.PDF = "pdf";
KalturaContainerFormat.PNG = "png";
KalturaContainerFormat.SWF = "swf";
KalturaContainerFormat.WAV = "wav";
KalturaContainerFormat.WEBM = "webm";
KalturaContainerFormat.WMA = "wma";
KalturaContainerFormat.WMV = "wmv";
KalturaContainerFormat.WVM = "wvm";

function KalturaContextType(){
}
KalturaContextType.PLAY = "1";
KalturaContextType.DOWNLOAD = "2";
KalturaContextType.THUMBNAIL = "3";
KalturaContextType.METADATA = "4";
KalturaContextType.EXPORT = "5";
KalturaContextType.SERVE = "6";

function KalturaControlPanelCommandOrderBy(){
}
KalturaControlPanelCommandOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaControlPanelCommandOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaControlPanelCommandOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaControlPanelCommandOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaConversionProfileAssetParamsOrderBy(){
}

function KalturaConversionProfileOrderBy(){
}
KalturaConversionProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaConversionProfileOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaConversionProfileStatus(){
}
KalturaConversionProfileStatus.DISABLED = "1";
KalturaConversionProfileStatus.ENABLED = "2";
KalturaConversionProfileStatus.DELETED = "3";

function KalturaConversionProfileType(){
}
KalturaConversionProfileType.MEDIA = "1";
KalturaConversionProfileType.LIVE_STREAM = "2";

function KalturaCuePointOrderBy(){
}
KalturaCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaCuePointType(){
}
KalturaCuePointType.AD = "adCuePoint.Ad";
KalturaCuePointType.ANNOTATION = "annotation.Annotation";
KalturaCuePointType.CODE = "codeCuePoint.Code";
KalturaCuePointType.EVENT = "eventCuePoint.Event";
KalturaCuePointType.QUIZ_ANSWER = "quiz.QUIZ_ANSWER";
KalturaCuePointType.QUIZ_QUESTION = "quiz.QUIZ_QUESTION";
KalturaCuePointType.THUMB = "thumbCuePoint.Thumb";

function KalturaDataEntryCompareAttribute(){
}
KalturaDataEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaDataEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaDataEntryCompareAttribute.END_DATE = "endDate";
KalturaDataEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaDataEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaDataEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaDataEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaDataEntryCompareAttribute.RANK = "rank";
KalturaDataEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaDataEntryCompareAttribute.START_DATE = "startDate";
KalturaDataEntryCompareAttribute.STATUS = "status";
KalturaDataEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaDataEntryCompareAttribute.TYPE = "type";
KalturaDataEntryCompareAttribute.UPDATED_AT = "updatedAt";

function KalturaDataEntryMatchAttribute(){
}
KalturaDataEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaDataEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaDataEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaDataEntryMatchAttribute.DESCRIPTION = "description";
KalturaDataEntryMatchAttribute.GROUP_ID = "groupId";
KalturaDataEntryMatchAttribute.ID = "id";
KalturaDataEntryMatchAttribute.NAME = "name";
KalturaDataEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaDataEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaDataEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaDataEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaDataEntryMatchAttribute.TAGS = "tags";
KalturaDataEntryMatchAttribute.USER_ID = "userId";

function KalturaDataEntryOrderBy(){
}
KalturaDataEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDataEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaDataEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaDataEntryOrderBy.NAME_ASC = "+name";
KalturaDataEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaDataEntryOrderBy.RANK_ASC = "+rank";
KalturaDataEntryOrderBy.RECENT_ASC = "+recent";
KalturaDataEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaDataEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaDataEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDataEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaDataEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDataEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaDataEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaDataEntryOrderBy.NAME_DESC = "-name";
KalturaDataEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaDataEntryOrderBy.RANK_DESC = "-rank";
KalturaDataEntryOrderBy.RECENT_DESC = "-recent";
KalturaDataEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaDataEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaDataEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaDataEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy(){
}
KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileAkamaiHdsOrderBy(){
}
KalturaDeliveryProfileAkamaiHdsOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileAkamaiHdsOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileAkamaiHdsOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileAkamaiHdsOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileAkamaiHttpOrderBy(){
}
KalturaDeliveryProfileAkamaiHttpOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileAkamaiHttpOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileAkamaiHttpOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileAkamaiHttpOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileGenericAppleHttpOrderBy(){
}
KalturaDeliveryProfileGenericAppleHttpOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileGenericAppleHttpOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileGenericAppleHttpOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileGenericAppleHttpOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileGenericHdsOrderBy(){
}
KalturaDeliveryProfileGenericHdsOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileGenericHdsOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileGenericHdsOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileGenericHdsOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileGenericHttpOrderBy(){
}
KalturaDeliveryProfileGenericHttpOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileGenericHttpOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileGenericHttpOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileGenericHttpOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileGenericRtmpOrderBy(){
}
KalturaDeliveryProfileGenericRtmpOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileGenericRtmpOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileGenericRtmpOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileGenericRtmpOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileGenericSilverLightOrderBy(){
}
KalturaDeliveryProfileGenericSilverLightOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileGenericSilverLightOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileGenericSilverLightOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileGenericSilverLightOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileLiveAppleHttpOrderBy(){
}
KalturaDeliveryProfileLiveAppleHttpOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileLiveAppleHttpOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileLiveAppleHttpOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileLiveAppleHttpOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileOrderBy(){
}
KalturaDeliveryProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileRtmpOrderBy(){
}
KalturaDeliveryProfileRtmpOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryProfileRtmpOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryProfileRtmpOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryProfileRtmpOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDeliveryProfileType(){
}
KalturaDeliveryProfileType.EDGE_CAST_HTTP = "edgeCast.EDGE_CAST_HTTP";
KalturaDeliveryProfileType.EDGE_CAST_RTMP = "edgeCast.EDGE_CAST_RTMP";
KalturaDeliveryProfileType.KONTIKI_HTTP = "kontiki.KONTIKI_HTTP";
KalturaDeliveryProfileType.VELOCIX_HDS = "velocix.VELOCIX_HDS";
KalturaDeliveryProfileType.VELOCIX_HLS = "velocix.VELOCIX_HLS";
KalturaDeliveryProfileType.APPLE_HTTP = "1";
KalturaDeliveryProfileType.HDS = "3";
KalturaDeliveryProfileType.HTTP = "4";
KalturaDeliveryProfileType.RTMP = "5";
KalturaDeliveryProfileType.RTSP = "6";
KalturaDeliveryProfileType.SILVER_LIGHT = "7";
KalturaDeliveryProfileType.AKAMAI_HLS_DIRECT = "10";
KalturaDeliveryProfileType.AKAMAI_HLS_MANIFEST = "11";
KalturaDeliveryProfileType.AKAMAI_HD = "12";
KalturaDeliveryProfileType.AKAMAI_HDS = "13";
KalturaDeliveryProfileType.AKAMAI_HTTP = "14";
KalturaDeliveryProfileType.AKAMAI_RTMP = "15";
KalturaDeliveryProfileType.AKAMAI_RTSP = "16";
KalturaDeliveryProfileType.AKAMAI_SS = "17";
KalturaDeliveryProfileType.GENERIC_HLS = "21";
KalturaDeliveryProfileType.GENERIC_HDS = "23";
KalturaDeliveryProfileType.GENERIC_HTTP = "24";
KalturaDeliveryProfileType.GENERIC_HLS_MANIFEST = "25";
KalturaDeliveryProfileType.GENERIC_HDS_MANIFEST = "26";
KalturaDeliveryProfileType.GENERIC_SS = "27";
KalturaDeliveryProfileType.GENERIC_RTMP = "28";
KalturaDeliveryProfileType.LEVEL3_HLS = "31";
KalturaDeliveryProfileType.LEVEL3_HTTP = "34";
KalturaDeliveryProfileType.LEVEL3_RTMP = "35";
KalturaDeliveryProfileType.LIMELIGHT_HTTP = "44";
KalturaDeliveryProfileType.LIMELIGHT_RTMP = "45";
KalturaDeliveryProfileType.LOCAL_PATH_APPLE_HTTP = "51";
KalturaDeliveryProfileType.LOCAL_PATH_HDS = "53";
KalturaDeliveryProfileType.LOCAL_PATH_HTTP = "54";
KalturaDeliveryProfileType.LOCAL_PATH_RTMP = "55";
KalturaDeliveryProfileType.VOD_PACKAGER_HLS = "61";
KalturaDeliveryProfileType.VOD_PACKAGER_HDS = "63";
KalturaDeliveryProfileType.VOD_PACKAGER_MSS = "67";
KalturaDeliveryProfileType.VOD_PACKAGER_DASH = "68";
KalturaDeliveryProfileType.LIVE_HLS = "1001";
KalturaDeliveryProfileType.LIVE_HDS = "1002";
KalturaDeliveryProfileType.LIVE_DASH = "1003";
KalturaDeliveryProfileType.LIVE_RTMP = "1005";
KalturaDeliveryProfileType.LIVE_HLS_TO_MULTICAST = "1006";
KalturaDeliveryProfileType.LIVE_AKAMAI_HDS = "1013";

function KalturaDeliveryServerNodeOrderBy(){
}
KalturaDeliveryServerNodeOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDeliveryServerNodeOrderBy.HEARTBEAT_TIME_ASC = "+heartbeatTime";
KalturaDeliveryServerNodeOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDeliveryServerNodeOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDeliveryServerNodeOrderBy.HEARTBEAT_TIME_DESC = "-heartbeatTime";
KalturaDeliveryServerNodeOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDistributionProfileOrderBy(){
}
KalturaDistributionProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDistributionProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDistributionProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDistributionProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDistributionProviderOrderBy(){
}

function KalturaDistributionProviderType(){
}
KalturaDistributionProviderType.FACEBOOK = "facebookDistribution.FACEBOOK";
KalturaDistributionProviderType.IDETIC = "ideticDistribution.IDETIC";
KalturaDistributionProviderType.YOUTUBE_API = "youtubeApiDistribution.YOUTUBE_API";
KalturaDistributionProviderType.GENERIC = "1";
KalturaDistributionProviderType.SYNDICATION = "2";

function KalturaDocumentEntryCompareAttribute(){
}
KalturaDocumentEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaDocumentEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaDocumentEntryCompareAttribute.END_DATE = "endDate";
KalturaDocumentEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaDocumentEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaDocumentEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaDocumentEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaDocumentEntryCompareAttribute.RANK = "rank";
KalturaDocumentEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaDocumentEntryCompareAttribute.START_DATE = "startDate";
KalturaDocumentEntryCompareAttribute.STATUS = "status";
KalturaDocumentEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaDocumentEntryCompareAttribute.TYPE = "type";
KalturaDocumentEntryCompareAttribute.UPDATED_AT = "updatedAt";

function KalturaDocumentEntryMatchAttribute(){
}
KalturaDocumentEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaDocumentEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaDocumentEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaDocumentEntryMatchAttribute.DESCRIPTION = "description";
KalturaDocumentEntryMatchAttribute.GROUP_ID = "groupId";
KalturaDocumentEntryMatchAttribute.ID = "id";
KalturaDocumentEntryMatchAttribute.NAME = "name";
KalturaDocumentEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaDocumentEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaDocumentEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaDocumentEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaDocumentEntryMatchAttribute.TAGS = "tags";
KalturaDocumentEntryMatchAttribute.USER_ID = "userId";

function KalturaDocumentEntryOrderBy(){
}
KalturaDocumentEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDocumentEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaDocumentEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaDocumentEntryOrderBy.NAME_ASC = "+name";
KalturaDocumentEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaDocumentEntryOrderBy.RANK_ASC = "+rank";
KalturaDocumentEntryOrderBy.RECENT_ASC = "+recent";
KalturaDocumentEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaDocumentEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaDocumentEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDocumentEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaDocumentEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDocumentEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaDocumentEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaDocumentEntryOrderBy.NAME_DESC = "-name";
KalturaDocumentEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaDocumentEntryOrderBy.RANK_DESC = "-rank";
KalturaDocumentEntryOrderBy.RECENT_DESC = "-recent";
KalturaDocumentEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaDocumentEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaDocumentEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaDocumentEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaDocumentFlavorParamsOrderBy(){
}

function KalturaDocumentFlavorParamsOutputOrderBy(){
}

function KalturaDropFolderErrorCode(){
}
KalturaDropFolderErrorCode.ERROR_CONNECT = "1";
KalturaDropFolderErrorCode.ERROR_AUTENTICATE = "2";
KalturaDropFolderErrorCode.ERROR_GET_PHISICAL_FILE_LIST = "3";
KalturaDropFolderErrorCode.ERROR_GET_DB_FILE_LIST = "4";
KalturaDropFolderErrorCode.DROP_FOLDER_APP_ERROR = "5";
KalturaDropFolderErrorCode.CONTENT_MATCH_POLICY_UNDEFINED = "6";

function KalturaDropFolderFileErrorCode(){
}
KalturaDropFolderFileErrorCode.ERROR_ADDING_BULK_UPLOAD = "dropFolderXmlBulkUpload.ERROR_ADDING_BULK_UPLOAD";
KalturaDropFolderFileErrorCode.ERROR_ADD_CONTENT_RESOURCE = "dropFolderXmlBulkUpload.ERROR_ADD_CONTENT_RESOURCE";
KalturaDropFolderFileErrorCode.ERROR_IN_BULK_UPLOAD = "dropFolderXmlBulkUpload.ERROR_IN_BULK_UPLOAD";
KalturaDropFolderFileErrorCode.ERROR_WRITING_TEMP_FILE = "dropFolderXmlBulkUpload.ERROR_WRITING_TEMP_FILE";
KalturaDropFolderFileErrorCode.LOCAL_FILE_WRONG_CHECKSUM = "dropFolderXmlBulkUpload.LOCAL_FILE_WRONG_CHECKSUM";
KalturaDropFolderFileErrorCode.LOCAL_FILE_WRONG_SIZE = "dropFolderXmlBulkUpload.LOCAL_FILE_WRONG_SIZE";
KalturaDropFolderFileErrorCode.MALFORMED_XML_FILE = "dropFolderXmlBulkUpload.MALFORMED_XML_FILE";
KalturaDropFolderFileErrorCode.XML_FILE_SIZE_EXCEED_LIMIT = "dropFolderXmlBulkUpload.XML_FILE_SIZE_EXCEED_LIMIT";
KalturaDropFolderFileErrorCode.ERROR_UPDATE_ENTRY = "1";
KalturaDropFolderFileErrorCode.ERROR_ADD_ENTRY = "2";
KalturaDropFolderFileErrorCode.FLAVOR_NOT_FOUND = "3";
KalturaDropFolderFileErrorCode.FLAVOR_MISSING_IN_FILE_NAME = "4";
KalturaDropFolderFileErrorCode.SLUG_REGEX_NO_MATCH = "5";
KalturaDropFolderFileErrorCode.ERROR_READING_FILE = "6";
KalturaDropFolderFileErrorCode.ERROR_DOWNLOADING_FILE = "7";
KalturaDropFolderFileErrorCode.ERROR_UPDATE_FILE = "8";
KalturaDropFolderFileErrorCode.ERROR_ADDING_CONTENT_PROCESSOR = "10";
KalturaDropFolderFileErrorCode.ERROR_IN_CONTENT_PROCESSOR = "11";
KalturaDropFolderFileErrorCode.ERROR_DELETING_FILE = "12";
KalturaDropFolderFileErrorCode.FILE_NO_MATCH = "13";

function KalturaDropFolderFileHandlerType(){
}
KalturaDropFolderFileHandlerType.XML = "dropFolderXmlBulkUpload.XML";
KalturaDropFolderFileHandlerType.CONTENT = "1";

function KalturaDropFolderFileOrderBy(){
}
KalturaDropFolderFileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDropFolderFileOrderBy.FILE_NAME_ASC = "+fileName";
KalturaDropFolderFileOrderBy.FILE_SIZE_ASC = "+fileSize";
KalturaDropFolderFileOrderBy.FILE_SIZE_LAST_SET_AT_ASC = "+fileSizeLastSetAt";
KalturaDropFolderFileOrderBy.ID_ASC = "+id";
KalturaDropFolderFileOrderBy.PARSED_FLAVOR_ASC = "+parsedFlavor";
KalturaDropFolderFileOrderBy.PARSED_SLUG_ASC = "+parsedSlug";
KalturaDropFolderFileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDropFolderFileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDropFolderFileOrderBy.FILE_NAME_DESC = "-fileName";
KalturaDropFolderFileOrderBy.FILE_SIZE_DESC = "-fileSize";
KalturaDropFolderFileOrderBy.FILE_SIZE_LAST_SET_AT_DESC = "-fileSizeLastSetAt";
KalturaDropFolderFileOrderBy.ID_DESC = "-id";
KalturaDropFolderFileOrderBy.PARSED_FLAVOR_DESC = "-parsedFlavor";
KalturaDropFolderFileOrderBy.PARSED_SLUG_DESC = "-parsedSlug";
KalturaDropFolderFileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDropFolderOrderBy(){
}
KalturaDropFolderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaDropFolderOrderBy.ID_ASC = "+id";
KalturaDropFolderOrderBy.NAME_ASC = "+name";
KalturaDropFolderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaDropFolderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaDropFolderOrderBy.ID_DESC = "-id";
KalturaDropFolderOrderBy.NAME_DESC = "-name";
KalturaDropFolderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaDropFolderType(){
}
KalturaDropFolderType.FEED = "FeedDropFolder.FEED";
KalturaDropFolderType.LOCAL = "1";
KalturaDropFolderType.FTP = "2";
KalturaDropFolderType.SCP = "3";
KalturaDropFolderType.SFTP = "4";
KalturaDropFolderType.S3 = "6";

function KalturaDurationType(){
}
KalturaDurationType.LONG = "long";
KalturaDurationType.MEDIUM = "medium";
KalturaDurationType.NOT_AVAILABLE = "notavailable";
KalturaDurationType.SHORT = "short";

function KalturaDynamicEnum(){
}

function KalturaEdgeServerNodeOrderBy(){
}
KalturaEdgeServerNodeOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaEdgeServerNodeOrderBy.HEARTBEAT_TIME_ASC = "+heartbeatTime";
KalturaEdgeServerNodeOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaEdgeServerNodeOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaEdgeServerNodeOrderBy.HEARTBEAT_TIME_DESC = "-heartbeatTime";
KalturaEdgeServerNodeOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaEmailNotificationFormat(){
}
KalturaEmailNotificationFormat.HTML = "1";
KalturaEmailNotificationFormat.TEXT = "2";

function KalturaEmailNotificationRecipientProviderType(){
}
KalturaEmailNotificationRecipientProviderType.STATIC_LIST = "1";
KalturaEmailNotificationRecipientProviderType.CATEGORY = "2";
KalturaEmailNotificationRecipientProviderType.USER = "3";

function KalturaEmailNotificationTemplateOrderBy(){
}
KalturaEmailNotificationTemplateOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaEmailNotificationTemplateOrderBy.ID_ASC = "+id";
KalturaEmailNotificationTemplateOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaEmailNotificationTemplateOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaEmailNotificationTemplateOrderBy.ID_DESC = "-id";
KalturaEmailNotificationTemplateOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaEntryDistributionOrderBy(){
}
KalturaEntryDistributionOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaEntryDistributionOrderBy.SUBMITTED_AT_ASC = "+submittedAt";
KalturaEntryDistributionOrderBy.SUNRISE_ASC = "+sunrise";
KalturaEntryDistributionOrderBy.SUNSET_ASC = "+sunset";
KalturaEntryDistributionOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaEntryDistributionOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaEntryDistributionOrderBy.SUBMITTED_AT_DESC = "-submittedAt";
KalturaEntryDistributionOrderBy.SUNRISE_DESC = "-sunrise";
KalturaEntryDistributionOrderBy.SUNSET_DESC = "-sunset";
KalturaEntryDistributionOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaEntryIdentifierField(){
}
KalturaEntryIdentifierField.ID = "id";
KalturaEntryIdentifierField.REFERENCE_ID = "referenceId";

function KalturaEntryReplacementStatus(){
}
KalturaEntryReplacementStatus.NONE = "0";
KalturaEntryReplacementStatus.APPROVED_BUT_NOT_READY = "1";
KalturaEntryReplacementStatus.READY_BUT_NOT_APPROVED = "2";
KalturaEntryReplacementStatus.NOT_READY_AND_NOT_APPROVED = "3";
KalturaEntryReplacementStatus.FAILED = "4";

function KalturaEntryStatus(){
}
KalturaEntryStatus.ERROR_IMPORTING = "-2";
KalturaEntryStatus.ERROR_CONVERTING = "-1";
KalturaEntryStatus.SCAN_FAILURE = "virusScan.ScanFailure";
KalturaEntryStatus.IMPORT = "0";
KalturaEntryStatus.INFECTED = "virusScan.Infected";
KalturaEntryStatus.PRECONVERT = "1";
KalturaEntryStatus.READY = "2";
KalturaEntryStatus.DELETED = "3";
KalturaEntryStatus.PENDING = "4";
KalturaEntryStatus.MODERATE = "5";
KalturaEntryStatus.BLOCKED = "6";
KalturaEntryStatus.NO_CONTENT = "7";

function KalturaEntryType(){
}
KalturaEntryType.AUTOMATIC = "-1";
KalturaEntryType.EXTERNAL_MEDIA = "externalMedia.externalMedia";
KalturaEntryType.MEDIA_CLIP = "1";
KalturaEntryType.MIX = "2";
KalturaEntryType.PLAYLIST = "5";
KalturaEntryType.DATA = "6";
KalturaEntryType.LIVE_STREAM = "7";
KalturaEntryType.LIVE_CHANNEL = "8";
KalturaEntryType.DOCUMENT = "10";

function KalturaEventCuePointOrderBy(){
}
KalturaEventCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaEventCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaEventCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaEventCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaEventCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaEventCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaEventCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaEventCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaEventCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaEventCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaEventNotificationEventObjectType(){
}
KalturaEventNotificationEventObjectType.AD_CUE_POINT = "adCuePointEventNotifications.AdCuePoint";
KalturaEventNotificationEventObjectType.ANNOTATION = "annotationEventNotifications.Annotation";
KalturaEventNotificationEventObjectType.CAPTION_ASSET = "captionAssetEventNotifications.CaptionAsset";
KalturaEventNotificationEventObjectType.CODE_CUE_POINT = "codeCuePointEventNotifications.CodeCuePoint";
KalturaEventNotificationEventObjectType.DISTRIBUTION_PROFILE = "contentDistributionEventNotifications.DistributionProfile";
KalturaEventNotificationEventObjectType.ENTRY_DISTRIBUTION = "contentDistributionEventNotifications.EntryDistribution";
KalturaEventNotificationEventObjectType.CUE_POINT = "cuePointEventNotifications.CuePoint";
KalturaEventNotificationEventObjectType.DROP_FOLDER = "dropFolderEventNotifications.DropFolder";
KalturaEventNotificationEventObjectType.DROP_FOLDER_FILE = "dropFolderEventNotifications.DropFolderFile";
KalturaEventNotificationEventObjectType.METADATA = "metadataEventNotifications.Metadata";
KalturaEventNotificationEventObjectType.ENTRY = "1";
KalturaEventNotificationEventObjectType.CATEGORY = "2";
KalturaEventNotificationEventObjectType.ASSET = "3";
KalturaEventNotificationEventObjectType.FLAVORASSET = "4";
KalturaEventNotificationEventObjectType.THUMBASSET = "5";
KalturaEventNotificationEventObjectType.KUSER = "8";
KalturaEventNotificationEventObjectType.ACCESSCONTROL = "9";
KalturaEventNotificationEventObjectType.BATCHJOB = "10";
KalturaEventNotificationEventObjectType.BULKUPLOADRESULT = "11";
KalturaEventNotificationEventObjectType.CATEGORYKUSER = "12";
KalturaEventNotificationEventObjectType.CONVERSIONPROFILE2 = "14";
KalturaEventNotificationEventObjectType.FLAVORPARAMS = "15";
KalturaEventNotificationEventObjectType.FLAVORPARAMSCONVERSIONPROFILE = "16";
KalturaEventNotificationEventObjectType.FLAVORPARAMSOUTPUT = "17";
KalturaEventNotificationEventObjectType.GENERICSYNDICATIONFEED = "18";
KalturaEventNotificationEventObjectType.KUSERTOUSERROLE = "19";
KalturaEventNotificationEventObjectType.PARTNER = "20";
KalturaEventNotificationEventObjectType.PERMISSION = "21";
KalturaEventNotificationEventObjectType.PERMISSIONITEM = "22";
KalturaEventNotificationEventObjectType.PERMISSIONTOPERMISSIONITEM = "23";
KalturaEventNotificationEventObjectType.SCHEDULER = "24";
KalturaEventNotificationEventObjectType.SCHEDULERCONFIG = "25";
KalturaEventNotificationEventObjectType.SCHEDULERSTATUS = "26";
KalturaEventNotificationEventObjectType.SCHEDULERWORKER = "27";
KalturaEventNotificationEventObjectType.STORAGEPROFILE = "28";
KalturaEventNotificationEventObjectType.SYNDICATIONFEED = "29";
KalturaEventNotificationEventObjectType.THUMBPARAMS = "31";
KalturaEventNotificationEventObjectType.THUMBPARAMSOUTPUT = "32";
KalturaEventNotificationEventObjectType.UPLOADTOKEN = "33";
KalturaEventNotificationEventObjectType.USERLOGINDATA = "34";
KalturaEventNotificationEventObjectType.USERROLE = "35";
KalturaEventNotificationEventObjectType.WIDGET = "36";
KalturaEventNotificationEventObjectType.CATEGORYENTRY = "37";

function KalturaEventNotificationEventType(){
}
KalturaEventNotificationEventType.BATCH_JOB_STATUS = "1";
KalturaEventNotificationEventType.OBJECT_ADDED = "2";
KalturaEventNotificationEventType.OBJECT_CHANGED = "3";
KalturaEventNotificationEventType.OBJECT_COPIED = "4";
KalturaEventNotificationEventType.OBJECT_CREATED = "5";
KalturaEventNotificationEventType.OBJECT_DATA_CHANGED = "6";
KalturaEventNotificationEventType.OBJECT_DELETED = "7";
KalturaEventNotificationEventType.OBJECT_ERASED = "8";
KalturaEventNotificationEventType.OBJECT_READY_FOR_REPLACMENT = "9";
KalturaEventNotificationEventType.OBJECT_SAVED = "10";
KalturaEventNotificationEventType.OBJECT_UPDATED = "11";
KalturaEventNotificationEventType.OBJECT_REPLACED = "12";
KalturaEventNotificationEventType.OBJECT_READY_FOR_INDEX = "13";

function KalturaEventNotificationTemplateOrderBy(){
}
KalturaEventNotificationTemplateOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaEventNotificationTemplateOrderBy.ID_ASC = "+id";
KalturaEventNotificationTemplateOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaEventNotificationTemplateOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaEventNotificationTemplateOrderBy.ID_DESC = "-id";
KalturaEventNotificationTemplateOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaEventNotificationTemplateType(){
}
KalturaEventNotificationTemplateType.EMAIL = "emailNotification.Email";
KalturaEventNotificationTemplateType.HTTP = "httpNotification.Http";

function KalturaEventType(){
}
KalturaEventType.BROADCAST_START = "1";
KalturaEventType.BROADCAST_END = "2";

function KalturaExternalMediaEntryCompareAttribute(){
}
KalturaExternalMediaEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaExternalMediaEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaExternalMediaEntryCompareAttribute.END_DATE = "endDate";
KalturaExternalMediaEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaExternalMediaEntryCompareAttribute.MEDIA_DATE = "mediaDate";
KalturaExternalMediaEntryCompareAttribute.MEDIA_TYPE = "mediaType";
KalturaExternalMediaEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaExternalMediaEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaExternalMediaEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaExternalMediaEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaExternalMediaEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaExternalMediaEntryCompareAttribute.PLAYS = "plays";
KalturaExternalMediaEntryCompareAttribute.RANK = "rank";
KalturaExternalMediaEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaExternalMediaEntryCompareAttribute.START_DATE = "startDate";
KalturaExternalMediaEntryCompareAttribute.STATUS = "status";
KalturaExternalMediaEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaExternalMediaEntryCompareAttribute.TYPE = "type";
KalturaExternalMediaEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaExternalMediaEntryCompareAttribute.VIEWS = "views";

function KalturaExternalMediaEntryMatchAttribute(){
}
KalturaExternalMediaEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaExternalMediaEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaExternalMediaEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaExternalMediaEntryMatchAttribute.DESCRIPTION = "description";
KalturaExternalMediaEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaExternalMediaEntryMatchAttribute.FLAVOR_PARAMS_IDS = "flavorParamsIds";
KalturaExternalMediaEntryMatchAttribute.GROUP_ID = "groupId";
KalturaExternalMediaEntryMatchAttribute.ID = "id";
KalturaExternalMediaEntryMatchAttribute.NAME = "name";
KalturaExternalMediaEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaExternalMediaEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaExternalMediaEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaExternalMediaEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaExternalMediaEntryMatchAttribute.TAGS = "tags";
KalturaExternalMediaEntryMatchAttribute.USER_ID = "userId";

function KalturaExternalMediaEntryOrderBy(){
}
KalturaExternalMediaEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaExternalMediaEntryOrderBy.DURATION_ASC = "+duration";
KalturaExternalMediaEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaExternalMediaEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaExternalMediaEntryOrderBy.MEDIA_TYPE_ASC = "+mediaType";
KalturaExternalMediaEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaExternalMediaEntryOrderBy.NAME_ASC = "+name";
KalturaExternalMediaEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaExternalMediaEntryOrderBy.PLAYS_ASC = "+plays";
KalturaExternalMediaEntryOrderBy.RANK_ASC = "+rank";
KalturaExternalMediaEntryOrderBy.RECENT_ASC = "+recent";
KalturaExternalMediaEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaExternalMediaEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaExternalMediaEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaExternalMediaEntryOrderBy.VIEWS_ASC = "+views";
KalturaExternalMediaEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaExternalMediaEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaExternalMediaEntryOrderBy.DURATION_DESC = "-duration";
KalturaExternalMediaEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaExternalMediaEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaExternalMediaEntryOrderBy.MEDIA_TYPE_DESC = "-mediaType";
KalturaExternalMediaEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaExternalMediaEntryOrderBy.NAME_DESC = "-name";
KalturaExternalMediaEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaExternalMediaEntryOrderBy.PLAYS_DESC = "-plays";
KalturaExternalMediaEntryOrderBy.RANK_DESC = "-rank";
KalturaExternalMediaEntryOrderBy.RECENT_DESC = "-recent";
KalturaExternalMediaEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaExternalMediaEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaExternalMediaEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaExternalMediaEntryOrderBy.VIEWS_DESC = "-views";
KalturaExternalMediaEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaExternalMediaSourceType(){
}
KalturaExternalMediaSourceType.INTERCALL = "InterCall";
KalturaExternalMediaSourceType.YOUTUBE = "YouTube";

function KalturaFileAssetObjectType(){
}
KalturaFileAssetObjectType.UI_CONF = "2";

function KalturaFileAssetOrderBy(){
}
KalturaFileAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaFileAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaFileAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaFileAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaFileAssetStatus(){
}
KalturaFileAssetStatus.PENDING = "0";
KalturaFileAssetStatus.UPLOADING = "1";
KalturaFileAssetStatus.READY = "2";
KalturaFileAssetStatus.DELETED = "3";
KalturaFileAssetStatus.ERROR = "4";

function KalturaFileSyncObjectType(){
}
KalturaFileSyncObjectType.DISTRIBUTION_PROFILE = "contentDistribution.DistributionProfile";
KalturaFileSyncObjectType.ENTRY_DISTRIBUTION = "contentDistribution.EntryDistribution";
KalturaFileSyncObjectType.GENERIC_DISTRIBUTION_ACTION = "contentDistribution.GenericDistributionAction";
KalturaFileSyncObjectType.EMAIL_NOTIFICATION_TEMPLATE = "emailNotification.EmailNotificationTemplate";
KalturaFileSyncObjectType.HTTP_NOTIFICATION_TEMPLATE = "httpNotification.HttpNotificationTemplate";
KalturaFileSyncObjectType.ENTRY = "1";
KalturaFileSyncObjectType.UICONF = "2";
KalturaFileSyncObjectType.BATCHJOB = "3";
KalturaFileSyncObjectType.ASSET = "4";
KalturaFileSyncObjectType.FLAVOR_ASSET = "4";
KalturaFileSyncObjectType.METADATA = "5";
KalturaFileSyncObjectType.METADATA_PROFILE = "6";
KalturaFileSyncObjectType.SYNDICATION_FEED = "7";
KalturaFileSyncObjectType.CONVERSION_PROFILE = "8";
KalturaFileSyncObjectType.FILE_ASSET = "9";

function KalturaFileSyncOrderBy(){
}
KalturaFileSyncOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaFileSyncOrderBy.FILE_SIZE_ASC = "+fileSize";
KalturaFileSyncOrderBy.READY_AT_ASC = "+readyAt";
KalturaFileSyncOrderBy.SYNC_TIME_ASC = "+syncTime";
KalturaFileSyncOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaFileSyncOrderBy.VERSION_ASC = "+version";
KalturaFileSyncOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaFileSyncOrderBy.FILE_SIZE_DESC = "-fileSize";
KalturaFileSyncOrderBy.READY_AT_DESC = "-readyAt";
KalturaFileSyncOrderBy.SYNC_TIME_DESC = "-syncTime";
KalturaFileSyncOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaFileSyncOrderBy.VERSION_DESC = "-version";

function KalturaFlavorAssetOrderBy(){
}
KalturaFlavorAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaFlavorAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaFlavorAssetOrderBy.SIZE_ASC = "+size";
KalturaFlavorAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaFlavorAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaFlavorAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaFlavorAssetOrderBy.SIZE_DESC = "-size";
KalturaFlavorAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaFlavorParamsOrderBy(){
}

function KalturaFlavorParamsOutputOrderBy(){
}

function KalturaFtpDropFolderOrderBy(){
}
KalturaFtpDropFolderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaFtpDropFolderOrderBy.ID_ASC = "+id";
KalturaFtpDropFolderOrderBy.NAME_ASC = "+name";
KalturaFtpDropFolderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaFtpDropFolderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaFtpDropFolderOrderBy.ID_DESC = "-id";
KalturaFtpDropFolderOrderBy.NAME_DESC = "-name";
KalturaFtpDropFolderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGenericDistributionProfileOrderBy(){
}
KalturaGenericDistributionProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGenericDistributionProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGenericDistributionProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGenericDistributionProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGenericDistributionProviderActionOrderBy(){
}
KalturaGenericDistributionProviderActionOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGenericDistributionProviderActionOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGenericDistributionProviderActionOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGenericDistributionProviderActionOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGenericDistributionProviderOrderBy(){
}
KalturaGenericDistributionProviderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGenericDistributionProviderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGenericDistributionProviderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGenericDistributionProviderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGenericSyndicationFeedOrderBy(){
}
KalturaGenericSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGenericSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaGenericSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaGenericSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaGenericSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGenericSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGenericSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaGenericSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaGenericSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaGenericSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGenericXsltSyndicationFeedOrderBy(){
}
KalturaGenericXsltSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGenericXsltSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaGenericXsltSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaGenericXsltSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaGenericXsltSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGenericXsltSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGenericXsltSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaGenericXsltSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaGenericXsltSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaGenericXsltSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGeoCoderType(){
}
KalturaGeoCoderType.KALTURA = "1";

function KalturaGoogleSyndicationFeedAdultValues(){
}
KalturaGoogleSyndicationFeedAdultValues.NO = "No";
KalturaGoogleSyndicationFeedAdultValues.YES = "Yes";

function KalturaGoogleVideoSyndicationFeedOrderBy(){
}
KalturaGoogleVideoSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGoogleVideoSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaGoogleVideoSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaGoogleVideoSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaGoogleVideoSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGoogleVideoSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGoogleVideoSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaGoogleVideoSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaGoogleVideoSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaGoogleVideoSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaGroupUserOrderBy(){
}
KalturaGroupUserOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaGroupUserOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaGroupUserOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaGroupUserOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaHttpNotificationCertificateType(){
}
KalturaHttpNotificationCertificateType.DER = "DER";
KalturaHttpNotificationCertificateType.ENG = "ENG";
KalturaHttpNotificationCertificateType.PEM = "PEM";

function KalturaHttpNotificationSslKeyType(){
}
KalturaHttpNotificationSslKeyType.DER = "DER";
KalturaHttpNotificationSslKeyType.ENG = "ENG";
KalturaHttpNotificationSslKeyType.PEM = "PEM";

function KalturaHttpNotificationTemplateOrderBy(){
}
KalturaHttpNotificationTemplateOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaHttpNotificationTemplateOrderBy.ID_ASC = "+id";
KalturaHttpNotificationTemplateOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaHttpNotificationTemplateOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaHttpNotificationTemplateOrderBy.ID_DESC = "-id";
KalturaHttpNotificationTemplateOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaITunesSyndicationFeedAdultValues(){
}
KalturaITunesSyndicationFeedAdultValues.CLEAN = "clean";
KalturaITunesSyndicationFeedAdultValues.NO = "no";
KalturaITunesSyndicationFeedAdultValues.YES = "yes";

function KalturaITunesSyndicationFeedCategories(){
}
KalturaITunesSyndicationFeedCategories.ARTS = "Arts";
KalturaITunesSyndicationFeedCategories.ARTS_DESIGN = "Arts/Design";
KalturaITunesSyndicationFeedCategories.ARTS_FASHION_BEAUTY = "Arts/Fashion &amp; Beauty";
KalturaITunesSyndicationFeedCategories.ARTS_FOOD = "Arts/Food";
KalturaITunesSyndicationFeedCategories.ARTS_LITERATURE = "Arts/Literature";
KalturaITunesSyndicationFeedCategories.ARTS_PERFORMING_ARTS = "Arts/Performing Arts";
KalturaITunesSyndicationFeedCategories.ARTS_VISUAL_ARTS = "Arts/Visual Arts";
KalturaITunesSyndicationFeedCategories.BUSINESS = "Business";
KalturaITunesSyndicationFeedCategories.BUSINESS_BUSINESS_NEWS = "Business/Business News";
KalturaITunesSyndicationFeedCategories.BUSINESS_CAREERS = "Business/Careers";
KalturaITunesSyndicationFeedCategories.BUSINESS_INVESTING = "Business/Investing";
KalturaITunesSyndicationFeedCategories.BUSINESS_MANAGEMENT_MARKETING = "Business/Management &amp; Marketing";
KalturaITunesSyndicationFeedCategories.BUSINESS_SHOPPING = "Business/Shopping";
KalturaITunesSyndicationFeedCategories.COMEDY = "Comedy";
KalturaITunesSyndicationFeedCategories.EDUCATION = "Education";
KalturaITunesSyndicationFeedCategories.EDUCATION_TECHNOLOGY = "Education/Education Technology";
KalturaITunesSyndicationFeedCategories.EDUCATION_HIGHER_EDUCATION = "Education/Higher Education";
KalturaITunesSyndicationFeedCategories.EDUCATION_K_12 = "Education/K-12";
KalturaITunesSyndicationFeedCategories.EDUCATION_LANGUAGE_COURSES = "Education/Language Courses";
KalturaITunesSyndicationFeedCategories.EDUCATION_TRAINING = "Education/Training";
KalturaITunesSyndicationFeedCategories.GAMES_HOBBIES = "Games &amp; Hobbies";
KalturaITunesSyndicationFeedCategories.GAMES_HOBBIES_AUTOMOTIVE = "Games &amp; Hobbies/Automotive";
KalturaITunesSyndicationFeedCategories.GAMES_HOBBIES_AVIATION = "Games &amp; Hobbies/Aviation";
KalturaITunesSyndicationFeedCategories.GAMES_HOBBIES_HOBBIES = "Games &amp; Hobbies/Hobbies";
KalturaITunesSyndicationFeedCategories.GAMES_HOBBIES_OTHER_GAMES = "Games &amp; Hobbies/Other Games";
KalturaITunesSyndicationFeedCategories.GAMES_HOBBIES_VIDEO_GAMES = "Games &amp; Hobbies/Video Games";
KalturaITunesSyndicationFeedCategories.GOVERNMENT_ORGANIZATIONS = "Government &amp; Organizations";
KalturaITunesSyndicationFeedCategories.GOVERNMENT_ORGANIZATIONS_LOCAL = "Government &amp; Organizations/Local";
KalturaITunesSyndicationFeedCategories.GOVERNMENT_ORGANIZATIONS_NATIONAL = "Government &amp; Organizations/National";
KalturaITunesSyndicationFeedCategories.GOVERNMENT_ORGANIZATIONS_NON_PROFIT = "Government &amp; Organizations/Non-Profit";
KalturaITunesSyndicationFeedCategories.GOVERNMENT_ORGANIZATIONS_REGIONAL = "Government &amp; Organizations/Regional";
KalturaITunesSyndicationFeedCategories.HEALTH = "Health";
KalturaITunesSyndicationFeedCategories.HEALTH_ALTERNATIVE_HEALTH = "Health/Alternative Health";
KalturaITunesSyndicationFeedCategories.HEALTH_FITNESS_NUTRITION = "Health/Fitness &amp; Nutrition";
KalturaITunesSyndicationFeedCategories.HEALTH_SELF_HELP = "Health/Self-Help";
KalturaITunesSyndicationFeedCategories.HEALTH_SEXUALITY = "Health/Sexuality";
KalturaITunesSyndicationFeedCategories.KIDS_FAMILY = "Kids &amp; Family";
KalturaITunesSyndicationFeedCategories.MUSIC = "Music";
KalturaITunesSyndicationFeedCategories.NEWS_POLITICS = "News &amp; Politics";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY = "Religion &amp; Spirituality";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_BUDDHISM = "Religion &amp; Spirituality/Buddhism";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_CHRISTIANITY = "Religion &amp; Spirituality/Christianity";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_HINDUISM = "Religion &amp; Spirituality/Hinduism";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_ISLAM = "Religion &amp; Spirituality/Islam";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_JUDAISM = "Religion &amp; Spirituality/Judaism";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_OTHER = "Religion &amp; Spirituality/Other";
KalturaITunesSyndicationFeedCategories.RELIGION_SPIRITUALITY_SPIRITUALITY = "Religion &amp; Spirituality/Spirituality";
KalturaITunesSyndicationFeedCategories.SCIENCE_MEDICINE = "Science &amp; Medicine";
KalturaITunesSyndicationFeedCategories.SCIENCE_MEDICINE_MEDICINE = "Science &amp; Medicine/Medicine";
KalturaITunesSyndicationFeedCategories.SCIENCE_MEDICINE_NATURAL_SCIENCES = "Science &amp; Medicine/Natural Sciences";
KalturaITunesSyndicationFeedCategories.SCIENCE_MEDICINE_SOCIAL_SCIENCES = "Science &amp; Medicine/Social Sciences";
KalturaITunesSyndicationFeedCategories.SOCIETY_CULTURE = "Society &amp; Culture";
KalturaITunesSyndicationFeedCategories.SOCIETY_CULTURE_HISTORY = "Society &amp; Culture/History";
KalturaITunesSyndicationFeedCategories.SOCIETY_CULTURE_PERSONAL_JOURNALS = "Society &amp; Culture/Personal Journals";
KalturaITunesSyndicationFeedCategories.SOCIETY_CULTURE_PHILOSOPHY = "Society &amp; Culture/Philosophy";
KalturaITunesSyndicationFeedCategories.SOCIETY_CULTURE_PLACES_TRAVEL = "Society &amp; Culture/Places &amp; Travel";
KalturaITunesSyndicationFeedCategories.SPORTS_RECREATION = "Sports &amp; Recreation";
KalturaITunesSyndicationFeedCategories.SPORTS_RECREATION_AMATEUR = "Sports &amp; Recreation/Amateur";
KalturaITunesSyndicationFeedCategories.SPORTS_RECREATION_COLLEGE_HIGH_SCHOOL = "Sports &amp; Recreation/College &amp; High School";
KalturaITunesSyndicationFeedCategories.SPORTS_RECREATION_OUTDOOR = "Sports &amp; Recreation/Outdoor";
KalturaITunesSyndicationFeedCategories.SPORTS_RECREATION_PROFESSIONAL = "Sports &amp; Recreation/Professional";
KalturaITunesSyndicationFeedCategories.TV_FILM = "TV &amp; Film";
KalturaITunesSyndicationFeedCategories.TECHNOLOGY = "Technology";
KalturaITunesSyndicationFeedCategories.TECHNOLOGY_GADGETS = "Technology/Gadgets";
KalturaITunesSyndicationFeedCategories.TECHNOLOGY_PODCASTING = "Technology/Podcasting";
KalturaITunesSyndicationFeedCategories.TECHNOLOGY_SOFTWARE_HOW_TO = "Technology/Software How-To";
KalturaITunesSyndicationFeedCategories.TECHNOLOGY_TECH_NEWS = "Technology/Tech News";

function KalturaITunesSyndicationFeedOrderBy(){
}
KalturaITunesSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaITunesSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaITunesSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaITunesSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaITunesSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaITunesSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaITunesSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaITunesSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaITunesSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaITunesSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaImageFlavorParamsOrderBy(){
}

function KalturaImageFlavorParamsOutputOrderBy(){
}

function KalturaIntegrationProviderType(){
}
KalturaIntegrationProviderType.CIELO24 = "cielo24.Cielo24";
KalturaIntegrationProviderType.VOICEBASE = "voicebase.Voicebase";

function KalturaIntegrationTriggerType(){
}
KalturaIntegrationTriggerType.MANUAL = "1";

function KalturaKontikiStorageProfileOrderBy(){
}
KalturaKontikiStorageProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaKontikiStorageProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaKontikiStorageProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaKontikiStorageProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaLanguage(){
}
KalturaLanguage.AB = "Abkhazian";
KalturaLanguage.AA = "Afar";
KalturaLanguage.AF = "Afrikaans";
KalturaLanguage.SQ = "Albanian";
KalturaLanguage.AM = "Amharic";
KalturaLanguage.AR = "Arabic";
KalturaLanguage.HY = "Armenian";
KalturaLanguage.AS_ = "Assamese";
KalturaLanguage.AY = "Aymara";
KalturaLanguage.AZ = "Azerbaijani";
KalturaLanguage.BA = "Bashkir";
KalturaLanguage.EU = "Basque";
KalturaLanguage.BN = "Bengali (Bangla)";
KalturaLanguage.DZ = "Bhutani";
KalturaLanguage.BH = "Bihari";
KalturaLanguage.BI = "Bislama";
KalturaLanguage.BR = "Breton";
KalturaLanguage.BG = "Bulgarian";
KalturaLanguage.MY = "Burmese";
KalturaLanguage.BE = "Byelorussian (Belarusian)";
KalturaLanguage.KM = "Cambodian";
KalturaLanguage.CA = "Catalan";
KalturaLanguage.ZH = "Chinese";
KalturaLanguage.CO = "Corsican";
KalturaLanguage.HR = "Croatian";
KalturaLanguage.CS = "Czech";
KalturaLanguage.DA = "Danish";
KalturaLanguage.NL = "Dutch";
KalturaLanguage.EN = "English";
KalturaLanguage.EN_US = "English (American)";
KalturaLanguage.EN_GB = "English (British)";
KalturaLanguage.EO = "Esperanto";
KalturaLanguage.ET = "Estonian";
KalturaLanguage.FO = "Faeroese";
KalturaLanguage.FA = "Farsi";
KalturaLanguage.FJ = "Fiji";
KalturaLanguage.FI = "Finnish";
KalturaLanguage.FR = "French";
KalturaLanguage.FY = "Frisian";
KalturaLanguage.GV = "Gaelic (Manx)";
KalturaLanguage.GD = "Gaelic (Scottish)";
KalturaLanguage.GL = "Galician";
KalturaLanguage.KA = "Georgian";
KalturaLanguage.DE = "German";
KalturaLanguage.EL = "Greek";
KalturaLanguage.KL = "Greenlandic";
KalturaLanguage.GN = "Guarani";
KalturaLanguage.GU = "Gujarati";
KalturaLanguage.HA = "Hausa";
KalturaLanguage.HE = "Hebrew";
KalturaLanguage.IW = "Hebrew";
KalturaLanguage.HI = "Hindi";
KalturaLanguage.HU = "Hungarian";
KalturaLanguage.IS = "Icelandic";
KalturaLanguage.ID = "Indonesian";
KalturaLanguage.IN = "Indonesian";
KalturaLanguage.IA = "Interlingua";
KalturaLanguage.IE = "Interlingue";
KalturaLanguage.IU = "Inuktitut";
KalturaLanguage.IK = "Inupiak";
KalturaLanguage.GA = "Irish";
KalturaLanguage.IT = "Italian";
KalturaLanguage.JA = "Japanese";
KalturaLanguage.JV = "Javanese";
KalturaLanguage.KN = "Kannada";
KalturaLanguage.KS = "Kashmiri";
KalturaLanguage.KK = "Kazakh";
KalturaLanguage.RW = "Kinyarwanda (Ruanda)";
KalturaLanguage.KY = "Kirghiz";
KalturaLanguage.RN = "Kirundi (Rundi)";
KalturaLanguage.KO = "Korean";
KalturaLanguage.KU = "Kurdish";
KalturaLanguage.LO = "Laothian";
KalturaLanguage.LA = "Latin";
KalturaLanguage.LV = "Latvian (Lettish)";
KalturaLanguage.LI = "Limburgish ( Limburger)";
KalturaLanguage.LN = "Lingala";
KalturaLanguage.LT = "Lithuanian";
KalturaLanguage.MK = "Macedonian";
KalturaLanguage.MG = "Malagasy";
KalturaLanguage.MS = "Malay";
KalturaLanguage.ML = "Malayalam";
KalturaLanguage.MT = "Maltese";
KalturaLanguage.MI = "Maori";
KalturaLanguage.MR = "Marathi";
KalturaLanguage.MO = "Moldavian";
KalturaLanguage.MN = "Mongolian";
KalturaLanguage.MU = "Multilingual";
KalturaLanguage.NA = "Nauru";
KalturaLanguage.NE = "Nepali";
KalturaLanguage.NO = "Norwegian";
KalturaLanguage.OC = "Occitan";
KalturaLanguage.OR_ = "Oriya";
KalturaLanguage.OM = "Oromo (Afan, Galla)";
KalturaLanguage.PS = "Pashto (Pushto)";
KalturaLanguage.PL = "Polish";
KalturaLanguage.PT = "Portuguese";
KalturaLanguage.PA = "Punjabi";
KalturaLanguage.QU = "Quechua";
KalturaLanguage.RM = "Rhaeto-Romance";
KalturaLanguage.RO = "Romanian";
KalturaLanguage.RU = "Russian";
KalturaLanguage.SM = "Samoan";
KalturaLanguage.SG = "Sangro";
KalturaLanguage.SA = "Sanskrit";
KalturaLanguage.SR = "Serbian";
KalturaLanguage.SH = "Serbo-Croatian";
KalturaLanguage.ST = "Sesotho";
KalturaLanguage.TN = "Setswana";
KalturaLanguage.SN = "Shona";
KalturaLanguage.SD = "Sindhi";
KalturaLanguage.SI = "Sinhalese";
KalturaLanguage.SS = "Siswati";
KalturaLanguage.SK = "Slovak";
KalturaLanguage.SL = "Slovenian";
KalturaLanguage.SO = "Somali";
KalturaLanguage.ES = "Spanish";
KalturaLanguage.SU = "Sundanese";
KalturaLanguage.SW = "Swahili (Kiswahili)";
KalturaLanguage.SV = "Swedish";
KalturaLanguage.TL = "Tagalog";
KalturaLanguage.TG = "Tajik";
KalturaLanguage.TA = "Tamil";
KalturaLanguage.TT = "Tatar";
KalturaLanguage.TE = "Telugu";
KalturaLanguage.TH = "Thai";
KalturaLanguage.BO = "Tibetan";
KalturaLanguage.TI = "Tigrinya";
KalturaLanguage.TO = "Tonga";
KalturaLanguage.TS = "Tsonga";
KalturaLanguage.TR = "Turkish";
KalturaLanguage.TK = "Turkmen";
KalturaLanguage.TW = "Twi";
KalturaLanguage.UG = "Uighur";
KalturaLanguage.UK = "Ukrainian";
KalturaLanguage.UR = "Urdu";
KalturaLanguage.UZ = "Uzbek";
KalturaLanguage.VI = "Vietnamese";
KalturaLanguage.VO = "Volapuk";
KalturaLanguage.CY = "Welsh";
KalturaLanguage.WO = "Wolof";
KalturaLanguage.XH = "Xhosa";
KalturaLanguage.JI = "Yiddish";
KalturaLanguage.YI = "Yiddish";
KalturaLanguage.YO = "Yoruba";
KalturaLanguage.ZU = "Zulu";

function KalturaLanguageCode(){
}
KalturaLanguageCode.AA = "aa";
KalturaLanguageCode.AB = "ab";
KalturaLanguageCode.AF = "af";
KalturaLanguageCode.AM = "am";
KalturaLanguageCode.AR = "ar";
KalturaLanguageCode.AS_ = "as";
KalturaLanguageCode.AY = "ay";
KalturaLanguageCode.AZ = "az";
KalturaLanguageCode.BA = "ba";
KalturaLanguageCode.BE = "be";
KalturaLanguageCode.BG = "bg";
KalturaLanguageCode.BH = "bh";
KalturaLanguageCode.BI = "bi";
KalturaLanguageCode.BN = "bn";
KalturaLanguageCode.BO = "bo";
KalturaLanguageCode.BR = "br";
KalturaLanguageCode.CA = "ca";
KalturaLanguageCode.CO = "co";
KalturaLanguageCode.CS = "cs";
KalturaLanguageCode.CY = "cy";
KalturaLanguageCode.DA = "da";
KalturaLanguageCode.DE = "de";
KalturaLanguageCode.DZ = "dz";
KalturaLanguageCode.EL = "el";
KalturaLanguageCode.EN = "en";
KalturaLanguageCode.EN_GB = "en_gb";
KalturaLanguageCode.EN_US = "en_us";
KalturaLanguageCode.EO = "eo";
KalturaLanguageCode.ES = "es";
KalturaLanguageCode.ET = "et";
KalturaLanguageCode.EU = "eu";
KalturaLanguageCode.FA = "fa";
KalturaLanguageCode.FI = "fi";
KalturaLanguageCode.FJ = "fj";
KalturaLanguageCode.FO = "fo";
KalturaLanguageCode.FR = "fr";
KalturaLanguageCode.FY = "fy";
KalturaLanguageCode.GA = "ga";
KalturaLanguageCode.GD = "gd";
KalturaLanguageCode.GL = "gl";
KalturaLanguageCode.GN = "gn";
KalturaLanguageCode.GU = "gu";
KalturaLanguageCode.GV = "gv";
KalturaLanguageCode.HA = "ha";
KalturaLanguageCode.HE = "he";
KalturaLanguageCode.HI = "hi";
KalturaLanguageCode.HR = "hr";
KalturaLanguageCode.HU = "hu";
KalturaLanguageCode.HY = "hy";
KalturaLanguageCode.IA = "ia";
KalturaLanguageCode.ID = "id";
KalturaLanguageCode.IE = "ie";
KalturaLanguageCode.IK = "ik";
KalturaLanguageCode.IN = "in";
KalturaLanguageCode.IS = "is";
KalturaLanguageCode.IT = "it";
KalturaLanguageCode.IU = "iu";
KalturaLanguageCode.IW = "iw";
KalturaLanguageCode.JA = "ja";
KalturaLanguageCode.JI = "ji";
KalturaLanguageCode.JV = "jv";
KalturaLanguageCode.KA = "ka";
KalturaLanguageCode.KK = "kk";
KalturaLanguageCode.KL = "kl";
KalturaLanguageCode.KM = "km";
KalturaLanguageCode.KN = "kn";
KalturaLanguageCode.KO = "ko";
KalturaLanguageCode.KS = "ks";
KalturaLanguageCode.KU = "ku";
KalturaLanguageCode.KY = "ky";
KalturaLanguageCode.LA = "la";
KalturaLanguageCode.LI = "li";
KalturaLanguageCode.LN = "ln";
KalturaLanguageCode.LO = "lo";
KalturaLanguageCode.LT = "lt";
KalturaLanguageCode.LV = "lv";
KalturaLanguageCode.MG = "mg";
KalturaLanguageCode.MI = "mi";
KalturaLanguageCode.MK = "mk";
KalturaLanguageCode.ML = "ml";
KalturaLanguageCode.MN = "mn";
KalturaLanguageCode.MO = "mo";
KalturaLanguageCode.MR = "mr";
KalturaLanguageCode.MS = "ms";
KalturaLanguageCode.MT = "mt";
KalturaLanguageCode.MU = "multilingual";
KalturaLanguageCode.MY = "my";
KalturaLanguageCode.NA = "na";
KalturaLanguageCode.NE = "ne";
KalturaLanguageCode.NL = "nl";
KalturaLanguageCode.NO = "no";
KalturaLanguageCode.OC = "oc";
KalturaLanguageCode.OM = "om";
KalturaLanguageCode.OR_ = "or";
KalturaLanguageCode.PA = "pa";
KalturaLanguageCode.PL = "pl";
KalturaLanguageCode.PS = "ps";
KalturaLanguageCode.PT = "pt";
KalturaLanguageCode.QU = "qu";
KalturaLanguageCode.RM = "rm";
KalturaLanguageCode.RN = "rn";
KalturaLanguageCode.RO = "ro";
KalturaLanguageCode.RU = "ru";
KalturaLanguageCode.RW = "rw";
KalturaLanguageCode.SA = "sa";
KalturaLanguageCode.SD = "sd";
KalturaLanguageCode.SG = "sg";
KalturaLanguageCode.SH = "sh";
KalturaLanguageCode.SI = "si";
KalturaLanguageCode.SK = "sk";
KalturaLanguageCode.SL = "sl";
KalturaLanguageCode.SM = "sm";
KalturaLanguageCode.SN = "sn";
KalturaLanguageCode.SO = "so";
KalturaLanguageCode.SQ = "sq";
KalturaLanguageCode.SR = "sr";
KalturaLanguageCode.SS = "ss";
KalturaLanguageCode.ST = "st";
KalturaLanguageCode.SU = "su";
KalturaLanguageCode.SV = "sv";
KalturaLanguageCode.SW = "sw";
KalturaLanguageCode.TA = "ta";
KalturaLanguageCode.TE = "te";
KalturaLanguageCode.TG = "tg";
KalturaLanguageCode.TH = "th";
KalturaLanguageCode.TI = "ti";
KalturaLanguageCode.TK = "tk";
KalturaLanguageCode.TL = "tl";
KalturaLanguageCode.TN = "tn";
KalturaLanguageCode.TO = "to";
KalturaLanguageCode.TR = "tr";
KalturaLanguageCode.TS = "ts";
KalturaLanguageCode.TT = "tt";
KalturaLanguageCode.TW = "tw";
KalturaLanguageCode.UG = "ug";
KalturaLanguageCode.UK = "uk";
KalturaLanguageCode.UR = "ur";
KalturaLanguageCode.UZ = "uz";
KalturaLanguageCode.VI = "vi";
KalturaLanguageCode.VO = "vo";
KalturaLanguageCode.WO = "wo";
KalturaLanguageCode.XH = "xh";
KalturaLanguageCode.YI = "yi";
KalturaLanguageCode.YO = "yo";
KalturaLanguageCode.ZH = "zh";
KalturaLanguageCode.ZU = "zu";

function KalturaLikeOrderBy(){
}

function KalturaLiveAssetOrderBy(){
}
KalturaLiveAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaLiveAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaLiveAssetOrderBy.SIZE_ASC = "+size";
KalturaLiveAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaLiveAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaLiveAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaLiveAssetOrderBy.SIZE_DESC = "-size";
KalturaLiveAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaLiveChannelCompareAttribute(){
}
KalturaLiveChannelCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaLiveChannelCompareAttribute.CREATED_AT = "createdAt";
KalturaLiveChannelCompareAttribute.END_DATE = "endDate";
KalturaLiveChannelCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaLiveChannelCompareAttribute.MEDIA_DATE = "mediaDate";
KalturaLiveChannelCompareAttribute.MEDIA_TYPE = "mediaType";
KalturaLiveChannelCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaLiveChannelCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaLiveChannelCompareAttribute.MS_DURATION = "msDuration";
KalturaLiveChannelCompareAttribute.PARTNER_ID = "partnerId";
KalturaLiveChannelCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaLiveChannelCompareAttribute.PLAYS = "plays";
KalturaLiveChannelCompareAttribute.RANK = "rank";
KalturaLiveChannelCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaLiveChannelCompareAttribute.START_DATE = "startDate";
KalturaLiveChannelCompareAttribute.STATUS = "status";
KalturaLiveChannelCompareAttribute.TOTAL_RANK = "totalRank";
KalturaLiveChannelCompareAttribute.TYPE = "type";
KalturaLiveChannelCompareAttribute.UPDATED_AT = "updatedAt";
KalturaLiveChannelCompareAttribute.VIEWS = "views";

function KalturaLiveChannelMatchAttribute(){
}
KalturaLiveChannelMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaLiveChannelMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaLiveChannelMatchAttribute.CREATOR_ID = "creatorId";
KalturaLiveChannelMatchAttribute.DESCRIPTION = "description";
KalturaLiveChannelMatchAttribute.DURATION_TYPE = "durationType";
KalturaLiveChannelMatchAttribute.FLAVOR_PARAMS_IDS = "flavorParamsIds";
KalturaLiveChannelMatchAttribute.GROUP_ID = "groupId";
KalturaLiveChannelMatchAttribute.ID = "id";
KalturaLiveChannelMatchAttribute.NAME = "name";
KalturaLiveChannelMatchAttribute.REFERENCE_ID = "referenceId";
KalturaLiveChannelMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaLiveChannelMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaLiveChannelMatchAttribute.SEARCH_TEXT = "searchText";
KalturaLiveChannelMatchAttribute.TAGS = "tags";
KalturaLiveChannelMatchAttribute.USER_ID = "userId";

function KalturaLiveChannelOrderBy(){
}
KalturaLiveChannelOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaLiveChannelOrderBy.DURATION_ASC = "+duration";
KalturaLiveChannelOrderBy.END_DATE_ASC = "+endDate";
KalturaLiveChannelOrderBy.FIRST_BROADCAST_ASC = "+firstBroadcast";
KalturaLiveChannelOrderBy.LAST_BROADCAST_ASC = "+lastBroadcast";
KalturaLiveChannelOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaLiveChannelOrderBy.MEDIA_TYPE_ASC = "+mediaType";
KalturaLiveChannelOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaLiveChannelOrderBy.NAME_ASC = "+name";
KalturaLiveChannelOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaLiveChannelOrderBy.PLAYS_ASC = "+plays";
KalturaLiveChannelOrderBy.RANK_ASC = "+rank";
KalturaLiveChannelOrderBy.RECENT_ASC = "+recent";
KalturaLiveChannelOrderBy.START_DATE_ASC = "+startDate";
KalturaLiveChannelOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaLiveChannelOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaLiveChannelOrderBy.VIEWS_ASC = "+views";
KalturaLiveChannelOrderBy.WEIGHT_ASC = "+weight";
KalturaLiveChannelOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaLiveChannelOrderBy.DURATION_DESC = "-duration";
KalturaLiveChannelOrderBy.END_DATE_DESC = "-endDate";
KalturaLiveChannelOrderBy.FIRST_BROADCAST_DESC = "-firstBroadcast";
KalturaLiveChannelOrderBy.LAST_BROADCAST_DESC = "-lastBroadcast";
KalturaLiveChannelOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaLiveChannelOrderBy.MEDIA_TYPE_DESC = "-mediaType";
KalturaLiveChannelOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaLiveChannelOrderBy.NAME_DESC = "-name";
KalturaLiveChannelOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaLiveChannelOrderBy.PLAYS_DESC = "-plays";
KalturaLiveChannelOrderBy.RANK_DESC = "-rank";
KalturaLiveChannelOrderBy.RECENT_DESC = "-recent";
KalturaLiveChannelOrderBy.START_DATE_DESC = "-startDate";
KalturaLiveChannelOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaLiveChannelOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaLiveChannelOrderBy.VIEWS_DESC = "-views";
KalturaLiveChannelOrderBy.WEIGHT_DESC = "-weight";

function KalturaLiveChannelSegmentOrderBy(){
}
KalturaLiveChannelSegmentOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaLiveChannelSegmentOrderBy.START_TIME_ASC = "+startTime";
KalturaLiveChannelSegmentOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaLiveChannelSegmentOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaLiveChannelSegmentOrderBy.START_TIME_DESC = "-startTime";
KalturaLiveChannelSegmentOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaLiveChannelSegmentStatus(){
}
KalturaLiveChannelSegmentStatus.ACTIVE = "2";
KalturaLiveChannelSegmentStatus.DELETED = "3";

function KalturaLiveChannelSegmentTriggerType(){
}
KalturaLiveChannelSegmentTriggerType.CHANNEL_RELATIVE = "1";
KalturaLiveChannelSegmentTriggerType.ABSOLUTE_TIME = "2";
KalturaLiveChannelSegmentTriggerType.SEGMENT_START_RELATIVE = "3";
KalturaLiveChannelSegmentTriggerType.SEGMENT_END_RELATIVE = "4";

function KalturaLiveChannelSegmentType(){
}
KalturaLiveChannelSegmentType.VIDEO_AND_AUDIO = "1";

function KalturaLiveEntryCompareAttribute(){
}
KalturaLiveEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaLiveEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaLiveEntryCompareAttribute.END_DATE = "endDate";
KalturaLiveEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaLiveEntryCompareAttribute.MEDIA_DATE = "mediaDate";
KalturaLiveEntryCompareAttribute.MEDIA_TYPE = "mediaType";
KalturaLiveEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaLiveEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaLiveEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaLiveEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaLiveEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaLiveEntryCompareAttribute.PLAYS = "plays";
KalturaLiveEntryCompareAttribute.RANK = "rank";
KalturaLiveEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaLiveEntryCompareAttribute.START_DATE = "startDate";
KalturaLiveEntryCompareAttribute.STATUS = "status";
KalturaLiveEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaLiveEntryCompareAttribute.TYPE = "type";
KalturaLiveEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaLiveEntryCompareAttribute.VIEWS = "views";

function KalturaLiveEntryMatchAttribute(){
}
KalturaLiveEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaLiveEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaLiveEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaLiveEntryMatchAttribute.DESCRIPTION = "description";
KalturaLiveEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaLiveEntryMatchAttribute.FLAVOR_PARAMS_IDS = "flavorParamsIds";
KalturaLiveEntryMatchAttribute.GROUP_ID = "groupId";
KalturaLiveEntryMatchAttribute.ID = "id";
KalturaLiveEntryMatchAttribute.NAME = "name";
KalturaLiveEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaLiveEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaLiveEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaLiveEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaLiveEntryMatchAttribute.TAGS = "tags";
KalturaLiveEntryMatchAttribute.USER_ID = "userId";

function KalturaLiveEntryOrderBy(){
}
KalturaLiveEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaLiveEntryOrderBy.DURATION_ASC = "+duration";
KalturaLiveEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaLiveEntryOrderBy.FIRST_BROADCAST_ASC = "+firstBroadcast";
KalturaLiveEntryOrderBy.LAST_BROADCAST_ASC = "+lastBroadcast";
KalturaLiveEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaLiveEntryOrderBy.MEDIA_TYPE_ASC = "+mediaType";
KalturaLiveEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaLiveEntryOrderBy.NAME_ASC = "+name";
KalturaLiveEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaLiveEntryOrderBy.PLAYS_ASC = "+plays";
KalturaLiveEntryOrderBy.RANK_ASC = "+rank";
KalturaLiveEntryOrderBy.RECENT_ASC = "+recent";
KalturaLiveEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaLiveEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaLiveEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaLiveEntryOrderBy.VIEWS_ASC = "+views";
KalturaLiveEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaLiveEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaLiveEntryOrderBy.DURATION_DESC = "-duration";
KalturaLiveEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaLiveEntryOrderBy.FIRST_BROADCAST_DESC = "-firstBroadcast";
KalturaLiveEntryOrderBy.LAST_BROADCAST_DESC = "-lastBroadcast";
KalturaLiveEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaLiveEntryOrderBy.MEDIA_TYPE_DESC = "-mediaType";
KalturaLiveEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaLiveEntryOrderBy.NAME_DESC = "-name";
KalturaLiveEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaLiveEntryOrderBy.PLAYS_DESC = "-plays";
KalturaLiveEntryOrderBy.RANK_DESC = "-rank";
KalturaLiveEntryOrderBy.RECENT_DESC = "-recent";
KalturaLiveEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaLiveEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaLiveEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaLiveEntryOrderBy.VIEWS_DESC = "-views";
KalturaLiveEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaLiveParamsOrderBy(){
}

function KalturaLiveReportOrderBy(){
}
KalturaLiveReportOrderBy.NAME_ASC = "+name";
KalturaLiveReportOrderBy.AUDIENCE_DESC = "-audience";
KalturaLiveReportOrderBy.EVENT_TIME_DESC = "-eventTime";
KalturaLiveReportOrderBy.PLAYS_DESC = "-plays";

function KalturaLiveReportType(){
}
KalturaLiveReportType.ENTRY_GEO_TIME_LINE = "ENTRY_GEO_TIME_LINE";
KalturaLiveReportType.ENTRY_SYNDICATION_TOTAL = "ENTRY_SYNDICATION_TOTAL";
KalturaLiveReportType.ENTRY_TIME_LINE = "ENTRY_TIME_LINE";
KalturaLiveReportType.ENTRY_TOTAL = "ENTRY_TOTAL";
KalturaLiveReportType.PARTNER_TOTAL = "PARTNER_TOTAL";

function KalturaLiveStreamAdminEntryCompareAttribute(){
}
KalturaLiveStreamAdminEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaLiveStreamAdminEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaLiveStreamAdminEntryCompareAttribute.END_DATE = "endDate";
KalturaLiveStreamAdminEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaLiveStreamAdminEntryCompareAttribute.MEDIA_DATE = "mediaDate";
KalturaLiveStreamAdminEntryCompareAttribute.MEDIA_TYPE = "mediaType";
KalturaLiveStreamAdminEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaLiveStreamAdminEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaLiveStreamAdminEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaLiveStreamAdminEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaLiveStreamAdminEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaLiveStreamAdminEntryCompareAttribute.PLAYS = "plays";
KalturaLiveStreamAdminEntryCompareAttribute.RANK = "rank";
KalturaLiveStreamAdminEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaLiveStreamAdminEntryCompareAttribute.START_DATE = "startDate";
KalturaLiveStreamAdminEntryCompareAttribute.STATUS = "status";
KalturaLiveStreamAdminEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaLiveStreamAdminEntryCompareAttribute.TYPE = "type";
KalturaLiveStreamAdminEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaLiveStreamAdminEntryCompareAttribute.VIEWS = "views";

function KalturaLiveStreamAdminEntryMatchAttribute(){
}
KalturaLiveStreamAdminEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaLiveStreamAdminEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaLiveStreamAdminEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaLiveStreamAdminEntryMatchAttribute.DESCRIPTION = "description";
KalturaLiveStreamAdminEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaLiveStreamAdminEntryMatchAttribute.FLAVOR_PARAMS_IDS = "flavorParamsIds";
KalturaLiveStreamAdminEntryMatchAttribute.GROUP_ID = "groupId";
KalturaLiveStreamAdminEntryMatchAttribute.ID = "id";
KalturaLiveStreamAdminEntryMatchAttribute.NAME = "name";
KalturaLiveStreamAdminEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaLiveStreamAdminEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaLiveStreamAdminEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaLiveStreamAdminEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaLiveStreamAdminEntryMatchAttribute.TAGS = "tags";
KalturaLiveStreamAdminEntryMatchAttribute.USER_ID = "userId";

function KalturaLiveStreamAdminEntryOrderBy(){
}
KalturaLiveStreamAdminEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaLiveStreamAdminEntryOrderBy.DURATION_ASC = "+duration";
KalturaLiveStreamAdminEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaLiveStreamAdminEntryOrderBy.FIRST_BROADCAST_ASC = "+firstBroadcast";
KalturaLiveStreamAdminEntryOrderBy.LAST_BROADCAST_ASC = "+lastBroadcast";
KalturaLiveStreamAdminEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaLiveStreamAdminEntryOrderBy.MEDIA_TYPE_ASC = "+mediaType";
KalturaLiveStreamAdminEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaLiveStreamAdminEntryOrderBy.NAME_ASC = "+name";
KalturaLiveStreamAdminEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaLiveStreamAdminEntryOrderBy.PLAYS_ASC = "+plays";
KalturaLiveStreamAdminEntryOrderBy.RANK_ASC = "+rank";
KalturaLiveStreamAdminEntryOrderBy.RECENT_ASC = "+recent";
KalturaLiveStreamAdminEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaLiveStreamAdminEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaLiveStreamAdminEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaLiveStreamAdminEntryOrderBy.VIEWS_ASC = "+views";
KalturaLiveStreamAdminEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaLiveStreamAdminEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaLiveStreamAdminEntryOrderBy.DURATION_DESC = "-duration";
KalturaLiveStreamAdminEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaLiveStreamAdminEntryOrderBy.FIRST_BROADCAST_DESC = "-firstBroadcast";
KalturaLiveStreamAdminEntryOrderBy.LAST_BROADCAST_DESC = "-lastBroadcast";
KalturaLiveStreamAdminEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaLiveStreamAdminEntryOrderBy.MEDIA_TYPE_DESC = "-mediaType";
KalturaLiveStreamAdminEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaLiveStreamAdminEntryOrderBy.NAME_DESC = "-name";
KalturaLiveStreamAdminEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaLiveStreamAdminEntryOrderBy.PLAYS_DESC = "-plays";
KalturaLiveStreamAdminEntryOrderBy.RANK_DESC = "-rank";
KalturaLiveStreamAdminEntryOrderBy.RECENT_DESC = "-recent";
KalturaLiveStreamAdminEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaLiveStreamAdminEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaLiveStreamAdminEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaLiveStreamAdminEntryOrderBy.VIEWS_DESC = "-views";
KalturaLiveStreamAdminEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaLiveStreamEntryCompareAttribute(){
}
KalturaLiveStreamEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaLiveStreamEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaLiveStreamEntryCompareAttribute.END_DATE = "endDate";
KalturaLiveStreamEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaLiveStreamEntryCompareAttribute.MEDIA_DATE = "mediaDate";
KalturaLiveStreamEntryCompareAttribute.MEDIA_TYPE = "mediaType";
KalturaLiveStreamEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaLiveStreamEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaLiveStreamEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaLiveStreamEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaLiveStreamEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaLiveStreamEntryCompareAttribute.PLAYS = "plays";
KalturaLiveStreamEntryCompareAttribute.RANK = "rank";
KalturaLiveStreamEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaLiveStreamEntryCompareAttribute.START_DATE = "startDate";
KalturaLiveStreamEntryCompareAttribute.STATUS = "status";
KalturaLiveStreamEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaLiveStreamEntryCompareAttribute.TYPE = "type";
KalturaLiveStreamEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaLiveStreamEntryCompareAttribute.VIEWS = "views";

function KalturaLiveStreamEntryMatchAttribute(){
}
KalturaLiveStreamEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaLiveStreamEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaLiveStreamEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaLiveStreamEntryMatchAttribute.DESCRIPTION = "description";
KalturaLiveStreamEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaLiveStreamEntryMatchAttribute.FLAVOR_PARAMS_IDS = "flavorParamsIds";
KalturaLiveStreamEntryMatchAttribute.GROUP_ID = "groupId";
KalturaLiveStreamEntryMatchAttribute.ID = "id";
KalturaLiveStreamEntryMatchAttribute.NAME = "name";
KalturaLiveStreamEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaLiveStreamEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaLiveStreamEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaLiveStreamEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaLiveStreamEntryMatchAttribute.TAGS = "tags";
KalturaLiveStreamEntryMatchAttribute.USER_ID = "userId";

function KalturaLiveStreamEntryOrderBy(){
}
KalturaLiveStreamEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaLiveStreamEntryOrderBy.DURATION_ASC = "+duration";
KalturaLiveStreamEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaLiveStreamEntryOrderBy.FIRST_BROADCAST_ASC = "+firstBroadcast";
KalturaLiveStreamEntryOrderBy.LAST_BROADCAST_ASC = "+lastBroadcast";
KalturaLiveStreamEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaLiveStreamEntryOrderBy.MEDIA_TYPE_ASC = "+mediaType";
KalturaLiveStreamEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaLiveStreamEntryOrderBy.NAME_ASC = "+name";
KalturaLiveStreamEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaLiveStreamEntryOrderBy.PLAYS_ASC = "+plays";
KalturaLiveStreamEntryOrderBy.RANK_ASC = "+rank";
KalturaLiveStreamEntryOrderBy.RECENT_ASC = "+recent";
KalturaLiveStreamEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaLiveStreamEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaLiveStreamEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaLiveStreamEntryOrderBy.VIEWS_ASC = "+views";
KalturaLiveStreamEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaLiveStreamEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaLiveStreamEntryOrderBy.DURATION_DESC = "-duration";
KalturaLiveStreamEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaLiveStreamEntryOrderBy.FIRST_BROADCAST_DESC = "-firstBroadcast";
KalturaLiveStreamEntryOrderBy.LAST_BROADCAST_DESC = "-lastBroadcast";
KalturaLiveStreamEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaLiveStreamEntryOrderBy.MEDIA_TYPE_DESC = "-mediaType";
KalturaLiveStreamEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaLiveStreamEntryOrderBy.NAME_DESC = "-name";
KalturaLiveStreamEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaLiveStreamEntryOrderBy.PLAYS_DESC = "-plays";
KalturaLiveStreamEntryOrderBy.RANK_DESC = "-rank";
KalturaLiveStreamEntryOrderBy.RECENT_DESC = "-recent";
KalturaLiveStreamEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaLiveStreamEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaLiveStreamEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaLiveStreamEntryOrderBy.VIEWS_DESC = "-views";
KalturaLiveStreamEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaMailType(){
}
KalturaMailType.MAIL_TYPE_KALTURA_NEWSLETTER = "10";
KalturaMailType.MAIL_TYPE_ADDED_TO_FAVORITES = "11";
KalturaMailType.MAIL_TYPE_ADDED_TO_CLIP_FAVORITES = "12";
KalturaMailType.MAIL_TYPE_NEW_COMMENT_IN_PROFILE = "13";
KalturaMailType.MAIL_TYPE_CLIP_ADDED_YOUR_KALTURA = "20";
KalturaMailType.MAIL_TYPE_VIDEO_ADDED = "21";
KalturaMailType.MAIL_TYPE_ROUGHCUT_CREATED = "22";
KalturaMailType.MAIL_TYPE_ADDED_KALTURA_TO_YOUR_FAVORITES = "23";
KalturaMailType.MAIL_TYPE_NEW_COMMENT_IN_KALTURA = "24";
KalturaMailType.MAIL_TYPE_CLIP_ADDED = "30";
KalturaMailType.MAIL_TYPE_VIDEO_CREATED = "31";
KalturaMailType.MAIL_TYPE_ADDED_KALTURA_TO_HIS_FAVORITES = "32";
KalturaMailType.MAIL_TYPE_NEW_COMMENT_IN_KALTURA_YOU_CONTRIBUTED = "33";
KalturaMailType.MAIL_TYPE_CLIP_CONTRIBUTED = "40";
KalturaMailType.MAIL_TYPE_ROUGHCUT_CREATED_SUBSCRIBED = "41";
KalturaMailType.MAIL_TYPE_ADDED_KALTURA_TO_HIS_FAVORITES_SUBSCRIBED = "42";
KalturaMailType.MAIL_TYPE_NEW_COMMENT_IN_KALTURA_YOU_SUBSCRIBED = "43";
KalturaMailType.MAIL_TYPE_REGISTER_CONFIRM = "50";
KalturaMailType.MAIL_TYPE_PASSWORD_RESET = "51";
KalturaMailType.MAIL_TYPE_LOGIN_MAIL_RESET = "52";
KalturaMailType.MAIL_TYPE_REGISTER_CONFIRM_VIDEO_SERVICE = "54";
KalturaMailType.MAIL_TYPE_VIDEO_READY = "60";
KalturaMailType.MAIL_TYPE_VIDEO_IS_READY = "62";
KalturaMailType.MAIL_TYPE_BULK_DOWNLOAD_READY = "63";
KalturaMailType.MAIL_TYPE_BULKUPLOAD_FINISHED = "64";
KalturaMailType.MAIL_TYPE_BULKUPLOAD_FAILED = "65";
KalturaMailType.MAIL_TYPE_BULKUPLOAD_ABORTED = "66";
KalturaMailType.MAIL_TYPE_NOTIFY_ERR = "70";
KalturaMailType.MAIL_TYPE_ACCOUNT_UPGRADE_CONFIRM = "80";
KalturaMailType.MAIL_TYPE_VIDEO_SERVICE_NOTICE = "81";
KalturaMailType.MAIL_TYPE_VIDEO_SERVICE_NOTICE_LIMIT_REACHED = "82";
KalturaMailType.MAIL_TYPE_VIDEO_SERVICE_NOTICE_ACCOUNT_LOCKED = "83";
KalturaMailType.MAIL_TYPE_VIDEO_SERVICE_NOTICE_ACCOUNT_DELETED = "84";
KalturaMailType.MAIL_TYPE_VIDEO_SERVICE_NOTICE_UPGRADE_OFFER = "85";
KalturaMailType.MAIL_TYPE_ACCOUNT_REACTIVE_CONFIRM = "86";
KalturaMailType.MAIL_TYPE_SYSTEM_USER_RESET_PASSWORD = "110";
KalturaMailType.MAIL_TYPE_SYSTEM_USER_RESET_PASSWORD_SUCCESS = "111";
KalturaMailType.MAIL_TYPE_SYSTEM_USER_NEW_PASSWORD = "112";
KalturaMailType.MAIL_TYPE_SYSTEM_USER_CREDENTIALS_SAVED = "113";
KalturaMailType.MAIL_TYPE_LIVE_REPORT_EXPORT_SUCCESS = "130";
KalturaMailType.MAIL_TYPE_LIVE_REPORT_EXPORT_FAILURE = "131";
KalturaMailType.MAIL_TYPE_LIVE_REPORT_EXPORT_ABORT = "132";

function KalturaMediaEntryCompareAttribute(){
}
KalturaMediaEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaMediaEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaMediaEntryCompareAttribute.END_DATE = "endDate";
KalturaMediaEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaMediaEntryCompareAttribute.MEDIA_DATE = "mediaDate";
KalturaMediaEntryCompareAttribute.MEDIA_TYPE = "mediaType";
KalturaMediaEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaMediaEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaMediaEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaMediaEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaMediaEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaMediaEntryCompareAttribute.PLAYS = "plays";
KalturaMediaEntryCompareAttribute.RANK = "rank";
KalturaMediaEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaMediaEntryCompareAttribute.START_DATE = "startDate";
KalturaMediaEntryCompareAttribute.STATUS = "status";
KalturaMediaEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaMediaEntryCompareAttribute.TYPE = "type";
KalturaMediaEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaMediaEntryCompareAttribute.VIEWS = "views";

function KalturaMediaEntryMatchAttribute(){
}
KalturaMediaEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaMediaEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaMediaEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaMediaEntryMatchAttribute.DESCRIPTION = "description";
KalturaMediaEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaMediaEntryMatchAttribute.FLAVOR_PARAMS_IDS = "flavorParamsIds";
KalturaMediaEntryMatchAttribute.GROUP_ID = "groupId";
KalturaMediaEntryMatchAttribute.ID = "id";
KalturaMediaEntryMatchAttribute.NAME = "name";
KalturaMediaEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaMediaEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaMediaEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaMediaEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaMediaEntryMatchAttribute.TAGS = "tags";
KalturaMediaEntryMatchAttribute.USER_ID = "userId";

function KalturaMediaEntryOrderBy(){
}
KalturaMediaEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaMediaEntryOrderBy.DURATION_ASC = "+duration";
KalturaMediaEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaMediaEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaMediaEntryOrderBy.MEDIA_TYPE_ASC = "+mediaType";
KalturaMediaEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaMediaEntryOrderBy.NAME_ASC = "+name";
KalturaMediaEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaMediaEntryOrderBy.PLAYS_ASC = "+plays";
KalturaMediaEntryOrderBy.RANK_ASC = "+rank";
KalturaMediaEntryOrderBy.RECENT_ASC = "+recent";
KalturaMediaEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaMediaEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaMediaEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaMediaEntryOrderBy.VIEWS_ASC = "+views";
KalturaMediaEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaMediaEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaMediaEntryOrderBy.DURATION_DESC = "-duration";
KalturaMediaEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaMediaEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaMediaEntryOrderBy.MEDIA_TYPE_DESC = "-mediaType";
KalturaMediaEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaMediaEntryOrderBy.NAME_DESC = "-name";
KalturaMediaEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaMediaEntryOrderBy.PLAYS_DESC = "-plays";
KalturaMediaEntryOrderBy.RANK_DESC = "-rank";
KalturaMediaEntryOrderBy.RECENT_DESC = "-recent";
KalturaMediaEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaMediaEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaMediaEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaMediaEntryOrderBy.VIEWS_DESC = "-views";
KalturaMediaEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaMediaFlavorParamsOrderBy(){
}

function KalturaMediaFlavorParamsOutputOrderBy(){
}

function KalturaMediaInfoOrderBy(){
}

function KalturaMediaParserType(){
}
KalturaMediaParserType.MEDIAINFO = "0";
KalturaMediaParserType.FFMPEG = "1";

function KalturaMediaServerNodeOrderBy(){
}
KalturaMediaServerNodeOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaMediaServerNodeOrderBy.HEARTBEAT_TIME_ASC = "+heartbeatTime";
KalturaMediaServerNodeOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaMediaServerNodeOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaMediaServerNodeOrderBy.HEARTBEAT_TIME_DESC = "-heartbeatTime";
KalturaMediaServerNodeOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaMetadataObjectType(){
}
KalturaMetadataObjectType.AD_CUE_POINT = "adCuePointMetadata.AdCuePoint";
KalturaMetadataObjectType.ANNOTATION = "annotationMetadata.Annotation";
KalturaMetadataObjectType.CODE_CUE_POINT = "codeCuePointMetadata.CodeCuePoint";
KalturaMetadataObjectType.THUMB_CUE_POINT = "thumbCuePointMetadata.thumbCuePoint";
KalturaMetadataObjectType.ENTRY = "1";
KalturaMetadataObjectType.CATEGORY = "2";
KalturaMetadataObjectType.USER = "3";
KalturaMetadataObjectType.PARTNER = "4";
KalturaMetadataObjectType.DYNAMIC_OBJECT = "5";

function KalturaMetadataOrderBy(){
}
KalturaMetadataOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaMetadataOrderBy.METADATA_PROFILE_VERSION_ASC = "+metadataProfileVersion";
KalturaMetadataOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaMetadataOrderBy.VERSION_ASC = "+version";
KalturaMetadataOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaMetadataOrderBy.METADATA_PROFILE_VERSION_DESC = "-metadataProfileVersion";
KalturaMetadataOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaMetadataOrderBy.VERSION_DESC = "-version";

function KalturaMetadataProfileOrderBy(){
}
KalturaMetadataProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaMetadataProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaMetadataProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaMetadataProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaMixEntryCompareAttribute(){
}
KalturaMixEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaMixEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaMixEntryCompareAttribute.END_DATE = "endDate";
KalturaMixEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaMixEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaMixEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaMixEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaMixEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaMixEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaMixEntryCompareAttribute.PLAYS = "plays";
KalturaMixEntryCompareAttribute.RANK = "rank";
KalturaMixEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaMixEntryCompareAttribute.START_DATE = "startDate";
KalturaMixEntryCompareAttribute.STATUS = "status";
KalturaMixEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaMixEntryCompareAttribute.TYPE = "type";
KalturaMixEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaMixEntryCompareAttribute.VIEWS = "views";

function KalturaMixEntryMatchAttribute(){
}
KalturaMixEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaMixEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaMixEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaMixEntryMatchAttribute.DESCRIPTION = "description";
KalturaMixEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaMixEntryMatchAttribute.GROUP_ID = "groupId";
KalturaMixEntryMatchAttribute.ID = "id";
KalturaMixEntryMatchAttribute.NAME = "name";
KalturaMixEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaMixEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaMixEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaMixEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaMixEntryMatchAttribute.TAGS = "tags";
KalturaMixEntryMatchAttribute.USER_ID = "userId";

function KalturaMixEntryOrderBy(){
}
KalturaMixEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaMixEntryOrderBy.DURATION_ASC = "+duration";
KalturaMixEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaMixEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaMixEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaMixEntryOrderBy.NAME_ASC = "+name";
KalturaMixEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaMixEntryOrderBy.PLAYS_ASC = "+plays";
KalturaMixEntryOrderBy.RANK_ASC = "+rank";
KalturaMixEntryOrderBy.RECENT_ASC = "+recent";
KalturaMixEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaMixEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaMixEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaMixEntryOrderBy.VIEWS_ASC = "+views";
KalturaMixEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaMixEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaMixEntryOrderBy.DURATION_DESC = "-duration";
KalturaMixEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaMixEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaMixEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaMixEntryOrderBy.NAME_DESC = "-name";
KalturaMixEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaMixEntryOrderBy.PLAYS_DESC = "-plays";
KalturaMixEntryOrderBy.RANK_DESC = "-rank";
KalturaMixEntryOrderBy.RECENT_DESC = "-recent";
KalturaMixEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaMixEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaMixEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaMixEntryOrderBy.VIEWS_DESC = "-views";
KalturaMixEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaModerationFlagStatus(){
}
KalturaModerationFlagStatus.PENDING = "1";
KalturaModerationFlagStatus.MODERATED = "2";

function KalturaModerationObjectType(){
}
KalturaModerationObjectType.ENTRY = "2";
KalturaModerationObjectType.USER = "3";

function KalturaObjectFilterEngineType(){
}
KalturaObjectFilterEngineType.ENTRY = "1";

function KalturaObjectTaskType(){
}
KalturaObjectTaskType.DISTRIBUTE = "scheduledTaskContentDistribution.Distribute";
KalturaObjectTaskType.DISPATCH_EVENT_NOTIFICATION = "scheduledTaskEventNotification.DispatchEventNotification";
KalturaObjectTaskType.EXECUTE_METADATA_XSLT = "scheduledTaskMetadata.ExecuteMetadataXslt";
KalturaObjectTaskType.DELETE_ENTRY = "1";
KalturaObjectTaskType.MODIFY_CATEGORIES = "2";
KalturaObjectTaskType.DELETE_ENTRY_FLAVORS = "3";
KalturaObjectTaskType.CONVERT_ENTRY_FLAVORS = "4";
KalturaObjectTaskType.DELETE_LOCAL_CONTENT = "5";
KalturaObjectTaskType.STORAGE_EXPORT = "6";

function KalturaPartnerOrderBy(){
}
KalturaPartnerOrderBy.ADMIN_EMAIL_ASC = "+adminEmail";
KalturaPartnerOrderBy.ADMIN_NAME_ASC = "+adminName";
KalturaPartnerOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaPartnerOrderBy.ID_ASC = "+id";
KalturaPartnerOrderBy.NAME_ASC = "+name";
KalturaPartnerOrderBy.STATUS_ASC = "+status";
KalturaPartnerOrderBy.WEBSITE_ASC = "+website";
KalturaPartnerOrderBy.ADMIN_EMAIL_DESC = "-adminEmail";
KalturaPartnerOrderBy.ADMIN_NAME_DESC = "-adminName";
KalturaPartnerOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaPartnerOrderBy.ID_DESC = "-id";
KalturaPartnerOrderBy.NAME_DESC = "-name";
KalturaPartnerOrderBy.STATUS_DESC = "-status";
KalturaPartnerOrderBy.WEBSITE_DESC = "-website";

function KalturaPdfFlavorParamsOrderBy(){
}

function KalturaPdfFlavorParamsOutputOrderBy(){
}

function KalturaPermissionItemOrderBy(){
}
KalturaPermissionItemOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaPermissionItemOrderBy.ID_ASC = "+id";
KalturaPermissionItemOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaPermissionItemOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaPermissionItemOrderBy.ID_DESC = "-id";
KalturaPermissionItemOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaPermissionItemType(){
}
KalturaPermissionItemType.API_ACTION_ITEM = "kApiActionPermissionItem";
KalturaPermissionItemType.API_PARAMETER_ITEM = "kApiParameterPermissionItem";

function KalturaPermissionOrderBy(){
}
KalturaPermissionOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaPermissionOrderBy.ID_ASC = "+id";
KalturaPermissionOrderBy.NAME_ASC = "+name";
KalturaPermissionOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaPermissionOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaPermissionOrderBy.ID_DESC = "-id";
KalturaPermissionOrderBy.NAME_DESC = "-name";
KalturaPermissionOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaPlayableEntryCompareAttribute(){
}
KalturaPlayableEntryCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaPlayableEntryCompareAttribute.CREATED_AT = "createdAt";
KalturaPlayableEntryCompareAttribute.END_DATE = "endDate";
KalturaPlayableEntryCompareAttribute.LAST_PLAYED_AT = "lastPlayedAt";
KalturaPlayableEntryCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaPlayableEntryCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaPlayableEntryCompareAttribute.MS_DURATION = "msDuration";
KalturaPlayableEntryCompareAttribute.PARTNER_ID = "partnerId";
KalturaPlayableEntryCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaPlayableEntryCompareAttribute.PLAYS = "plays";
KalturaPlayableEntryCompareAttribute.RANK = "rank";
KalturaPlayableEntryCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaPlayableEntryCompareAttribute.START_DATE = "startDate";
KalturaPlayableEntryCompareAttribute.STATUS = "status";
KalturaPlayableEntryCompareAttribute.TOTAL_RANK = "totalRank";
KalturaPlayableEntryCompareAttribute.TYPE = "type";
KalturaPlayableEntryCompareAttribute.UPDATED_AT = "updatedAt";
KalturaPlayableEntryCompareAttribute.VIEWS = "views";

function KalturaPlayableEntryMatchAttribute(){
}
KalturaPlayableEntryMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaPlayableEntryMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaPlayableEntryMatchAttribute.CREATOR_ID = "creatorId";
KalturaPlayableEntryMatchAttribute.DESCRIPTION = "description";
KalturaPlayableEntryMatchAttribute.DURATION_TYPE = "durationType";
KalturaPlayableEntryMatchAttribute.GROUP_ID = "groupId";
KalturaPlayableEntryMatchAttribute.ID = "id";
KalturaPlayableEntryMatchAttribute.NAME = "name";
KalturaPlayableEntryMatchAttribute.REFERENCE_ID = "referenceId";
KalturaPlayableEntryMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaPlayableEntryMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaPlayableEntryMatchAttribute.SEARCH_TEXT = "searchText";
KalturaPlayableEntryMatchAttribute.TAGS = "tags";
KalturaPlayableEntryMatchAttribute.USER_ID = "userId";

function KalturaPlayableEntryOrderBy(){
}
KalturaPlayableEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaPlayableEntryOrderBy.DURATION_ASC = "+duration";
KalturaPlayableEntryOrderBy.END_DATE_ASC = "+endDate";
KalturaPlayableEntryOrderBy.LAST_PLAYED_AT_ASC = "+lastPlayedAt";
KalturaPlayableEntryOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaPlayableEntryOrderBy.NAME_ASC = "+name";
KalturaPlayableEntryOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaPlayableEntryOrderBy.PLAYS_ASC = "+plays";
KalturaPlayableEntryOrderBy.RANK_ASC = "+rank";
KalturaPlayableEntryOrderBy.RECENT_ASC = "+recent";
KalturaPlayableEntryOrderBy.START_DATE_ASC = "+startDate";
KalturaPlayableEntryOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaPlayableEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaPlayableEntryOrderBy.VIEWS_ASC = "+views";
KalturaPlayableEntryOrderBy.WEIGHT_ASC = "+weight";
KalturaPlayableEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaPlayableEntryOrderBy.DURATION_DESC = "-duration";
KalturaPlayableEntryOrderBy.END_DATE_DESC = "-endDate";
KalturaPlayableEntryOrderBy.LAST_PLAYED_AT_DESC = "-lastPlayedAt";
KalturaPlayableEntryOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaPlayableEntryOrderBy.NAME_DESC = "-name";
KalturaPlayableEntryOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaPlayableEntryOrderBy.PLAYS_DESC = "-plays";
KalturaPlayableEntryOrderBy.RANK_DESC = "-rank";
KalturaPlayableEntryOrderBy.RECENT_DESC = "-recent";
KalturaPlayableEntryOrderBy.START_DATE_DESC = "-startDate";
KalturaPlayableEntryOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaPlayableEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaPlayableEntryOrderBy.VIEWS_DESC = "-views";
KalturaPlayableEntryOrderBy.WEIGHT_DESC = "-weight";

function KalturaPlaybackProtocol(){
}
KalturaPlaybackProtocol.APPLE_HTTP = "applehttp";
KalturaPlaybackProtocol.APPLE_HTTP_TO_MC = "applehttp_to_mc";
KalturaPlaybackProtocol.AUTO = "auto";
KalturaPlaybackProtocol.AKAMAI_HD = "hdnetwork";
KalturaPlaybackProtocol.AKAMAI_HDS = "hdnetworkmanifest";
KalturaPlaybackProtocol.HDS = "hds";
KalturaPlaybackProtocol.HLS = "hls";
KalturaPlaybackProtocol.HTTP = "http";
KalturaPlaybackProtocol.MPEG_DASH = "mpegdash";
KalturaPlaybackProtocol.MULTICAST_SL = "multicast_silverlight";
KalturaPlaybackProtocol.RTMP = "rtmp";
KalturaPlaybackProtocol.RTSP = "rtsp";
KalturaPlaybackProtocol.SILVER_LIGHT = "sl";

function KalturaPlaylistCompareAttribute(){
}
KalturaPlaylistCompareAttribute.ACCESS_CONTROL_ID = "accessControlId";
KalturaPlaylistCompareAttribute.CREATED_AT = "createdAt";
KalturaPlaylistCompareAttribute.END_DATE = "endDate";
KalturaPlaylistCompareAttribute.MODERATION_COUNT = "moderationCount";
KalturaPlaylistCompareAttribute.MODERATION_STATUS = "moderationStatus";
KalturaPlaylistCompareAttribute.PARTNER_ID = "partnerId";
KalturaPlaylistCompareAttribute.PARTNER_SORT_VALUE = "partnerSortValue";
KalturaPlaylistCompareAttribute.RANK = "rank";
KalturaPlaylistCompareAttribute.REPLACEMENT_STATUS = "replacementStatus";
KalturaPlaylistCompareAttribute.START_DATE = "startDate";
KalturaPlaylistCompareAttribute.STATUS = "status";
KalturaPlaylistCompareAttribute.TOTAL_RANK = "totalRank";
KalturaPlaylistCompareAttribute.TYPE = "type";
KalturaPlaylistCompareAttribute.UPDATED_AT = "updatedAt";

function KalturaPlaylistMatchAttribute(){
}
KalturaPlaylistMatchAttribute.ADMIN_TAGS = "adminTags";
KalturaPlaylistMatchAttribute.CATEGORIES_IDS = "categoriesIds";
KalturaPlaylistMatchAttribute.CREATOR_ID = "creatorId";
KalturaPlaylistMatchAttribute.DESCRIPTION = "description";
KalturaPlaylistMatchAttribute.GROUP_ID = "groupId";
KalturaPlaylistMatchAttribute.ID = "id";
KalturaPlaylistMatchAttribute.NAME = "name";
KalturaPlaylistMatchAttribute.REFERENCE_ID = "referenceId";
KalturaPlaylistMatchAttribute.REPLACED_ENTRY_ID = "replacedEntryId";
KalturaPlaylistMatchAttribute.REPLACING_ENTRY_ID = "replacingEntryId";
KalturaPlaylistMatchAttribute.SEARCH_TEXT = "searchText";
KalturaPlaylistMatchAttribute.TAGS = "tags";
KalturaPlaylistMatchAttribute.USER_ID = "userId";

function KalturaPlaylistOrderBy(){
}
KalturaPlaylistOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaPlaylistOrderBy.END_DATE_ASC = "+endDate";
KalturaPlaylistOrderBy.MODERATION_COUNT_ASC = "+moderationCount";
KalturaPlaylistOrderBy.NAME_ASC = "+name";
KalturaPlaylistOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaPlaylistOrderBy.RANK_ASC = "+rank";
KalturaPlaylistOrderBy.RECENT_ASC = "+recent";
KalturaPlaylistOrderBy.START_DATE_ASC = "+startDate";
KalturaPlaylistOrderBy.TOTAL_RANK_ASC = "+totalRank";
KalturaPlaylistOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaPlaylistOrderBy.WEIGHT_ASC = "+weight";
KalturaPlaylistOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaPlaylistOrderBy.END_DATE_DESC = "-endDate";
KalturaPlaylistOrderBy.MODERATION_COUNT_DESC = "-moderationCount";
KalturaPlaylistOrderBy.NAME_DESC = "-name";
KalturaPlaylistOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaPlaylistOrderBy.RANK_DESC = "-rank";
KalturaPlaylistOrderBy.RECENT_DESC = "-recent";
KalturaPlaylistOrderBy.START_DATE_DESC = "-startDate";
KalturaPlaylistOrderBy.TOTAL_RANK_DESC = "-totalRank";
KalturaPlaylistOrderBy.UPDATED_AT_DESC = "-updatedAt";
KalturaPlaylistOrderBy.WEIGHT_DESC = "-weight";

function KalturaQuestionCuePointOrderBy(){
}
KalturaQuestionCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaQuestionCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaQuestionCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaQuestionCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaQuestionCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaQuestionCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaQuestionCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaQuestionCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaQuestionCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaQuestionCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaQuizUserEntryOrderBy(){
}
KalturaQuizUserEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaQuizUserEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaQuizUserEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaQuizUserEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaRemoteDropFolderOrderBy(){
}
KalturaRemoteDropFolderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaRemoteDropFolderOrderBy.ID_ASC = "+id";
KalturaRemoteDropFolderOrderBy.NAME_ASC = "+name";
KalturaRemoteDropFolderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaRemoteDropFolderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaRemoteDropFolderOrderBy.ID_DESC = "-id";
KalturaRemoteDropFolderOrderBy.NAME_DESC = "-name";
KalturaRemoteDropFolderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaReportInterval(){
}
KalturaReportInterval.DAYS = "days";
KalturaReportInterval.MONTHS = "months";

function KalturaReportOrderBy(){
}
KalturaReportOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaReportOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaReportType(){
}
KalturaReportType.QUIZ = "quiz.QUIZ";
KalturaReportType.QUIZ_AGGREGATE_BY_QUESTION = "quiz.QUIZ_AGGREGATE_BY_QUESTION";
KalturaReportType.QUIZ_USER_AGGREGATE_BY_QUESTION = "quiz.QUIZ_USER_AGGREGATE_BY_QUESTION";
KalturaReportType.QUIZ_USER_PERCENTAGE = "quiz.QUIZ_USER_PERCENTAGE";
KalturaReportType.TOP_CONTENT = "1";
KalturaReportType.CONTENT_DROPOFF = "2";
KalturaReportType.CONTENT_INTERACTIONS = "3";
KalturaReportType.MAP_OVERLAY = "4";
KalturaReportType.TOP_CONTRIBUTORS = "5";
KalturaReportType.TOP_SYNDICATION = "6";
KalturaReportType.CONTENT_CONTRIBUTIONS = "7";
KalturaReportType.USER_ENGAGEMENT = "11";
KalturaReportType.SPEFICIC_USER_ENGAGEMENT = "12";
KalturaReportType.USER_TOP_CONTENT = "13";
KalturaReportType.USER_CONTENT_DROPOFF = "14";
KalturaReportType.USER_CONTENT_INTERACTIONS = "15";
KalturaReportType.APPLICATIONS = "16";
KalturaReportType.USER_USAGE = "17";
KalturaReportType.SPECIFIC_USER_USAGE = "18";
KalturaReportType.VAR_USAGE = "19";
KalturaReportType.TOP_CREATORS = "20";
KalturaReportType.PLATFORMS = "21";
KalturaReportType.OPERATION_SYSTEM = "22";
KalturaReportType.BROWSERS = "23";
KalturaReportType.LIVE = "24";
KalturaReportType.TOP_PLAYBACK_CONTEXT = "25";
KalturaReportType.VPAAS_USAGE = "26";
KalturaReportType.PARTNER_USAGE = "201";

function KalturaResponseProfileOrderBy(){
}
KalturaResponseProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaResponseProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaResponseProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaResponseProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaRuleActionType(){
}
KalturaRuleActionType.BLOCK = "1";
KalturaRuleActionType.PREVIEW = "2";
KalturaRuleActionType.LIMIT_FLAVORS = "3";
KalturaRuleActionType.ADD_TO_STORAGE = "4";
KalturaRuleActionType.LIMIT_DELIVERY_PROFILES = "5";
KalturaRuleActionType.SERVE_FROM_REMOTE_SERVER = "6";
KalturaRuleActionType.REQUEST_HOST_REGEX = "7";

function KalturaScheduledTaskProfileOrderBy(){
}
KalturaScheduledTaskProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaScheduledTaskProfileOrderBy.ID_ASC = "+id";
KalturaScheduledTaskProfileOrderBy.LAST_EXECUTION_STARTED_AT_ASC = "+lastExecutionStartedAt";
KalturaScheduledTaskProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaScheduledTaskProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaScheduledTaskProfileOrderBy.ID_DESC = "-id";
KalturaScheduledTaskProfileOrderBy.LAST_EXECUTION_STARTED_AT_DESC = "-lastExecutionStartedAt";
KalturaScheduledTaskProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaSchemaType(){
}
KalturaSchemaType.BULK_UPLOAD_RESULT_XML = "bulkUploadXml.bulkUploadResultXML";
KalturaSchemaType.BULK_UPLOAD_XML = "bulkUploadXml.bulkUploadXML";
KalturaSchemaType.INGEST_API = "cuePoint.ingestAPI";
KalturaSchemaType.SERVE_API = "cuePoint.serveAPI";
KalturaSchemaType.DROP_FOLDER_XML = "dropFolderXmlBulkUpload.dropFolderXml";
KalturaSchemaType.SYNDICATION = "syndication";

function KalturaScpDropFolderOrderBy(){
}
KalturaScpDropFolderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaScpDropFolderOrderBy.ID_ASC = "+id";
KalturaScpDropFolderOrderBy.NAME_ASC = "+name";
KalturaScpDropFolderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaScpDropFolderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaScpDropFolderOrderBy.ID_DESC = "-id";
KalturaScpDropFolderOrderBy.NAME_DESC = "-name";
KalturaScpDropFolderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaSearchConditionComparison(){
}
KalturaSearchConditionComparison.EQUAL = "1";
KalturaSearchConditionComparison.GREATER_THAN = "2";
KalturaSearchConditionComparison.GREATER_THAN_OR_EQUAL = "3";
KalturaSearchConditionComparison.LESS_THAN = "4";
KalturaSearchConditionComparison.LESS_THAN_OR_EQUAL = "5";
KalturaSearchConditionComparison.NOT_EQUAL = "6";

function KalturaServerNodeOrderBy(){
}
KalturaServerNodeOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaServerNodeOrderBy.HEARTBEAT_TIME_ASC = "+heartbeatTime";
KalturaServerNodeOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaServerNodeOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaServerNodeOrderBy.HEARTBEAT_TIME_DESC = "-heartbeatTime";
KalturaServerNodeOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaServerNodeType(){
}
KalturaServerNodeType.WOWZA_MEDIA_SERVER = "wowza.WOWZA_MEDIA_SERVER";
KalturaServerNodeType.EDGE = "1";

function KalturaSftpDropFolderOrderBy(){
}
KalturaSftpDropFolderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaSftpDropFolderOrderBy.ID_ASC = "+id";
KalturaSftpDropFolderOrderBy.NAME_ASC = "+name";
KalturaSftpDropFolderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaSftpDropFolderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaSftpDropFolderOrderBy.ID_DESC = "-id";
KalturaSftpDropFolderOrderBy.NAME_DESC = "-name";
KalturaSftpDropFolderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaShortLinkOrderBy(){
}
KalturaShortLinkOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaShortLinkOrderBy.EXPIRES_AT_ASC = "+expiresAt";
KalturaShortLinkOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaShortLinkOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaShortLinkOrderBy.EXPIRES_AT_DESC = "-expiresAt";
KalturaShortLinkOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaSourceType(){
}
KalturaSourceType.VELOCIX_LIVE = "velocix.VELOCIX_LIVE";
KalturaSourceType.FILE = "1";
KalturaSourceType.WEBCAM = "2";
KalturaSourceType.URL = "5";
KalturaSourceType.SEARCH_PROVIDER = "6";
KalturaSourceType.AKAMAI_LIVE = "29";
KalturaSourceType.MANUAL_LIVE_STREAM = "30";
KalturaSourceType.AKAMAI_UNIVERSAL_LIVE = "31";
KalturaSourceType.LIVE_STREAM = "32";
KalturaSourceType.LIVE_CHANNEL = "33";
KalturaSourceType.RECORDED_LIVE = "34";
KalturaSourceType.CLIP = "35";
KalturaSourceType.LIVE_STREAM_ONTEXTDATA_CAPTIONS = "42";

function KalturaSshDropFolderOrderBy(){
}
KalturaSshDropFolderOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaSshDropFolderOrderBy.ID_ASC = "+id";
KalturaSshDropFolderOrderBy.NAME_ASC = "+name";
KalturaSshDropFolderOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaSshDropFolderOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaSshDropFolderOrderBy.ID_DESC = "-id";
KalturaSshDropFolderOrderBy.NAME_DESC = "-name";
KalturaSshDropFolderOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaStorageProfileOrderBy(){
}
KalturaStorageProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaStorageProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaStorageProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaStorageProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaStorageProfileProtocol(){
}
KalturaStorageProfileProtocol.KONTIKI = "kontiki.KONTIKI";
KalturaStorageProfileProtocol.KALTURA_DC = "0";
KalturaStorageProfileProtocol.FTP = "1";
KalturaStorageProfileProtocol.SCP = "2";
KalturaStorageProfileProtocol.SFTP = "3";
KalturaStorageProfileProtocol.S3 = "6";
KalturaStorageProfileProtocol.LOCAL = "7";

function KalturaSwfFlavorParamsOrderBy(){
}

function KalturaSwfFlavorParamsOutputOrderBy(){
}

function KalturaSyndicationDistributionProfileOrderBy(){
}
KalturaSyndicationDistributionProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaSyndicationDistributionProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaSyndicationDistributionProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaSyndicationDistributionProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaSyndicationFeedEntriesOrderBy(){
}
KalturaSyndicationFeedEntriesOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaSyndicationFeedEntriesOrderBy.RECENT = "recent";

function KalturaSystemPartnerLimitType(){
}
KalturaSystemPartnerLimitType.ACCESS_CONTROLS = "ACCESS_CONTROLS";
KalturaSystemPartnerLimitType.ADMIN_LOGIN_USERS = "ADMIN_LOGIN_USERS";
KalturaSystemPartnerLimitType.BULK_SIZE = "BULK_SIZE";
KalturaSystemPartnerLimitType.END_USERS = "END_USERS";
KalturaSystemPartnerLimitType.ENTRIES = "ENTRIES";
KalturaSystemPartnerLimitType.LIVE_STREAM_INPUTS = "LIVE_STREAM_INPUTS";
KalturaSystemPartnerLimitType.LIVE_STREAM_OUTPUTS = "LIVE_STREAM_OUTPUTS";
KalturaSystemPartnerLimitType.LOGIN_USERS = "LOGIN_USERS";
KalturaSystemPartnerLimitType.MONTHLY_BANDWIDTH = "MONTHLY_BANDWIDTH";
KalturaSystemPartnerLimitType.MONTHLY_STORAGE = "MONTHLY_STORAGE";
KalturaSystemPartnerLimitType.MONTHLY_STORAGE_AND_BANDWIDTH = "MONTHLY_STORAGE_AND_BANDWIDTH";
KalturaSystemPartnerLimitType.MONTHLY_STREAM_ENTRIES = "MONTHLY_STREAM_ENTRIES";
KalturaSystemPartnerLimitType.PUBLISHERS = "PUBLISHERS";
KalturaSystemPartnerLimitType.USER_LOGIN_ATTEMPTS = "USER_LOGIN_ATTEMPTS";

function KalturaTaggedObjectType(){
}
KalturaTaggedObjectType.ENTRY = "1";
KalturaTaggedObjectType.CATEGORY = "2";

function KalturaThumbAssetOrderBy(){
}
KalturaThumbAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaThumbAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaThumbAssetOrderBy.SIZE_ASC = "+size";
KalturaThumbAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaThumbAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaThumbAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaThumbAssetOrderBy.SIZE_DESC = "-size";
KalturaThumbAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaThumbCuePointOrderBy(){
}
KalturaThumbCuePointOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaThumbCuePointOrderBy.PARTNER_SORT_VALUE_ASC = "+partnerSortValue";
KalturaThumbCuePointOrderBy.START_TIME_ASC = "+startTime";
KalturaThumbCuePointOrderBy.TRIGGERED_AT_ASC = "+triggeredAt";
KalturaThumbCuePointOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaThumbCuePointOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaThumbCuePointOrderBy.PARTNER_SORT_VALUE_DESC = "-partnerSortValue";
KalturaThumbCuePointOrderBy.START_TIME_DESC = "-startTime";
KalturaThumbCuePointOrderBy.TRIGGERED_AT_DESC = "-triggeredAt";
KalturaThumbCuePointOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaThumbParamsOrderBy(){
}

function KalturaThumbParamsOutputOrderBy(){
}

function KalturaTimedThumbAssetOrderBy(){
}
KalturaTimedThumbAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaTimedThumbAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaTimedThumbAssetOrderBy.SIZE_ASC = "+size";
KalturaTimedThumbAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaTimedThumbAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaTimedThumbAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaTimedThumbAssetOrderBy.SIZE_DESC = "-size";
KalturaTimedThumbAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaTranscriptAssetOrderBy(){
}
KalturaTranscriptAssetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaTranscriptAssetOrderBy.DELETED_AT_ASC = "+deletedAt";
KalturaTranscriptAssetOrderBy.SIZE_ASC = "+size";
KalturaTranscriptAssetOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaTranscriptAssetOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaTranscriptAssetOrderBy.DELETED_AT_DESC = "-deletedAt";
KalturaTranscriptAssetOrderBy.SIZE_DESC = "-size";
KalturaTranscriptAssetOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaTubeMogulSyndicationFeedCategories(){
}
KalturaTubeMogulSyndicationFeedCategories.ANIMALS_AND_PETS = "Animals &amp; Pets";
KalturaTubeMogulSyndicationFeedCategories.ARTS_AND_ANIMATION = "Arts &amp; Animation";
KalturaTubeMogulSyndicationFeedCategories.AUTOS = "Autos";
KalturaTubeMogulSyndicationFeedCategories.COMEDY = "Comedy";
KalturaTubeMogulSyndicationFeedCategories.COMMERCIALS_PROMOTIONAL = "Commercials/Promotional";
KalturaTubeMogulSyndicationFeedCategories.ENTERTAINMENT = "Entertainment";
KalturaTubeMogulSyndicationFeedCategories.FAMILY_AND_KIDS = "Family &amp; Kids";
KalturaTubeMogulSyndicationFeedCategories.HOW_TO_INSTRUCTIONAL_DIY = "How To/Instructional/DIY";
KalturaTubeMogulSyndicationFeedCategories.MUSIC = "Music";
KalturaTubeMogulSyndicationFeedCategories.NEWS_AND_BLOGS = "News &amp; Blogs";
KalturaTubeMogulSyndicationFeedCategories.SCIENCE_AND_TECHNOLOGY = "Science &amp; Technology";
KalturaTubeMogulSyndicationFeedCategories.SPORTS = "Sports";
KalturaTubeMogulSyndicationFeedCategories.TRAVEL_AND_PLACES = "Travel &amp; Places";
KalturaTubeMogulSyndicationFeedCategories.VIDEO_GAMES = "Video Games";
KalturaTubeMogulSyndicationFeedCategories.VLOGS_PEOPLE = "Vlogs &amp; People";

function KalturaTubeMogulSyndicationFeedOrderBy(){
}
KalturaTubeMogulSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaTubeMogulSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaTubeMogulSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaTubeMogulSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaTubeMogulSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaTubeMogulSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaTubeMogulSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaTubeMogulSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaTubeMogulSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaTubeMogulSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaUiConfAdminOrderBy(){
}
KalturaUiConfAdminOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaUiConfAdminOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaUiConfAdminOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaUiConfAdminOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaUiConfOrderBy(){
}
KalturaUiConfOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaUiConfOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaUiConfOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaUiConfOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaUploadTokenOrderBy(){
}
KalturaUploadTokenOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaUploadTokenOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaUserEntryOrderBy(){
}
KalturaUserEntryOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaUserEntryOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaUserEntryOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaUserEntryOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaUserEntryStatus(){
}
KalturaUserEntryStatus.QUIZ_SUBMITTED = "quiz.3";
KalturaUserEntryStatus.ACTIVE = "1";
KalturaUserEntryStatus.DELETED = "2";

function KalturaUserEntryType(){
}
KalturaUserEntryType.QUIZ = "quiz.QUIZ";

function KalturaUserLoginDataOrderBy(){
}

function KalturaUserOrderBy(){
}
KalturaUserOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaUserOrderBy.ID_ASC = "+id";
KalturaUserOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaUserOrderBy.ID_DESC = "-id";

function KalturaUserRoleOrderBy(){
}
KalturaUserRoleOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaUserRoleOrderBy.ID_ASC = "+id";
KalturaUserRoleOrderBy.NAME_ASC = "+name";
KalturaUserRoleOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaUserRoleOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaUserRoleOrderBy.ID_DESC = "-id";
KalturaUserRoleOrderBy.NAME_DESC = "-name";
KalturaUserRoleOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaVideoCodec(){
}
KalturaVideoCodec.NONE = "";
KalturaVideoCodec.APCH = "apch";
KalturaVideoCodec.APCN = "apcn";
KalturaVideoCodec.APCO = "apco";
KalturaVideoCodec.APCS = "apcs";
KalturaVideoCodec.COPY = "copy";
KalturaVideoCodec.DNXHD = "dnxhd";
KalturaVideoCodec.DV = "dv";
KalturaVideoCodec.FLV = "flv";
KalturaVideoCodec.H263 = "h263";
KalturaVideoCodec.H264 = "h264";
KalturaVideoCodec.H264B = "h264b";
KalturaVideoCodec.H264H = "h264h";
KalturaVideoCodec.H264M = "h264m";
KalturaVideoCodec.H265 = "h265";
KalturaVideoCodec.MPEG2 = "mpeg2";
KalturaVideoCodec.MPEG4 = "mpeg4";
KalturaVideoCodec.THEORA = "theora";
KalturaVideoCodec.VP6 = "vp6";
KalturaVideoCodec.VP8 = "vp8";
KalturaVideoCodec.VP9 = "vp9";
KalturaVideoCodec.WMV2 = "wmv2";
KalturaVideoCodec.WMV3 = "wmv3";
KalturaVideoCodec.WVC1A = "wvc1a";

function KalturaVirusScanEngineType(){
}
KalturaVirusScanEngineType.CLAMAV_SCAN_ENGINE = "clamAVScanEngine.ClamAV";

function KalturaVirusScanProfileOrderBy(){
}
KalturaVirusScanProfileOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaVirusScanProfileOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaVirusScanProfileOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaVirusScanProfileOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaWidgetOrderBy(){
}
KalturaWidgetOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaWidgetOrderBy.CREATED_AT_DESC = "-createdAt";

function KalturaWowzaMediaServerNodeOrderBy(){
}
KalturaWowzaMediaServerNodeOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaWowzaMediaServerNodeOrderBy.HEARTBEAT_TIME_ASC = "+heartbeatTime";
KalturaWowzaMediaServerNodeOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaWowzaMediaServerNodeOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaWowzaMediaServerNodeOrderBy.HEARTBEAT_TIME_DESC = "-heartbeatTime";
KalturaWowzaMediaServerNodeOrderBy.UPDATED_AT_DESC = "-updatedAt";

function KalturaYahooSyndicationFeedAdultValues(){
}
KalturaYahooSyndicationFeedAdultValues.ADULT = "adult";
KalturaYahooSyndicationFeedAdultValues.NON_ADULT = "nonadult";

function KalturaYahooSyndicationFeedCategories(){
}
KalturaYahooSyndicationFeedCategories.ACTION = "Action";
KalturaYahooSyndicationFeedCategories.ANIMALS = "Animals";
KalturaYahooSyndicationFeedCategories.ART_AND_ANIMATION = "Art &amp; Animation";
KalturaYahooSyndicationFeedCategories.COMMERCIALS = "Commercials";
KalturaYahooSyndicationFeedCategories.ENTERTAINMENT_AND_TV = "Entertainment &amp; TV";
KalturaYahooSyndicationFeedCategories.FAMILY = "Family";
KalturaYahooSyndicationFeedCategories.FOOD = "Food";
KalturaYahooSyndicationFeedCategories.FUNNY_VIDEOS = "Funny Videos";
KalturaYahooSyndicationFeedCategories.GAMES = "Games";
KalturaYahooSyndicationFeedCategories.HEALTH_AND_BEAUTY = "Health &amp; Beauty";
KalturaYahooSyndicationFeedCategories.HOW_TO = "How-To";
KalturaYahooSyndicationFeedCategories.MOVIES_AND_SHORTS = "Movies &amp; Shorts";
KalturaYahooSyndicationFeedCategories.MUSIC = "Music";
KalturaYahooSyndicationFeedCategories.NEWS_AND_POLITICS = "News &amp; Politics";
KalturaYahooSyndicationFeedCategories.PEOPLE_AND_VLOGS = "People &amp; Vlogs";
KalturaYahooSyndicationFeedCategories.PRODUCTS_AND_TECH = "Products &amp; Tech.";
KalturaYahooSyndicationFeedCategories.SCIENCE_AND_ENVIRONMENT = "Science &amp; Environment";
KalturaYahooSyndicationFeedCategories.SPORTS = "Sports";
KalturaYahooSyndicationFeedCategories.TRANSPORTATION = "Transportation";
KalturaYahooSyndicationFeedCategories.TRAVEL = "Travel";

function KalturaYahooSyndicationFeedOrderBy(){
}
KalturaYahooSyndicationFeedOrderBy.CREATED_AT_ASC = "+createdAt";
KalturaYahooSyndicationFeedOrderBy.NAME_ASC = "+name";
KalturaYahooSyndicationFeedOrderBy.PLAYLIST_ID_ASC = "+playlistId";
KalturaYahooSyndicationFeedOrderBy.TYPE_ASC = "+type";
KalturaYahooSyndicationFeedOrderBy.UPDATED_AT_ASC = "+updatedAt";
KalturaYahooSyndicationFeedOrderBy.CREATED_AT_DESC = "-createdAt";
KalturaYahooSyndicationFeedOrderBy.NAME_DESC = "-name";
KalturaYahooSyndicationFeedOrderBy.PLAYLIST_ID_DESC = "-playlistId";
KalturaYahooSyndicationFeedOrderBy.TYPE_DESC = "-type";
KalturaYahooSyndicationFeedOrderBy.UPDATED_AT_DESC = "-updatedAt";
;
// ===================================================================================================
//                           _  __     _ _
//                          | |/ /__ _| | |_ _  _ _ _ __ _
//                          | ' </ _` | |  _| || | '_/ _` |
//                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
//
// This file is part of the Kaltura Collaborative Media Suite which allows users
// to do with audio, video, and animation what Wiki platfroms allow them to do with
// text.
//
// Copyright (C) 2006-2015  Kaltura Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @ignore
// ===================================================================================================
/**
 * @param	totalCount	int		 (readOnly).
 */
function KalturaListResponse(){
	this.totalCount = null;
}
KalturaListResponse.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaBaseRestriction(){
}
KalturaBaseRestriction.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Access Control Profile
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		The name of the Access Control Profile
 *		 .
 * @param	systemName	string		System name of the Access Control Profile
 *		 .
 * @param	description	string		The description of the Access Control Profile
 *		 .
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	isDefault	int		True if this Conversion Profile is the default
 *		 .
 * @param	restrictions	array		Array of Access Control Restrictions
 *		 .
 * @param	containsUnsuportedRestrictions	bool		Indicates that the access control profile is new and should be handled using KalturaAccessControlProfile object and accessControlProfile service
 *		  (readOnly).
 */
function KalturaAccessControl(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.createdAt = null;
	this.isDefault = null;
	this.restrictions = null;
	this.containsUnsuportedRestrictions = null;
}
KalturaAccessControl.inheritsFrom (KalturaObjectBase);


/**
 * @param	type	string		The type of the condition context
 *		 .
 */
function KalturaContextTypeHolder(){
	this.type = null;
}
KalturaContextTypeHolder.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaAccessControlContextTypeHolder(){
}
KalturaAccessControlContextTypeHolder.inheritsFrom (KalturaContextTypeHolder);


/**
 * @param	type	string		The type of the action
 *		  (readOnly).
 */
function KalturaRuleAction(){
	this.type = null;
}
KalturaRuleAction.inheritsFrom (KalturaObjectBase);


/**
 * @param	type	string		The type of the access control condition
 *		  (readOnly).
 * @param	description	string		.
 * @param	not	bool		.
 */
function KalturaCondition(){
	this.type = null;
	this.description = null;
	this.not = null;
}
KalturaCondition.inheritsFrom (KalturaObjectBase);


/**
 * @param	description	string		Short Rule Description
 *		 .
 * @param	ruleData	string		Rule Custom Data to allow saving rule specific information 
 *		 .
 * @param	message	string		Message to be thrown to the player in case the rule is fulfilled
 *		 .
 * @param	actions	array		Actions to be performed by the player in case the rule is fulfilled
 *		 .
 * @param	conditions	array		Conditions to validate the rule
 *		 .
 * @param	contexts	array		Indicates what contexts should be tested by this rule 
 *		 .
 * @param	stopProcessing	bool		Indicates that this rule is enough and no need to continue checking the rest of the rules 
 *		 .
 */
function KalturaRule(){
	this.description = null;
	this.ruleData = null;
	this.message = null;
	this.actions = null;
	this.conditions = null;
	this.contexts = null;
	this.stopProcessing = null;
}
KalturaRule.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Access Control Profile
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		The name of the Access Control Profile
 *		 .
 * @param	systemName	string		System name of the Access Control Profile
 *		 .
 * @param	description	string		The description of the Access Control Profile
 *		 .
 * @param	createdAt	int		Creation time as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	updatedAt	int		Update time as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	isDefault	int		True if this access control profile is the partner default
 *		 .
 * @param	rules	array		Array of access control rules
 *		 .
 */
function KalturaAccessControlProfile(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.isDefault = null;
	this.rules = null;
}
KalturaAccessControlProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	key	string		.
 * @param	value	string		.
 */
function KalturaKeyValue(){
	this.key = null;
	this.value = null;
}
KalturaKeyValue.inheritsFrom (KalturaObjectBase);


/**
 * @param	referrer	string		URL to be used to test domain conditions.
 *		 .
 * @param	ip	string		IP to be used to test geographic location conditions.
 *		 .
 * @param	ks	string		Kaltura session to be used to test session and user conditions.
 *		 .
 * @param	userAgent	string		Browser or client application to be used to test agent conditions.
 *		 .
 * @param	time	int		Unix timestamp (In seconds) to be used to test entry scheduling, keep null to use now.
 *		 .
 * @param	contexts	array		Indicates what contexts should be tested. No contexts means any context.
 *		 .
 * @param	hashes	array		Array of hashes to pass to the access control profile scope
 *		 .
 */
function KalturaAccessControlScope(){
	this.referrer = null;
	this.ip = null;
	this.ks = null;
	this.userAgent = null;
	this.time = null;
	this.contexts = null;
	this.hashes = null;
}
KalturaAccessControlScope.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		 (readOnly).
 * @param	cuePointType	string		 (readOnly).
 * @param	status	int		 (readOnly).
 * @param	entryId	string		 (insertOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	triggeredAt	int		.
 * @param	tags	string		.
 * @param	startTime	int		Start time in milliseconds
 *		 .
 * @param	userId	string		 (readOnly).
 * @param	partnerData	string		.
 * @param	partnerSortValue	int		.
 * @param	forceStop	int		.
 * @param	thumbOffset	int		.
 * @param	systemName	string		.
 */
function KalturaCuePoint(){
	this.id = null;
	this.cuePointType = null;
	this.status = null;
	this.entryId = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.triggeredAt = null;
	this.tags = null;
	this.startTime = null;
	this.userId = null;
	this.partnerData = null;
	this.partnerSortValue = null;
	this.forceStop = null;
	this.thumbOffset = null;
	this.systemName = null;
}
KalturaCuePoint.inheritsFrom (KalturaObjectBase);


/**
 * @param	parentId	string		 (insertOnly).
 * @param	text	string		.
 * @param	endTime	int		End time in milliseconds
 *		 .
 * @param	duration	int		Duration in milliseconds
 *		  (readOnly).
 * @param	depth	int		Depth in the tree
 *		  (readOnly).
 * @param	childrenCount	int		Number of all descendants
 *		  (readOnly).
 * @param	directChildrenCount	int		Number of children, first generation only.
 *		  (readOnly).
 * @param	isPublic	int		Is the annotation public.
 *		 .
 * @param	searchableOnEntry	int		Should the cue point get indexed on the entry.
 *		 .
 */
function KalturaAnnotation(){
	this.parentId = null;
	this.text = null;
	this.endTime = null;
	this.duration = null;
	this.depth = null;
	this.childrenCount = null;
	this.directChildrenCount = null;
	this.isPublic = null;
	this.searchableOnEntry = null;
}
KalturaAnnotation.inheritsFrom (KalturaCuePoint);


/**
 * @param	name	string		.
 * @param	value	string		.
 */
function KalturaApiExceptionArg(){
	this.name = null;
	this.value = null;
}
KalturaApiExceptionArg.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		The id of the application token
 *		  (readOnly).
 * @param	token	string		The application token
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		Creation time as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	updatedAt	int		Update time as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	status	int		Application token status 
 *		  (readOnly).
 * @param	expiry	int		Expiry time of current token (unix timestamp in seconds)
 *		 .
 * @param	sessionType	int		Type of KS (Kaltura Session) that created using the current token
 *		 .
 * @param	sessionUserId	string		User id of KS (Kaltura Session) that created using the current token
 *		 .
 * @param	sessionDuration	int		Expiry duration of KS (Kaltura Session) that created using the current token (in seconds)
 *		 .
 * @param	sessionPrivileges	string		Comma separated privileges to be applied on KS (Kaltura Session) that created using the current token
 *		 .
 * @param	hashType	string		.
 */
function KalturaAppToken(){
	this.id = null;
	this.token = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.status = null;
	this.expiry = null;
	this.sessionType = null;
	this.sessionUserId = null;
	this.sessionDuration = null;
	this.sessionPrivileges = null;
	this.hashType = null;
}
KalturaAppToken.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		The ID of the Flavor Asset
 *		  (readOnly).
 * @param	entryId	string		The entry ID of the Flavor Asset
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	version	int		The version of the Flavor Asset
 *		  (readOnly).
 * @param	size	int		The size (in KBytes) of the Flavor Asset
 *		  (readOnly).
 * @param	tags	string		Tags used to identify the Flavor Asset in various scenarios
 *		 .
 * @param	fileExt	string		The file extension
 *		  (insertOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	deletedAt	int		 (readOnly).
 * @param	description	string		System description, error message, warnings and failure cause.
 *		  (readOnly).
 * @param	partnerData	string		Partner private data
 *		 .
 * @param	partnerDescription	string		Partner friendly description
 *		 .
 * @param	actualSourceAssetParamsIds	string		Comma separated list of source flavor params ids
 *		 .
 */
function KalturaAsset(){
	this.id = null;
	this.entryId = null;
	this.partnerId = null;
	this.version = null;
	this.size = null;
	this.tags = null;
	this.fileExt = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.deletedAt = null;
	this.description = null;
	this.partnerData = null;
	this.partnerDescription = null;
	this.actualSourceAssetParamsIds = null;
}
KalturaAsset.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaAssetDistributionCondition(){
}
KalturaAssetDistributionCondition.inheritsFrom (KalturaObjectBase);


/**
 * @param	validationError	string		The validation error description that will be set on the "data" property on KalturaDistributionValidationErrorMissingAsset if rule was not fulfilled
 *		 .
 * @param	assetDistributionConditions	array		An array of asset distribution conditions
 *		 .
 */
function KalturaAssetDistributionRule(){
	this.validationError = null;
	this.assetDistributionConditions = null;
}
KalturaAssetDistributionRule.inheritsFrom (KalturaObjectBase);


/**
 * @param	value	string		.
 */
function KalturaString(){
	this.value = null;
}
KalturaString.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Flavor Params
 *		  (readOnly).
 * @param	partnerId	int		.
 * @param	name	string		The name of the Flavor Params
 *		 .
 * @param	systemName	string		System name of the Flavor Params
 *		 .
 * @param	description	string		The description of the Flavor Params
 *		 .
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	isSystemDefault	int		True if those Flavor Params are part of system defaults
 *		  (readOnly).
 * @param	tags	string		The Flavor Params tags are used to identify the flavor for different usage (e.g. web, hd, mobile)
 *		 .
 * @param	requiredPermissions	array		Array of partner permisison names that required for using this asset params
 *		 .
 * @param	sourceRemoteStorageProfileId	int		Id of remote storage profile that used to get the source, zero indicates Kaltura data center
 *		 .
 * @param	remoteStorageProfileIds	int		Comma seperated ids of remote storage profiles that the flavor distributed to, the distribution done by the conversion engine
 *		 .
 * @param	mediaParserType	string		Media parser type to be used for post-conversion validation
 *		 .
 * @param	sourceAssetParamsIds	string		Comma seperated ids of source flavor params this flavor is created from
 *		 .
 */
function KalturaAssetParams(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.createdAt = null;
	this.isSystemDefault = null;
	this.tags = null;
	this.requiredPermissions = null;
	this.sourceRemoteStorageProfileId = null;
	this.remoteStorageProfileIds = null;
	this.mediaParserType = null;
	this.sourceAssetParamsIds = null;
}
KalturaAssetParams.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaResource(){
}
KalturaResource.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaContentResource(){
}
KalturaContentResource.inheritsFrom (KalturaResource);


/**
 * @param	resource	KalturaContentResource		The content resource to associate with asset params
 *		 .
 * @param	assetParamsId	int		The asset params to associate with the reaource
 *		 .
 */
function KalturaAssetParamsResourceContainer(){
	this.resource = null;
	this.assetParamsId = null;
}
KalturaAssetParamsResourceContainer.inheritsFrom (KalturaResource);


/**
 * @param	filename	string		The filename of the attachment asset content
 *		 .
 * @param	title	string		Attachment asset title
 *		 .
 * @param	format	string		The attachment format
 *		 .
 * @param	status	int		The status of the asset
 *		  (readOnly).
 */
function KalturaAttachmentAsset(){
	this.filename = null;
	this.title = null;
	this.format = null;
	this.status = null;
}
KalturaAttachmentAsset.inheritsFrom (KalturaAsset);


/**
 */
function KalturaOperationAttributes(){
}
KalturaOperationAttributes.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		Auto generated 10 characters alphanumeric string
 *		  (readOnly).
 * @param	name	string		Entry name (Min 1 chars)
 *		 .
 * @param	description	string		Entry description
 *		 .
 * @param	partnerId	int		 (readOnly).
 * @param	userId	string		The ID of the user who is the owner of this entry 
 *		 .
 * @param	creatorId	string		The ID of the user who created this entry 
 *		  (insertOnly).
 * @param	tags	string		Entry tags
 *		 .
 * @param	adminTags	string		Entry admin tags can be updated only by administrators
 *		 .
 * @param	categories	string		Comma separated list of full names of categories to which this entry belongs. Only categories that don't have entitlement (privacy context) are listed, to retrieve the full list of categories, use the categoryEntry.list action. 
 *		 .
 * @param	categoriesIds	string		Comma separated list of ids of categories to which this entry belongs. Only categories that don't have entitlement (privacy context) are listed, to retrieve the full list of categories, use the categoryEntry.list action. 
 *		 .
 * @param	status	string		 (readOnly).
 * @param	moderationStatus	int		Entry moderation status
 *		  (readOnly).
 * @param	moderationCount	int		Number of moderation requests waiting for this entry
 *		  (readOnly).
 * @param	type	string		The type of the entry, this is auto filled by the derived entry object
 *		 .
 * @param	createdAt	int		Entry creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Entry update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	rank	float		The calculated average rank. rank = totalRank / votes
 *		  (readOnly).
 * @param	totalRank	int		The sum of all rank values submitted to the baseEntry.anonymousRank action
 *		  (readOnly).
 * @param	votes	int		A count of all requests made to the baseEntry.anonymousRank action
 *		  (readOnly).
 * @param	groupId	int		.
 * @param	partnerData	string		Can be used to store various partner related data as a string 
 *		 .
 * @param	downloadUrl	string		Download URL for the entry
 *		  (readOnly).
 * @param	searchText	string		Indexed search text for full text search
 *		  (readOnly).
 * @param	licenseType	int		License type used for this entry
 *		 .
 * @param	version	int		Version of the entry data
 *		  (readOnly).
 * @param	thumbnailUrl	string		Thumbnail URL
 *		  (readOnly).
 * @param	accessControlId	int		The Access Control ID assigned to this entry (null when not set, send -1 to remove)  
 *		 .
 * @param	startDate	int		Entry scheduling start date (null when not set, send -1 to remove)
 *		 .
 * @param	endDate	int		Entry scheduling end date (null when not set, send -1 to remove)
 *		 .
 * @param	referenceId	string		Entry external reference id
 *		 .
 * @param	replacingEntryId	string		ID of temporary entry that will replace this entry when it's approved and ready for replacement
 *		  (readOnly).
 * @param	replacedEntryId	string		ID of the entry that will be replaced when the replacement approved and this entry is ready
 *		  (readOnly).
 * @param	replacementStatus	string		Status of the replacement readiness and approval
 *		  (readOnly).
 * @param	partnerSortValue	int		Can be used to store various partner related data as a numeric value
 *		 .
 * @param	conversionProfileId	int		Override the default ingestion profile  
 *		 .
 * @param	redirectEntryId	string		IF not empty, points to an entry ID the should replace this current entry's id. 
 *		 .
 * @param	rootEntryId	string		ID of source root entry, used for clipped, skipped and cropped entries that created from another entry
 *		  (readOnly).
 * @param	parentEntryId	string		ID of source root entry, used for defining entires association
 *	 	 .
 * @param	operationAttributes	array		clipping, skipping and cropping attributes that used to create this entry  
 *		 .
 * @param	entitledUsersEdit	string		list of user ids that are entitled to edit the entry (no server enforcement) The difference between entitledUsersEdit and entitledUsersPublish is applicative only
 *		 .
 * @param	entitledUsersPublish	string		list of user ids that are entitled to publish the entry (no server enforcement) The difference between entitledUsersEdit and entitledUsersPublish is applicative only
 *		 .
 * @param	capabilities	string		Comma seperated string of the capabilities of the entry. Any capability needed can be added to this list.
 *		  (readOnly).
 */
function KalturaBaseEntry(){
	this.id = null;
	this.name = null;
	this.description = null;
	this.partnerId = null;
	this.userId = null;
	this.creatorId = null;
	this.tags = null;
	this.adminTags = null;
	this.categories = null;
	this.categoriesIds = null;
	this.status = null;
	this.moderationStatus = null;
	this.moderationCount = null;
	this.type = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.rank = null;
	this.totalRank = null;
	this.votes = null;
	this.groupId = null;
	this.partnerData = null;
	this.downloadUrl = null;
	this.searchText = null;
	this.licenseType = null;
	this.version = null;
	this.thumbnailUrl = null;
	this.accessControlId = null;
	this.startDate = null;
	this.endDate = null;
	this.referenceId = null;
	this.replacingEntryId = null;
	this.replacedEntryId = null;
	this.replacementStatus = null;
	this.partnerSortValue = null;
	this.conversionProfileId = null;
	this.redirectEntryId = null;
	this.rootEntryId = null;
	this.parentEntryId = null;
	this.operationAttributes = null;
	this.entitledUsersEdit = null;
	this.entitledUsersPublish = null;
	this.capabilities = null;
}
KalturaBaseEntry.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaBaseEntryCloneOptionItem(){
}
KalturaBaseEntryCloneOptionItem.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaBaseResponseProfile(){
}
KalturaBaseResponseProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		 (readOnly).
 * @param	feedUrl	string		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	playlistId	string		link a playlist that will set what content the feed will include
 *		 if empty, all content will be included in feed
 *		 .
 * @param	name	string		feed name
 *		 .
 * @param	status	int		feed status
 *		  (readOnly).
 * @param	type	int		feed type
 *		  (insertOnly).
 * @param	landingPage	string		Base URL for each video, on the partners site
 *		 This is required by all syndication types.
 *		 .
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	allowEmbed	bool		allow_embed tells google OR yahoo weather to allow embedding the video on google OR yahoo video results
 *		 or just to provide a link to the landing page.
 *		 it is applied on the video-player_loc property in the XML (google)
 *		 and addes media-player tag (yahoo)
 *		 .
 * @param	playerUiconfId	int		Select a uiconf ID as player skin to include in the kwidget url
 *		 .
 * @param	flavorParamId	int		.
 * @param	transcodeExistingContent	bool		.
 * @param	addToDefaultConversionProfile	bool		.
 * @param	categories	string		.
 * @param	storageId	int		.
 * @param	entriesOrderBy	string		.
 * @param	enforceEntitlement	bool		Should enforce entitlement on feed entries
 *		 .
 * @param	privacyContext	string		Set privacy context for search entries that assiged to private and public categories within a category privacy context.
 *		 .
 * @param	updatedAt	int		Update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	useCategoryEntries	bool		.
 */
function KalturaBaseSyndicationFeed(){
	this.id = null;
	this.feedUrl = null;
	this.partnerId = null;
	this.playlistId = null;
	this.name = null;
	this.status = null;
	this.type = null;
	this.landingPage = null;
	this.createdAt = null;
	this.allowEmbed = null;
	this.playerUiconfId = null;
	this.flavorParamId = null;
	this.transcodeExistingContent = null;
	this.addToDefaultConversionProfile = null;
	this.categories = null;
	this.storageId = null;
	this.entriesOrderBy = null;
	this.enforceEntitlement = null;
	this.privacyContext = null;
	this.updatedAt = null;
	this.useCategoryEntries = null;
}
KalturaBaseSyndicationFeed.inheritsFrom (KalturaObjectBase);


/**
 * @param	schedulerId	int		.
 * @param	workerId	int		.
 * @param	batchIndex	int		.
 * @param	timeStamp	int		.
 * @param	message	string		.
 * @param	errType	int		.
 * @param	errNumber	int		.
 * @param	hostName	string		.
 * @param	sessionId	string		.
 */
function KalturaBatchHistoryData(){
	this.schedulerId = null;
	this.workerId = null;
	this.batchIndex = null;
	this.timeStamp = null;
	this.message = null;
	this.errType = null;
	this.errNumber = null;
	this.hostName = null;
	this.sessionId = null;
}
KalturaBatchHistoryData.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaJobData(){
}
KalturaJobData.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	deletedAt	int		 (readOnly).
 * @param	lockExpiration	int		 (readOnly).
 * @param	executionAttempts	int		 (readOnly).
 * @param	lockVersion	int		 (readOnly).
 * @param	entryId	string		.
 * @param	entryName	string		.
 * @param	jobType	string		 (readOnly).
 * @param	jobSubType	int		.
 * @param	data	KalturaJobData		.
 * @param	status	int		.
 * @param	abort	int		.
 * @param	checkAgainTimeout	int		.
 * @param	message	string		.
 * @param	description	string		.
 * @param	priority	int		.
 * @param	history	array		.
 * @param	bulkJobId	int		The id of the bulk upload job that initiated this job
 *		 .
 * @param	batchVersion	int		.
 * @param	parentJobId	int		When one job creates another - the parent should set this parentJobId to be its own id.
 *		 .
 * @param	rootJobId	int		The id of the root parent job
 *		 .
 * @param	queueTime	int		The time that the job was pulled from the queue
 *		 .
 * @param	finishTime	int		The time that the job was finished or closed as failed
 *		 .
 * @param	errType	int		.
 * @param	errNumber	int		.
 * @param	estimatedEffort	int		.
 * @param	urgency	int		.
 * @param	schedulerId	int		.
 * @param	workerId	int		.
 * @param	batchIndex	int		.
 * @param	lastSchedulerId	int		.
 * @param	lastWorkerId	int		.
 * @param	dc	int		.
 * @param	jobObjectId	string		.
 * @param	jobObjectType	int		.
 */
function KalturaBatchJob(){
	this.id = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.deletedAt = null;
	this.lockExpiration = null;
	this.executionAttempts = null;
	this.lockVersion = null;
	this.entryId = null;
	this.entryName = null;
	this.jobType = null;
	this.jobSubType = null;
	this.data = null;
	this.status = null;
	this.abort = null;
	this.checkAgainTimeout = null;
	this.message = null;
	this.description = null;
	this.priority = null;
	this.history = null;
	this.bulkJobId = null;
	this.batchVersion = null;
	this.parentJobId = null;
	this.rootJobId = null;
	this.queueTime = null;
	this.finishTime = null;
	this.errType = null;
	this.errNumber = null;
	this.estimatedEffort = null;
	this.urgency = null;
	this.schedulerId = null;
	this.workerId = null;
	this.batchIndex = null;
	this.lastSchedulerId = null;
	this.lastWorkerId = null;
	this.dc = null;
	this.jobObjectId = null;
	this.jobObjectType = null;
}
KalturaBatchJob.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaBulkServiceData(){
}
KalturaBulkServiceData.inheritsFrom (KalturaObjectBase);


/**
 * @param	field	string		.
 * @param	value	string		.
 */
function KalturaBulkUploadPluginData(){
	this.field = null;
	this.value = null;
}
KalturaBulkUploadPluginData.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the result
 *	      (readOnly).
 * @param	bulkUploadJobId	int		The id of the parent job
 *		 .
 * @param	lineIndex	int		The index of the line in the CSV
 *		 .
 * @param	partnerId	int		.
 * @param	status	string		.
 * @param	action	string		.
 * @param	objectId	string		.
 * @param	objectStatus	int		.
 * @param	bulkUploadResultObjectType	string		.
 * @param	rowData	string		The data as recieved in the csv
 *		 .
 * @param	partnerData	string		.
 * @param	objectErrorDescription	string		.
 * @param	pluginsData	array		.
 * @param	errorDescription	string		.
 * @param	errorCode	string		.
 * @param	errorType	int		.
 */
function KalturaBulkUploadResult(){
	this.id = null;
	this.bulkUploadJobId = null;
	this.lineIndex = null;
	this.partnerId = null;
	this.status = null;
	this.action = null;
	this.objectId = null;
	this.objectStatus = null;
	this.bulkUploadResultObjectType = null;
	this.rowData = null;
	this.partnerData = null;
	this.objectErrorDescription = null;
	this.pluginsData = null;
	this.errorDescription = null;
	this.errorCode = null;
	this.errorType = null;
}
KalturaBulkUploadResult.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		.
 * @param	uploadedBy	string		.
 * @param	uploadedByUserId	string		.
 * @param	uploadedOn	int		.
 * @param	numOfEntries	int		.
 * @param	status	int		.
 * @param	logFileUrl	string		.
 * @param	csvFileUrl	string		.
 * @param	bulkFileUrl	string		.
 * @param	bulkUploadType	string		.
 * @param	results	array		.
 * @param	error	string		.
 * @param	errorType	int		.
 * @param	errorNumber	int		.
 * @param	fileName	string		.
 * @param	description	string		.
 * @param	numOfObjects	int		.
 * @param	bulkUploadObjectType	string		.
 */
function KalturaBulkUpload(){
	this.id = null;
	this.uploadedBy = null;
	this.uploadedByUserId = null;
	this.uploadedOn = null;
	this.numOfEntries = null;
	this.status = null;
	this.logFileUrl = null;
	this.csvFileUrl = null;
	this.bulkFileUrl = null;
	this.bulkUploadType = null;
	this.results = null;
	this.error = null;
	this.errorType = null;
	this.errorNumber = null;
	this.fileName = null;
	this.description = null;
	this.numOfObjects = null;
	this.bulkUploadObjectType = null;
}
KalturaBulkUpload.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaBulkUploadObjectData(){
}
KalturaBulkUploadObjectData.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		 (readOnly).
 * @param	partnerId	int		.
 * @param	browser	string		.
 * @param	serverIp	string		.
 * @param	serverOs	string		.
 * @param	phpVersion	string		.
 * @param	ceAdminEmail	string		.
 * @param	type	string		.
 * @param	description	string		.
 * @param	data	string		.
 */
function KalturaCEError(){
	this.id = null;
	this.partnerId = null;
	this.browser = null;
	this.serverIp = null;
	this.serverOs = null;
	this.phpVersion = null;
	this.ceAdminEmail = null;
	this.type = null;
	this.description = null;
	this.data = null;
}
KalturaCEError.inheritsFrom (KalturaObjectBase);


/**
 * @param	captionParamsId	int		The Caption Params used to create this Caption Asset
 *		  (insertOnly).
 * @param	language	string		The language of the caption asset content
 *		 .
 * @param	languageCode	string		The language of the caption asset content
 *		  (readOnly).
 * @param	isDefault	int		Is default caption asset of the entry
 *		 .
 * @param	label	string		Friendly label
 *		 .
 * @param	format	string		The caption format
 *		  (insertOnly).
 * @param	status	int		The status of the asset
 *		  (readOnly).
 * @param	parentId	string		The parent id of the asset
 *		  (insertOnly).
 * @param	accuracy	int		The Accuracy of the caption content
 *		 .
 */
function KalturaCaptionAsset(){
	this.captionParamsId = null;
	this.language = null;
	this.languageCode = null;
	this.isDefault = null;
	this.label = null;
	this.format = null;
	this.status = null;
	this.parentId = null;
	this.accuracy = null;
}
KalturaCaptionAsset.inheritsFrom (KalturaAsset);


/**
 * @param	asset	KalturaCaptionAsset		The Caption Asset object
 *		 .
 * @param	entry	KalturaBaseEntry		The entry object
 *		 .
 * @param	startTime	int		.
 * @param	endTime	int		.
 * @param	content	string		.
 */
function KalturaCaptionAssetItem(){
	this.asset = null;
	this.entry = null;
	this.startTime = null;
	this.endTime = null;
	this.content = null;
}
KalturaCaptionAssetItem.inheritsFrom (KalturaObjectBase);


/**
 * @param	language	string		The language of the caption content
 *		  (insertOnly).
 * @param	isDefault	int		Is default caption asset of the entry
 *		 .
 * @param	label	string		Friendly label
 *		 .
 * @param	format	string		The caption format
 *		  (insertOnly).
 * @param	sourceParamsId	int		Id of the caption params or the flavor params to be used as source for the caption creation
 *		 .
 */
function KalturaCaptionParams(){
	this.language = null;
	this.isDefault = null;
	this.label = null;
	this.format = null;
	this.sourceParamsId = null;
}
KalturaCaptionParams.inheritsFrom (KalturaAssetParams);


/**
 * @param	id	int		The id of the Category
 *		  (readOnly).
 * @param	parentId	int		.
 * @param	depth	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		The name of the Category. 
 *		 The following characters are not allowed: '<', '>', ','
 *		 .
 * @param	fullName	string		The full name of the Category
 *		  (readOnly).
 * @param	fullIds	string		The full ids of the Category
 *		  (readOnly).
 * @param	entriesCount	int		Number of entries in this Category (including child categories)
 *		  (readOnly).
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	description	string		Category description
 *		 .
 * @param	tags	string		Category tags
 *		 .
 * @param	appearInList	int		If category will be returned for list action.
 *		 .
 * @param	privacy	int		defines the privacy of the entries that assigned to this category
 *		 .
 * @param	inheritanceType	int		If Category members are inherited from parent category or set manualy. 
 *		 .
 * @param	userJoinPolicy	int		Who can ask to join this category
 *		  (readOnly).
 * @param	defaultPermissionLevel	int		Default permissionLevel for new users
 *		 .
 * @param	owner	string		Category Owner (User id)
 *		 .
 * @param	directEntriesCount	int		Number of entries that belong to this category directly
 *		  (readOnly).
 * @param	referenceId	string		Category external id, controlled and managed by the partner.
 *		 .
 * @param	contributionPolicy	int		who can assign entries to this category
 *		 .
 * @param	membersCount	int		Number of active members for this category
 *		  (readOnly).
 * @param	pendingMembersCount	int		Number of pending members for this category
 *		  (readOnly).
 * @param	privacyContext	string		Set privacy context for search entries that assiged to private and public categories. the entries will be private if the search context is set with those categories.
 *		 .
 * @param	privacyContexts	string		comma separated parents that defines a privacyContext for search
 *		  (readOnly).
 * @param	status	int		Status
 *		  (readOnly).
 * @param	inheritedParentId	int		The category id that this category inherit its members and members permission (for contribution and join)
 *		  (readOnly).
 * @param	partnerSortValue	int		Can be used to store various partner related data as a numeric value
 *		 .
 * @param	partnerData	string		Can be used to store various partner related data as a string 
 *		 .
 * @param	defaultOrderBy	string		Enable client side applications to define how to sort the category child categories 
 *		 .
 * @param	directSubCategoriesCount	int		Number of direct children categories
 *		  (readOnly).
 * @param	moderation	int		Moderation to add entries to this category by users that are not of permission level Manager or Moderator.  
 *		 .
 * @param	pendingEntriesCount	int		Nunber of pending moderation entries
 *		  (readOnly).
 */
function KalturaCategory(){
	this.id = null;
	this.parentId = null;
	this.depth = null;
	this.partnerId = null;
	this.name = null;
	this.fullName = null;
	this.fullIds = null;
	this.entriesCount = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.description = null;
	this.tags = null;
	this.appearInList = null;
	this.privacy = null;
	this.inheritanceType = null;
	this.userJoinPolicy = null;
	this.defaultPermissionLevel = null;
	this.owner = null;
	this.directEntriesCount = null;
	this.referenceId = null;
	this.contributionPolicy = null;
	this.membersCount = null;
	this.pendingMembersCount = null;
	this.privacyContext = null;
	this.privacyContexts = null;
	this.status = null;
	this.inheritedParentId = null;
	this.partnerSortValue = null;
	this.partnerData = null;
	this.defaultOrderBy = null;
	this.directSubCategoriesCount = null;
	this.moderation = null;
	this.pendingEntriesCount = null;
}
KalturaCategory.inheritsFrom (KalturaObjectBase);


/**
 * @param	categoryId	int		.
 * @param	entryId	string		entry id
 *		 .
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	categoryFullIds	string		The full ids of the Category
 *		  (readOnly).
 * @param	status	int		CategroyEntry status
 *		  (readOnly).
 */
function KalturaCategoryEntry(){
	this.categoryId = null;
	this.entryId = null;
	this.createdAt = null;
	this.categoryFullIds = null;
	this.status = null;
}
KalturaCategoryEntry.inheritsFrom (KalturaObjectBase);


/**
 * @param	categoryId	int		 (insertOnly).
 * @param	userId	string		User id
 *		  (insertOnly).
 * @param	partnerId	int		Partner id
 *		  (readOnly).
 * @param	permissionLevel	int		Permission level
 *		 .
 * @param	status	int		Status
 *		  (readOnly).
 * @param	createdAt	int		CategoryUser creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		CategoryUser update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updateMethod	int		Update method can be either manual or automatic to distinguish between manual operations (for example in KMC) on automatic - using bulk upload 
 *		 .
 * @param	categoryFullIds	string		The full ids of the Category
 *		  (readOnly).
 * @param	permissionNames	string		Set of category-related permissions for the current category user.
 *		 .
 */
function KalturaCategoryUser(){
	this.categoryId = null;
	this.userId = null;
	this.partnerId = null;
	this.permissionLevel = null;
	this.status = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.updateMethod = null;
	this.categoryFullIds = null;
	this.permissionNames = null;
}
KalturaCategoryUser.inheritsFrom (KalturaObjectBase);


/**
 * @param	clientTag	string		.
 * @param	apiVersion	string		.
 */
function KalturaClientConfiguration(){
	this.clientTag = null;
	this.apiVersion = null;
}
KalturaClientConfiguration.inheritsFrom (KalturaObjectBase);


/**
 * @param	url	string		The URL where the notification should be sent to 
 *	     .
 * @param	data	string		The serialized notification data to send
 *	     .
 */
function KalturaClientNotification(){
	this.url = null;
	this.data = null;
}
KalturaClientNotification.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaContext(){
}
KalturaContext.inheritsFrom (KalturaObjectBase);


/**
 * @param	messages	array		Array of messages as received from the rules that invalidated
 *		 .
 * @param	actions	array		Array of actions as received from the rules that invalidated
 *		 .
 */
function KalturaContextDataResult(){
	this.messages = null;
	this.actions = null;
}
KalturaContextDataResult.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Category
 *		  (readOnly).
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	createdBy	string		Creator name
 *		 .
 * @param	updatedAt	int		Update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedBy	string		Updater name
 *		 .
 * @param	createdById	int		Creator id
 *		 .
 * @param	schedulerId	int		The id of the scheduler that the command refers to
 *		 .
 * @param	workerId	int		The id of the scheduler worker that the command refers to
 *		 .
 * @param	workerConfiguredId	int		The id of the scheduler worker as configured in the ini file
 *		 .
 * @param	workerName	int		The name of the scheduler worker that the command refers to
 *		 .
 * @param	batchIndex	int		The index of the batch process that the command refers to
 *		 .
 * @param	type	int		The command type - stop / start / config
 *		 .
 * @param	targetType	int		The command target type - data center / scheduler / job / job type
 *		 .
 * @param	status	int		The command status
 *		 .
 * @param	cause	string		The reason for the command
 *		 .
 * @param	description	string		Command description
 *		 .
 * @param	errorDescription	string		Error description
 *		 .
 */
function KalturaControlPanelCommand(){
	this.id = null;
	this.createdAt = null;
	this.createdBy = null;
	this.updatedAt = null;
	this.updatedBy = null;
	this.createdById = null;
	this.schedulerId = null;
	this.workerId = null;
	this.workerConfiguredId = null;
	this.workerName = null;
	this.batchIndex = null;
	this.type = null;
	this.targetType = null;
	this.status = null;
	this.cause = null;
	this.description = null;
	this.errorDescription = null;
}
KalturaControlPanelCommand.inheritsFrom (KalturaObjectBase);


/**
 * @param	flavorParamsId	int		The id of the flavor params, set to null for source flavor
 *		 .
 * @param	name	string		Attribute name  
 *		 .
 * @param	value	string		Attribute value  
 *		 .
 */
function KalturaConversionAttribute(){
	this.flavorParamsId = null;
	this.name = null;
	this.value = null;
}
KalturaConversionAttribute.inheritsFrom (KalturaObjectBase);


/**
 * @param	left	int		Crop left point
 *		 .
 * @param	top	int		Crop top point
 *		 .
 * @param	width	int		Crop width
 *		 .
 * @param	height	int		Crop height
 *		 .
 */
function KalturaCropDimensions(){
	this.left = null;
	this.top = null;
	this.width = null;
	this.height = null;
}
KalturaCropDimensions.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Conversion Profile
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	status	string		.
 * @param	type	string		 (insertOnly).
 * @param	name	string		The name of the Conversion Profile
 *		 .
 * @param	systemName	string		System name of the Conversion Profile
 *		 .
 * @param	tags	string		Comma separated tags
 *		 .
 * @param	description	string		The description of the Conversion Profile
 *		 .
 * @param	defaultEntryId	string		ID of the default entry to be used for template data
 *		 .
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	flavorParamsIds	string		List of included flavor ids (comma separated)
 *		 .
 * @param	isDefault	int		Indicates that this conversion profile is system default
 *		 .
 * @param	isPartnerDefault	bool		Indicates that this conversion profile is partner default
 *		  (readOnly).
 * @param	cropDimensions	KalturaCropDimensions		Cropping dimensions
 *		 .
 * @param	clipStart	int		Clipping start position (in miliseconds)
 *		 .
 * @param	clipDuration	int		Clipping duration (in miliseconds)
 *		 .
 * @param	xslTransformation	string		XSL to transform ingestion MRSS XML
 *		 .
 * @param	storageProfileId	int		ID of default storage profile to be used for linked net-storage file syncs
 *		 .
 * @param	mediaParserType	string		Media parser type to be used for extract media
 *		 .
 */
function KalturaConversionProfile(){
	this.id = null;
	this.partnerId = null;
	this.status = null;
	this.type = null;
	this.name = null;
	this.systemName = null;
	this.tags = null;
	this.description = null;
	this.defaultEntryId = null;
	this.createdAt = null;
	this.flavorParamsIds = null;
	this.isDefault = null;
	this.isPartnerDefault = null;
	this.cropDimensions = null;
	this.clipStart = null;
	this.clipDuration = null;
	this.xslTransformation = null;
	this.storageProfileId = null;
	this.mediaParserType = null;
}
KalturaConversionProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	conversionProfileId	int		The id of the conversion profile
 *		  (readOnly).
 * @param	assetParamsId	int		The id of the asset params
 *		  (readOnly).
 * @param	readyBehavior	int		The ingestion origin of the asset params
 *		 .
 * @param	origin	int		The ingestion origin of the asset params
 *		 .
 * @param	systemName	string		Asset params system name
 *		 .
 * @param	forceNoneComplied	int		Starts conversion even if the decision layer reduced the configuration to comply with the source
 *		 .
 * @param	deletePolicy	int		Specifies how to treat the flavor after conversion is finished
 *		 .
 */
function KalturaConversionProfileAssetParams(){
	this.conversionProfileId = null;
	this.assetParamsId = null;
	this.readyBehavior = null;
	this.origin = null;
	this.systemName = null;
	this.forceNoneComplied = null;
	this.deletePolicy = null;
}
KalturaConversionProfileAssetParams.inheritsFrom (KalturaObjectBase);


/**
 * @param	flavorAssetId	string		.
 * @param	flavorParamsOutputId	int		.
 * @param	readyBehavior	int		.
 * @param	videoBitrate	int		.
 * @param	audioBitrate	int		.
 * @param	destFileSyncLocalPath	string		.
 * @param	destFileSyncRemoteUrl	string		.
 */
function KalturaConvertCollectionFlavorData(){
	this.flavorAssetId = null;
	this.flavorParamsOutputId = null;
	this.readyBehavior = null;
	this.videoBitrate = null;
	this.audioBitrate = null;
	this.destFileSyncLocalPath = null;
	this.destFileSyncRemoteUrl = null;
}
KalturaConvertCollectionFlavorData.inheritsFrom (KalturaObjectBase);


/**
 * @param	latitude	float		.
 * @param	longitude	float		.
 * @param	name	string		.
 */
function KalturaCoordinate(){
	this.latitude = null;
	this.longitude = null;
	this.name = null;
}
KalturaCoordinate.inheritsFrom (KalturaObjectBase);


/**
 * @param	dataContent	string		The data of the entry
 *		 .
 * @param	retrieveDataContentByGet	bool		indicator whether to return the object for get action with the dataContent field.
 *		  (insertOnly).
 */
function KalturaDataEntry(){
	this.dataContent = null;
	this.retrieveDataContentByGet = null;
}
KalturaDataEntry.inheritsFrom (KalturaBaseEntry);


/**
 * @param	hosts	string		The hosts that are recognized
 *		 .
 * @param	uriPrefix	string		The URI prefix we use for security
 *		 .
 */
function KalturaUrlRecognizer(){
	this.hosts = null;
	this.uriPrefix = null;
}
KalturaUrlRecognizer.inheritsFrom (KalturaObjectBase);


/**
 * @param	window	int		Window
 *		 .
 * @param	key	string		key
 *		 .
 */
function KalturaUrlTokenizer(){
	this.window = null;
	this.key = null;
}
KalturaUrlTokenizer.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Delivery
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		The name of the Delivery
 *		 .
 * @param	type	string		Delivery type
 *		 .
 * @param	systemName	string		System name of the delivery
 *		 .
 * @param	description	string		The description of the Delivery
 *		 .
 * @param	createdAt	int		Creation time as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Update time as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	streamerType	string		.
 * @param	url	string		.
 * @param	hostName	string		the host part of the url
 *		  (readOnly).
 * @param	status	int		.
 * @param	recognizer	KalturaUrlRecognizer		.
 * @param	tokenizer	KalturaUrlTokenizer		.
 * @param	isDefault	int		True if this is the systemwide default for the protocol
 *		  (readOnly).
 * @param	parentId	int		the object from which this object was cloned (or 0)
 *		  (readOnly).
 * @param	mediaProtocols	string		Comma separated list of supported media protocols. f.i. rtmpe
 *		 .
 * @param	priority	int		priority used for ordering similar delivery profiles
 *		 .
 * @param	extraParams	string		Extra query string parameters that should be added to the url
 *		 .
 */
function KalturaDeliveryProfile(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.type = null;
	this.systemName = null;
	this.description = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.streamerType = null;
	this.url = null;
	this.hostName = null;
	this.status = null;
	this.recognizer = null;
	this.tokenizer = null;
	this.isDefault = null;
	this.parentId = null;
	this.mediaProtocols = null;
	this.priority = null;
	this.extraParams = null;
}
KalturaDeliveryProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	fileSyncLocalPath	string		.
 * @param	fileSyncRemoteUrl	string		The translated path as used by the scheduler
 *		 .
 * @param	fileSyncObjectSubType	int		.
 */
function KalturaFileSyncDescriptor(){
	this.fileSyncLocalPath = null;
	this.fileSyncRemoteUrl = null;
	this.fileSyncObjectSubType = null;
}
KalturaFileSyncDescriptor.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaDestFileSyncDescriptor(){
}
KalturaDestFileSyncDescriptor.inheritsFrom (KalturaFileSyncDescriptor);


/**
 */
function KalturaSearchItem(){
}
KalturaSearchItem.inheritsFrom (KalturaObjectBase);


/**
 * @param	orderBy	string		.
 * @param	advancedSearch	KalturaSearchItem		.
 */
function KalturaFilter(){
	this.orderBy = null;
	this.advancedSearch = null;
}
KalturaFilter.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaRelatedFilter(){
}
KalturaRelatedFilter.inheritsFrom (KalturaFilter);


/**
 * @param	pageSize	int		The number of objects to retrieve. (Default is 30, maximum page size is 500).
 *		 .
 * @param	pageIndex	int		The page number for which {pageSize} of objects should be retrieved (Default is 1).
 *		 .
 */
function KalturaFilterPager(){
	this.pageSize = null;
	this.pageIndex = null;
}
KalturaFilterPager.inheritsFrom (KalturaObjectBase);


/**
 * @param	parentProperty	string		.
 * @param	filterProperty	string		.
 * @param	allowNull	bool		.
 */
function KalturaResponseProfileMapping(){
	this.parentProperty = null;
	this.filterProperty = null;
	this.allowNull = null;
}
KalturaResponseProfileMapping.inheritsFrom (KalturaObjectBase);


/**
 * @param	name	string		Friendly name
 *		 .
 * @param	type	int		.
 * @param	fields	string		Comma separated fields list to be included or excluded
 *		 .
 * @param	filter	KalturaRelatedFilter		.
 * @param	pager	KalturaFilterPager		.
 * @param	relatedProfiles	array		.
 * @param	mappings	array		.
 */
function KalturaDetachedResponseProfile(){
	this.name = null;
	this.type = null;
	this.fields = null;
	this.filter = null;
	this.pager = null;
	this.relatedProfiles = null;
	this.mappings = null;
}
KalturaDetachedResponseProfile.inheritsFrom (KalturaBaseResponseProfile);


/**
 * @param	fieldName	string		A value taken from a connector field enum which associates the current configuration to that connector field
 *	     Field enum class should be returned by the provider's getFieldEnumClass function.
 *	     .
 * @param	userFriendlyFieldName	string		A string that will be shown to the user as the field name in error messages related to the current field
 *	     .
 * @param	entryMrssXslt	string		An XSLT string that extracts the right value from the Kaltura entry MRSS XML.
 *	     The value of the current connector field will be the one that is returned from transforming the Kaltura entry MRSS XML using this XSLT string.
 *	     .
 * @param	isRequired	int		Is the field required to have a value for submission ?
 *	     .
 * @param	updateOnChange	bool		Trigger distribution update when this field changes or not ?
 *	     .
 * @param	updateParams	array		Entry column or metadata xpath that should trigger an update
 *	     .
 * @param	isDefault	bool		Is this field config is the default for the distribution provider?
 *	      (readOnly).
 * @param	triggerDeleteOnError	bool		Is an error on this field going to trigger deletion of distributed content?
 *	     .
 */
function KalturaDistributionFieldConfig(){
	this.fieldName = null;
	this.userFriendlyFieldName = null;
	this.entryMrssXslt = null;
	this.isRequired = null;
	this.updateOnChange = null;
	this.updateParams = null;
	this.isDefault = null;
	this.triggerDeleteOnError = null;
}
KalturaDistributionFieldConfig.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaDistributionJobProviderData(){
}
KalturaDistributionJobProviderData.inheritsFrom (KalturaObjectBase);


/**
 * @param	width	int		.
 * @param	height	int		.
 */
function KalturaDistributionThumbDimensions(){
	this.width = null;
	this.height = null;
}
KalturaDistributionThumbDimensions.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		Auto generated unique id
 *		  (readOnly).
 * @param	createdAt	int		Profile creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Profile last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	providerType	string		 (insertOnly).
 * @param	name	string		.
 * @param	status	int		.
 * @param	submitEnabled	int		.
 * @param	updateEnabled	int		.
 * @param	deleteEnabled	int		.
 * @param	reportEnabled	int		.
 * @param	autoCreateFlavors	string		Comma separated flavor params ids that should be auto converted
 *		 .
 * @param	autoCreateThumb	string		Comma separated thumbnail params ids that should be auto generated
 *		 .
 * @param	optionalFlavorParamsIds	string		Comma separated flavor params ids that should be submitted if ready
 *		 .
 * @param	requiredFlavorParamsIds	string		Comma separated flavor params ids that required to be ready before submission
 *		 .
 * @param	optionalThumbDimensions	array		Thumbnail dimensions that should be submitted if ready
 *		 .
 * @param	requiredThumbDimensions	array		Thumbnail dimensions that required to be readt before submission
 *		 .
 * @param	optionalAssetDistributionRules	array		Asset Distribution Rules for assets that should be submitted if ready
 *		 .
 * @param	requiredAssetDistributionRules	array		Assets Asset Distribution Rules for assets that are required to be ready before submission
 *		 .
 * @param	sunriseDefaultOffset	int		If entry distribution sunrise not specified that will be the default since entry creation time, in seconds
 *		 .
 * @param	sunsetDefaultOffset	int		If entry distribution sunset not specified that will be the default since entry creation time, in seconds
 *		 .
 * @param	recommendedStorageProfileForDownload	int		The best external storage to be used to download the asset files from
 *		 .
 * @param	recommendedDcForDownload	int		The best Kaltura data center to be used to download the asset files to
 *		 .
 * @param	recommendedDcForExecute	int		The best Kaltura data center to be used to execute the distribution job
 *		 .
 */
function KalturaDistributionProfile(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerId = null;
	this.providerType = null;
	this.name = null;
	this.status = null;
	this.submitEnabled = null;
	this.updateEnabled = null;
	this.deleteEnabled = null;
	this.reportEnabled = null;
	this.autoCreateFlavors = null;
	this.autoCreateThumb = null;
	this.optionalFlavorParamsIds = null;
	this.requiredFlavorParamsIds = null;
	this.optionalThumbDimensions = null;
	this.requiredThumbDimensions = null;
	this.optionalAssetDistributionRules = null;
	this.requiredAssetDistributionRules = null;
	this.sunriseDefaultOffset = null;
	this.sunsetDefaultOffset = null;
	this.recommendedStorageProfileForDownload = null;
	this.recommendedDcForDownload = null;
	this.recommendedDcForExecute = null;
}
KalturaDistributionProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	type	string		 (readOnly).
 * @param	name	string		.
 * @param	scheduleUpdateEnabled	bool		.
 * @param	availabilityUpdateEnabled	bool		.
 * @param	deleteInsteadUpdate	bool		.
 * @param	intervalBeforeSunrise	int		.
 * @param	intervalBeforeSunset	int		.
 * @param	updateRequiredEntryFields	string		.
 * @param	updateRequiredMetadataXPaths	string		.
 */
function KalturaDistributionProvider(){
	this.type = null;
	this.name = null;
	this.scheduleUpdateEnabled = null;
	this.availabilityUpdateEnabled = null;
	this.deleteInsteadUpdate = null;
	this.intervalBeforeSunrise = null;
	this.intervalBeforeSunset = null;
	this.updateRequiredEntryFields = null;
	this.updateRequiredMetadataXPaths = null;
}
KalturaDistributionProvider.inheritsFrom (KalturaObjectBase);


/**
 * @param	version	string		.
 * @param	assetId	string		.
 * @param	remoteId	string		.
 */
function KalturaDistributionRemoteMediaFile(){
	this.version = null;
	this.assetId = null;
	this.remoteId = null;
}
KalturaDistributionRemoteMediaFile.inheritsFrom (KalturaObjectBase);


/**
 * @param	action	int		.
 * @param	errorType	int		.
 * @param	description	string		.
 */
function KalturaDistributionValidationError(){
	this.action = null;
	this.errorType = null;
	this.description = null;
}
KalturaDistributionValidationError.inheritsFrom (KalturaObjectBase);


/**
 * @param	documentType	int		The type of the document
 *		  (insertOnly).
 * @param	assetParamsIds	string		Comma separated asset params ids that exists for this media entry
 *		  (readOnly).
 */
function KalturaDocumentEntry(){
	this.documentType = null;
	this.assetParamsIds = null;
}
KalturaDocumentEntry.inheritsFrom (KalturaBaseEntry);


/**
 * @param	handlerType	string		 (readOnly).
 */
function KalturaDropFolderFileHandlerConfig(){
	this.handlerType = null;
}
KalturaDropFolderFileHandlerConfig.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (insertOnly).
 * @param	name	string		.
 * @param	description	string		.
 * @param	type	string		.
 * @param	status	int		.
 * @param	conversionProfileId	int		.
 * @param	dc	int		.
 * @param	path	string		.
 * @param	fileSizeCheckInterval	int		The ammount of time, in seconds, that should pass so that a file with no change in size we'll be treated as "finished uploading to folder"
 *		 .
 * @param	fileDeletePolicy	int		.
 * @param	autoFileDeleteDays	int		.
 * @param	fileHandlerType	string		.
 * @param	fileNamePatterns	string		.
 * @param	fileHandlerConfig	KalturaDropFolderFileHandlerConfig		.
 * @param	tags	string		.
 * @param	errorCode	string		.
 * @param	errorDescription	string		.
 * @param	ignoreFileNamePatterns	string		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	lastAccessedAt	int		.
 * @param	incremental	bool		.
 * @param	lastFileTimestamp	int		.
 * @param	metadataProfileId	int		.
 * @param	categoriesMetadataFieldName	string		.
 * @param	enforceEntitlement	bool		.
 * @param	shouldValidateKS	bool		.
 */
function KalturaDropFolder(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.description = null;
	this.type = null;
	this.status = null;
	this.conversionProfileId = null;
	this.dc = null;
	this.path = null;
	this.fileSizeCheckInterval = null;
	this.fileDeletePolicy = null;
	this.autoFileDeleteDays = null;
	this.fileHandlerType = null;
	this.fileNamePatterns = null;
	this.fileHandlerConfig = null;
	this.tags = null;
	this.errorCode = null;
	this.errorDescription = null;
	this.ignoreFileNamePatterns = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.lastAccessedAt = null;
	this.incremental = null;
	this.lastFileTimestamp = null;
	this.metadataProfileId = null;
	this.categoriesMetadataFieldName = null;
	this.enforceEntitlement = null;
	this.shouldValidateKS = null;
}
KalturaDropFolder.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	dropFolderId	int		 (insertOnly).
 * @param	fileName	string		 (insertOnly).
 * @param	fileSize	float		.
 * @param	fileSizeLastSetAt	int		 (readOnly).
 * @param	status	int		 (readOnly).
 * @param	type	string		 (readOnly).
 * @param	parsedSlug	string		.
 * @param	parsedFlavor	string		.
 * @param	parsedUserId	string		.
 * @param	leadDropFolderFileId	int		.
 * @param	deletedDropFolderFileId	int		.
 * @param	entryId	string		.
 * @param	errorCode	string		.
 * @param	errorDescription	string		.
 * @param	lastModificationTime	string		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	uploadStartDetectedAt	int		.
 * @param	uploadEndDetectedAt	int		.
 * @param	importStartedAt	int		.
 * @param	importEndedAt	int		.
 * @param	batchJobId	int		 (readOnly).
 */
function KalturaDropFolderFile(){
	this.id = null;
	this.partnerId = null;
	this.dropFolderId = null;
	this.fileName = null;
	this.fileSize = null;
	this.fileSizeLastSetAt = null;
	this.status = null;
	this.type = null;
	this.parsedSlug = null;
	this.parsedFlavor = null;
	this.parsedUserId = null;
	this.leadDropFolderFileId = null;
	this.deletedDropFolderFileId = null;
	this.entryId = null;
	this.errorCode = null;
	this.errorDescription = null;
	this.lastModificationTime = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.uploadStartDetectedAt = null;
	this.uploadEndDetectedAt = null;
	this.importStartedAt = null;
	this.importEndedAt = null;
	this.batchJobId = null;
}
KalturaDropFolderFile.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	name	string		.
 * @param	description	string		.
 * @param	emailAddress	string		.
 * @param	mailboxId	string		.
 * @param	partnerId	int		 (readOnly).
 * @param	conversionProfile2Id	int		.
 * @param	moderationStatus	int		.
 * @param	status	int		 (readOnly).
 * @param	createdAt	string		 (readOnly).
 * @param	defaultCategory	string		.
 * @param	defaultUserId	string		.
 * @param	defaultTags	string		.
 * @param	defaultAdminTags	string		.
 * @param	maxAttachmentSizeKbytes	int		.
 * @param	maxAttachmentsPerMail	int		.
 */
function KalturaEmailIngestionProfile(){
	this.id = null;
	this.name = null;
	this.description = null;
	this.emailAddress = null;
	this.mailboxId = null;
	this.partnerId = null;
	this.conversionProfile2Id = null;
	this.moderationStatus = null;
	this.status = null;
	this.createdAt = null;
	this.defaultCategory = null;
	this.defaultUserId = null;
	this.defaultTags = null;
	this.defaultAdminTags = null;
	this.maxAttachmentSizeKbytes = null;
	this.maxAttachmentsPerMail = null;
}
KalturaEmailIngestionProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	description	string		.
 */
function KalturaValue(){
	this.description = null;
}
KalturaValue.inheritsFrom (KalturaObjectBase);


/**
 * @param	value	string		.
 */
function KalturaStringValue(){
	this.value = null;
}
KalturaStringValue.inheritsFrom (KalturaValue);


/**
 * @param	email	KalturaStringValue		Recipient e-mail address
 *		 .
 * @param	name	KalturaStringValue		Recipient name
 *		 .
 */
function KalturaEmailNotificationRecipient(){
	this.email = null;
	this.name = null;
}
KalturaEmailNotificationRecipient.inheritsFrom (KalturaObjectBase);


/**
 * @param	providerType	string		Provider type of the job data.
 *		   (readOnly).
 */
function KalturaEmailNotificationRecipientJobData(){
	this.providerType = null;
}
KalturaEmailNotificationRecipientJobData.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaEmailNotificationRecipientProvider(){
}
KalturaEmailNotificationRecipientProvider.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		Auto generated unique id
 *		  (readOnly).
 * @param	createdAt	int		Entry distribution creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Entry distribution last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	submittedAt	int		Entry distribution submission date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	entryId	string		 (insertOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	distributionProfileId	int		 (insertOnly).
 * @param	status	int		 (readOnly).
 * @param	sunStatus	int		 (readOnly).
 * @param	dirtyStatus	int		 (readOnly).
 * @param	thumbAssetIds	string		Comma separated thumbnail asset ids
 *		 .
 * @param	flavorAssetIds	string		Comma separated flavor asset ids
 *		 .
 * @param	assetIds	string		Comma separated asset ids
 *		 .
 * @param	sunrise	int		Entry distribution publish time as Unix timestamp (In seconds)
 *		 .
 * @param	sunset	int		Entry distribution un-publish time as Unix timestamp (In seconds)
 *		 .
 * @param	remoteId	string		The id as returned from the distributed destination
 *		  (readOnly).
 * @param	plays	int		The plays as retrieved from the remote destination reports
 *		  (readOnly).
 * @param	views	int		The views as retrieved from the remote destination reports
 *		  (readOnly).
 * @param	validationErrors	array		.
 * @param	errorType	int		 (readOnly).
 * @param	errorNumber	int		 (readOnly).
 * @param	errorDescription	string		 (readOnly).
 * @param	hasSubmitResultsLog	int		 (readOnly).
 * @param	hasSubmitSentDataLog	int		 (readOnly).
 * @param	hasUpdateResultsLog	int		 (readOnly).
 * @param	hasUpdateSentDataLog	int		 (readOnly).
 * @param	hasDeleteResultsLog	int		 (readOnly).
 * @param	hasDeleteSentDataLog	int		 (readOnly).
 */
function KalturaEntryDistribution(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.submittedAt = null;
	this.entryId = null;
	this.partnerId = null;
	this.distributionProfileId = null;
	this.status = null;
	this.sunStatus = null;
	this.dirtyStatus = null;
	this.thumbAssetIds = null;
	this.flavorAssetIds = null;
	this.assetIds = null;
	this.sunrise = null;
	this.sunset = null;
	this.remoteId = null;
	this.plays = null;
	this.views = null;
	this.validationErrors = null;
	this.errorType = null;
	this.errorNumber = null;
	this.errorDescription = null;
	this.hasSubmitResultsLog = null;
	this.hasSubmitSentDataLog = null;
	this.hasUpdateResultsLog = null;
	this.hasUpdateSentDataLog = null;
	this.hasDeleteResultsLog = null;
	this.hasDeleteSentDataLog = null;
}
KalturaEntryDistribution.inheritsFrom (KalturaObjectBase);


/**
 * @param	keepManualThumbnails	int		If true manually created thumbnails will not be deleted on entry replacement
 *		 .
 */
function KalturaEntryReplacementOptions(){
	this.keepManualThumbnails = null;
}
KalturaEntryReplacementOptions.inheritsFrom (KalturaObjectBase);


/**
 * @param	key	string		The key in the subject and body to be replaced with the dynamic value
 *		 .
 * @param	description	string		.
 * @param	value	KalturaStringValue		The dynamic value to be placed in the final output
 *		 .
 */
function KalturaEventNotificationParameter(){
	this.key = null;
	this.description = null;
	this.value = null;
}
KalturaEventNotificationParameter.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	description	string		.
 * @param	type	string		 (insertOnly).
 * @param	status	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	manualDispatchEnabled	bool		Define that the template could be dispatched manually from the API
 *		 .
 * @param	automaticDispatchEnabled	bool		Define that the template could be dispatched automatically by the system
 *		 .
 * @param	eventType	string		Define the event that should trigger this notification
 *		 .
 * @param	eventObjectType	string		Define the object that raied the event that should trigger this notification
 *		 .
 * @param	eventConditions	array		Define the conditions that cause this notification to be triggered
 *		 .
 * @param	contentParameters	array		Define the content dynamic parameters
 *		 .
 * @param	userParameters	array		Define the content dynamic parameters
 *		 .
 */
function KalturaEventNotificationTemplate(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.type = null;
	this.status = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.manualDispatchEnabled = null;
	this.automaticDispatchEnabled = null;
	this.eventType = null;
	this.eventObjectType = null;
	this.eventConditions = null;
	this.contentParameters = null;
	this.userParameters = null;
}
KalturaEventNotificationTemplate.inheritsFrom (KalturaObjectBase);


/**
 * @param	extendedFeatures	string		Comma separated string of enum values denoting which features of the item need to be included in the MRSS 
 *		 .
 */
function KalturaObjectIdentifier(){
	this.extendedFeatures = null;
}
KalturaObjectIdentifier.inheritsFrom (KalturaObjectBase);


/**
 * @param	xpath	string		XPath for the extending item
 *		 .
 * @param	identifier	KalturaObjectIdentifier		Object identifier
 *		 .
 * @param	extensionMode	int		Mode of extension - append to MRSS or replace the xpath content.
 *		 .
 */
function KalturaExtendingItemMrssParameter(){
	this.xpath = null;
	this.identifier = null;
	this.extensionMode = null;
}
KalturaExtendingItemMrssParameter.inheritsFrom (KalturaObjectBase);


/**
 * @param	plays	int		Number of plays
 *		  (readOnly).
 * @param	views	int		Number of views
 *		  (readOnly).
 * @param	lastPlayedAt	int		The last time the entry was played
 *		  (readOnly).
 * @param	width	int		The width in pixels
 *		  (readOnly).
 * @param	height	int		The height in pixels
 *		  (readOnly).
 * @param	duration	int		The duration in seconds
 *		  (readOnly).
 * @param	msDuration	int		The duration in miliseconds
 *		 .
 * @param	durationType	string		The duration type (short for 0-4 mins, medium for 4-20 mins, long for 20+ mins)
 *		  (readOnly).
 */
function KalturaPlayableEntry(){
	this.plays = null;
	this.views = null;
	this.lastPlayedAt = null;
	this.width = null;
	this.height = null;
	this.duration = null;
	this.msDuration = null;
	this.durationType = null;
}
KalturaPlayableEntry.inheritsFrom (KalturaBaseEntry);


/**
 * @param	mediaType	int		The media type of the entry
 *		  (insertOnly).
 * @param	conversionQuality	string		Override the default conversion quality  
 *		  (insertOnly).
 * @param	sourceType	string		The source type of the entry 
 *		  (insertOnly).
 * @param	searchProviderType	int		The search provider type used to import this entry
 *		  (insertOnly).
 * @param	searchProviderId	string		The ID of the media in the importing site
 *		  (insertOnly).
 * @param	creditUserName	string		The user name used for credits
 *		 .
 * @param	creditUrl	string		The URL for credits
 *		 .
 * @param	mediaDate	int		The media date extracted from EXIF data (For images) as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	dataUrl	string		The URL used for playback. This is not the download URL.
 *		  (readOnly).
 * @param	flavorParamsIds	string		Comma separated flavor params ids that exists for this media entry
 *		  (readOnly).
 * @param	isTrimDisabled	int		True if trim action is disabled for this entry
 *		  (readOnly).
 */
function KalturaMediaEntry(){
	this.mediaType = null;
	this.conversionQuality = null;
	this.sourceType = null;
	this.searchProviderType = null;
	this.searchProviderId = null;
	this.creditUserName = null;
	this.creditUrl = null;
	this.mediaDate = null;
	this.dataUrl = null;
	this.flavorParamsIds = null;
	this.isTrimDisabled = null;
}
KalturaMediaEntry.inheritsFrom (KalturaPlayableEntry);


/**
 * @param	externalSourceType	string		The source type of the external media
 *		  (insertOnly).
 * @param	assetParamsIds	string		Comma separated asset params ids that exists for this external media entry
 *		  (readOnly).
 */
function KalturaExternalMediaEntry(){
	this.externalSourceType = null;
	this.assetParamsIds = null;
}
KalturaExternalMediaEntry.inheritsFrom (KalturaMediaEntry);


/**
 * @param	type	int		.
 * @param	value	int		.
 */
function KalturaFeatureStatus(){
	this.type = null;
	this.value = null;
}
KalturaFeatureStatus.inheritsFrom (KalturaObjectBase);


/**
 * @param	itemXPath	string		.
 * @param	itemPublishDateXPath	string		.
 * @param	itemUniqueIdentifierXPath	string		.
 * @param	itemContentFileSizeXPath	string		.
 * @param	itemContentUrlXPath	string		.
 * @param	itemContentBitrateXPath	string		.
 * @param	itemHashXPath	string		.
 * @param	itemContentXpath	string		.
 * @param	contentBitrateAttributeName	string		.
 */
function KalturaFeedItemInfo(){
	this.itemXPath = null;
	this.itemPublishDateXPath = null;
	this.itemUniqueIdentifierXPath = null;
	this.itemContentFileSizeXPath = null;
	this.itemContentUrlXPath = null;
	this.itemContentBitrateXPath = null;
	this.itemHashXPath = null;
	this.itemContentXpath = null;
	this.contentBitrateAttributeName = null;
}
KalturaFeedItemInfo.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	fileAssetObjectType	string		 (insertOnly).
 * @param	objectId	string		 (insertOnly).
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	fileExt	string		.
 * @param	version	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	status	string		 (readOnly).
 */
function KalturaFileAsset(){
	this.id = null;
	this.partnerId = null;
	this.fileAssetObjectType = null;
	this.objectId = null;
	this.name = null;
	this.systemName = null;
	this.fileExt = null;
	this.version = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.status = null;
}
KalturaFileAsset.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	fileObjectType	string		 (readOnly).
 * @param	objectId	string		 (readOnly).
 * @param	version	string		 (readOnly).
 * @param	objectSubType	int		 (readOnly).
 * @param	dc	string		 (readOnly).
 * @param	original	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	readyAt	int		 (readOnly).
 * @param	syncTime	int		 (readOnly).
 * @param	status	int		.
 * @param	fileType	int		 (readOnly).
 * @param	linkedId	int		 (readOnly).
 * @param	linkCount	int		 (readOnly).
 * @param	fileRoot	string		.
 * @param	filePath	string		.
 * @param	fileSize	float		 (readOnly).
 * @param	fileUrl	string		 (readOnly).
 * @param	fileContent	string		 (readOnly).
 * @param	fileDiscSize	float		 (readOnly).
 * @param	isCurrentDc	bool		 (readOnly).
 * @param	isDir	bool		 (readOnly).
 * @param	originalId	int		 (readOnly).
 */
function KalturaFileSync(){
	this.id = null;
	this.partnerId = null;
	this.fileObjectType = null;
	this.objectId = null;
	this.version = null;
	this.objectSubType = null;
	this.dc = null;
	this.original = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.readyAt = null;
	this.syncTime = null;
	this.status = null;
	this.fileType = null;
	this.linkedId = null;
	this.linkCount = null;
	this.fileRoot = null;
	this.filePath = null;
	this.fileSize = null;
	this.fileUrl = null;
	this.fileContent = null;
	this.fileDiscSize = null;
	this.isCurrentDc = null;
	this.isDir = null;
	this.originalId = null;
}
KalturaFileSync.inheritsFrom (KalturaObjectBase);


/**
 * @param	flavorParamsId	int		The Flavor Params used to create this Flavor Asset
 *		  (insertOnly).
 * @param	width	int		The width of the Flavor Asset 
 *		  (readOnly).
 * @param	height	int		The height of the Flavor Asset
 *		  (readOnly).
 * @param	bitrate	int		The overall bitrate (in KBits) of the Flavor Asset 
 *		  (readOnly).
 * @param	frameRate	float		The frame rate (in FPS) of the Flavor Asset
 *		  (readOnly).
 * @param	isOriginal	bool		True if this Flavor Asset is the original source
 *		  (readOnly).
 * @param	isWeb	bool		True if this Flavor Asset is playable in KDP
 *		  (readOnly).
 * @param	containerFormat	string		The container format
 *		  (readOnly).
 * @param	videoCodecId	string		The video codec
 *		  (readOnly).
 * @param	status	int		The status of the Flavor Asset
 *		  (readOnly).
 */
function KalturaFlavorAsset(){
	this.flavorParamsId = null;
	this.width = null;
	this.height = null;
	this.bitrate = null;
	this.frameRate = null;
	this.isOriginal = null;
	this.isWeb = null;
	this.containerFormat = null;
	this.videoCodecId = null;
	this.status = null;
}
KalturaFlavorAsset.inheritsFrom (KalturaAsset);


/**
 * @param	fileName	string		The name of the downloaded file
 *		 .
 */
function KalturaFlavorAssetUrlOptions(){
	this.fileName = null;
}
KalturaFlavorAssetUrlOptions.inheritsFrom (KalturaObjectBase);


/**
 * @param	videoCodec	string		The video codec of the Flavor Params
 *		 .
 * @param	videoBitrate	int		The video bitrate (in KBits) of the Flavor Params
 *		 .
 * @param	audioCodec	string		The audio codec of the Flavor Params
 *		 .
 * @param	audioBitrate	int		The audio bitrate (in KBits) of the Flavor Params
 *		 .
 * @param	audioChannels	int		The number of audio channels for "downmixing"
 *		 .
 * @param	audioSampleRate	int		The audio sample rate of the Flavor Params
 *		 .
 * @param	width	int		The desired width of the Flavor Params
 *		 .
 * @param	height	int		The desired height of the Flavor Params
 *		 .
 * @param	frameRate	float		The frame rate of the Flavor Params
 *		 .
 * @param	gopSize	int		The gop size of the Flavor Params
 *		 .
 * @param	conversionEngines	string		The list of conversion engines (comma separated)
 *		 .
 * @param	conversionEnginesExtraParams	string		The list of conversion engines extra params (separated with "|")
 *		 .
 * @param	twoPass	bool		.
 * @param	deinterlice	int		.
 * @param	rotate	int		.
 * @param	operators	string		.
 * @param	engineVersion	int		.
 * @param	format	string		The container format of the Flavor Params
 *		 .
 * @param	aspectRatioProcessingMode	int		.
 * @param	forceFrameToMultiplication16	int		.
 * @param	isGopInSec	int		.
 * @param	isAvoidVideoShrinkFramesizeToSource	int		.
 * @param	isAvoidVideoShrinkBitrateToSource	int		.
 * @param	isVideoFrameRateForLowBrAppleHls	int		.
 * @param	multiStream	string		.
 * @param	anamorphicPixels	float		.
 * @param	isAvoidForcedKeyFrames	int		.
 * @param	isCropIMX	int		.
 * @param	optimizationPolicy	int		.
 * @param	maxFrameRate	int		.
 * @param	videoConstantBitrate	int		.
 * @param	videoBitrateTolerance	int		.
 * @param	watermarkData	string		.
 * @param	clipOffset	int		.
 * @param	clipDuration	int		.
 */
function KalturaFlavorParams(){
	this.videoCodec = null;
	this.videoBitrate = null;
	this.audioCodec = null;
	this.audioBitrate = null;
	this.audioChannels = null;
	this.audioSampleRate = null;
	this.width = null;
	this.height = null;
	this.frameRate = null;
	this.gopSize = null;
	this.conversionEngines = null;
	this.conversionEnginesExtraParams = null;
	this.twoPass = null;
	this.deinterlice = null;
	this.rotate = null;
	this.operators = null;
	this.engineVersion = null;
	this.format = null;
	this.aspectRatioProcessingMode = null;
	this.forceFrameToMultiplication16 = null;
	this.isGopInSec = null;
	this.isAvoidVideoShrinkFramesizeToSource = null;
	this.isAvoidVideoShrinkBitrateToSource = null;
	this.isVideoFrameRateForLowBrAppleHls = null;
	this.multiStream = null;
	this.anamorphicPixels = null;
	this.isAvoidForcedKeyFrames = null;
	this.isCropIMX = null;
	this.optimizationPolicy = null;
	this.maxFrameRate = null;
	this.videoConstantBitrate = null;
	this.videoBitrateTolerance = null;
	this.watermarkData = null;
	this.clipOffset = null;
	this.clipDuration = null;
}
KalturaFlavorParams.inheritsFrom (KalturaAssetParams);


/**
 * @param	flavorAsset	KalturaFlavorAsset		The Flavor Asset (Can be null when there are params without asset)
 *		 .
 * @param	flavorParams	KalturaFlavorParams		The Flavor Params
 *		 .
 * @param	entryId	string		The entry id
 *		 .
 */
function KalturaFlavorAssetWithParams(){
	this.flavorAsset = null;
	this.flavorParams = null;
	this.entryId = null;
}
KalturaFlavorAssetWithParams.inheritsFrom (KalturaObjectBase);


/**
 * @param	flavorParamsId	int		.
 * @param	commandLinesStr	string		.
 * @param	flavorParamsVersion	string		.
 * @param	flavorAssetId	string		.
 * @param	flavorAssetVersion	string		.
 * @param	readyBehavior	int		.
 */
function KalturaFlavorParamsOutput(){
	this.flavorParamsId = null;
	this.commandLinesStr = null;
	this.flavorParamsVersion = null;
	this.flavorAssetId = null;
	this.flavorAssetVersion = null;
	this.readyBehavior = null;
}
KalturaFlavorParamsOutput.inheritsFrom (KalturaFlavorParams);


/**
 * @param	protocol	int		.
 * @param	serverUrl	string		.
 * @param	serverPath	string		.
 * @param	username	string		.
 * @param	password	string		.
 * @param	ftpPassiveMode	bool		.
 * @param	httpFieldName	string		.
 * @param	httpFileName	string		.
 */
function KalturaGenericDistributionProfileAction(){
	this.protocol = null;
	this.serverUrl = null;
	this.serverPath = null;
	this.username = null;
	this.password = null;
	this.ftpPassiveMode = null;
	this.httpFieldName = null;
	this.httpFileName = null;
}
KalturaGenericDistributionProfileAction.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		Auto generated
 *		  (readOnly).
 * @param	createdAt	int		Generic distribution provider action creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Generic distribution provider action last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	genericDistributionProviderId	int		 (insertOnly).
 * @param	action	int		 (insertOnly).
 * @param	status	int		 (readOnly).
 * @param	resultsParser	int		.
 * @param	protocol	int		.
 * @param	serverAddress	string		.
 * @param	remotePath	string		.
 * @param	remoteUsername	string		.
 * @param	remotePassword	string		.
 * @param	editableFields	string		.
 * @param	mandatoryFields	string		.
 * @param	mrssTransformer	string		 (readOnly).
 * @param	mrssValidator	string		 (readOnly).
 * @param	resultsTransformer	string		 (readOnly).
 */
function KalturaGenericDistributionProviderAction(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.genericDistributionProviderId = null;
	this.action = null;
	this.status = null;
	this.resultsParser = null;
	this.protocol = null;
	this.serverAddress = null;
	this.remotePath = null;
	this.remoteUsername = null;
	this.remotePassword = null;
	this.editableFields = null;
	this.mandatoryFields = null;
	this.mrssTransformer = null;
	this.mrssValidator = null;
	this.resultsTransformer = null;
}
KalturaGenericDistributionProviderAction.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		Auto generated
 *		  (readOnly).
 * @param	createdAt	int		Generic distribution provider creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Generic distribution provider last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	isDefault	bool		.
 * @param	status	int		 (readOnly).
 * @param	optionalFlavorParamsIds	string		.
 * @param	requiredFlavorParamsIds	string		.
 * @param	optionalThumbDimensions	array		.
 * @param	requiredThumbDimensions	array		.
 * @param	editableFields	string		.
 * @param	mandatoryFields	string		.
 */
function KalturaGenericDistributionProvider(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerId = null;
	this.isDefault = null;
	this.status = null;
	this.optionalFlavorParamsIds = null;
	this.requiredFlavorParamsIds = null;
	this.optionalThumbDimensions = null;
	this.requiredThumbDimensions = null;
	this.editableFields = null;
	this.mandatoryFields = null;
}
KalturaGenericDistributionProvider.inheritsFrom (KalturaDistributionProvider);


/**
 * @param	userId	string		 (insertOnly).
 * @param	groupId	string		 (insertOnly).
 * @param	status	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 */
function KalturaGroupUser(){
	this.userId = null;
	this.groupId = null;
	this.status = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaGroupUser.inheritsFrom (KalturaObjectBase);


/**
 * @param	relatedObjects	map		 (readOnly).
 */
function KalturaObject(){
	this.relatedObjects = null;
}
KalturaObject.inheritsFrom (KalturaObjectBase);


/**
 * @param	object	KalturaObjectBase		Object that triggered the notification
 *		 .
 * @param	eventObjectType	string		Object type that triggered the notification
 *		 .
 * @param	eventNotificationJobId	int		ID of the batch job that execute the notification
 *		 .
 * @param	templateId	int		ID of the template that triggered the notification
 *		 .
 * @param	templateName	string		Name of the template that triggered the notification
 *		 .
 * @param	templateSystemName	string		System name of the template that triggered the notification
 *		 .
 * @param	eventType	string		Ecent type that triggered the notification
 *		 .
 */
function KalturaHttpNotification(){
	this.object = null;
	this.eventObjectType = null;
	this.eventNotificationJobId = null;
	this.templateId = null;
	this.templateName = null;
	this.templateSystemName = null;
	this.eventType = null;
}
KalturaHttpNotification.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaHttpNotificationData(){
}
KalturaHttpNotificationData.inheritsFrom (KalturaObjectBase);


/**
 * @param	value	int		.
 */
function KalturaIntegerValue(){
	this.value = null;
}
KalturaIntegerValue.inheritsFrom (KalturaValue);


/**
 */
function KalturaIntegrationJobProviderData(){
}
KalturaIntegrationJobProviderData.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaIntegrationJobTriggerData(){
}
KalturaIntegrationJobTriggerData.inheritsFrom (KalturaObjectBase);


/**
 * @param	partner_id	int		.
 * @param	valid_until	int		.
 * @param	partner_pattern	string		.
 * @param	type	int		.
 * @param	error	string		.
 * @param	rand	int		.
 * @param	user	string		.
 * @param	privileges	string		.
 */
function KalturaInternalToolsSession(){
	this.partner_id = null;
	this.valid_until = null;
	this.partner_pattern = null;
	this.type = null;
	this.error = null;
	this.rand = null;
	this.user = null;
	this.privileges = null;
}
KalturaInternalToolsSession.inheritsFrom (KalturaObjectBase);


/**
 * @param	key	string		.
 * @param	value	bool		.
 */
function KalturaKeyBooleanValue(){
	this.key = null;
	this.value = null;
}
KalturaKeyBooleanValue.inheritsFrom (KalturaObjectBase);


/**
 * @param	entryId	string		The id of the entry that the like belongs to
 *		 .
 * @param	userId	string		The id of user that the like belongs to
 *		 .
 * @param	createdAt	int		The date of the like's creation
 *		 .
 */
function KalturaLike(){
	this.entryId = null;
	this.userId = null;
	this.createdAt = null;
}
KalturaLike.inheritsFrom (KalturaObjectBase);


/**
 * @param	protocol	string		.
 * @param	url	string		.
 * @param	publishUrl	string		.
 * @param	backupUrl	string		.
 * @param	streamName	string		.
 */
function KalturaLiveStreamConfiguration(){
	this.protocol = null;
	this.url = null;
	this.publishUrl = null;
	this.backupUrl = null;
	this.streamName = null;
}
KalturaLiveStreamConfiguration.inheritsFrom (KalturaObjectBase);


/**
 * @param	publishUrl	string		.
 * @param	backupPublishUrl	string		.
 * @param	port	string		.
 */
function KalturaLiveStreamPushPublishConfiguration(){
	this.publishUrl = null;
	this.backupPublishUrl = null;
	this.port = null;
}
KalturaLiveStreamPushPublishConfiguration.inheritsFrom (KalturaObjectBase);


/**
 * @param	shouldCopyEntitlement	int		.
 */
function KalturaLiveEntryRecordingOptions(){
	this.shouldCopyEntitlement = null;
}
KalturaLiveEntryRecordingOptions.inheritsFrom (KalturaObjectBase);


/**
 * @param	offlineMessage	string		The message to be presented when the stream is offline
 *		 .
 * @param	recordStatus	int		Recording Status Enabled/Disabled
 *		  (insertOnly).
 * @param	dvrStatus	int		DVR Status Enabled/Disabled
 *		  (insertOnly).
 * @param	dvrWindow	int		Window of time which the DVR allows for backwards scrubbing (in minutes)
 *		  (insertOnly).
 * @param	lastElapsedRecordingTime	int		Elapsed recording time (in msec) up to the point where the live stream was last stopped (unpublished).
 *		 .
 * @param	liveStreamConfigurations	array		Array of key value protocol->live stream url objects
 *		 .
 * @param	recordedEntryId	string		Recorded entry id
 *		 .
 * @param	pushPublishEnabled	int		Flag denoting whether entry should be published by the media server
 *		 .
 * @param	publishConfigurations	array		Array of publish configurations
 *		 .
 * @param	firstBroadcast	int		The first time in which the entry was broadcast
 *		  (readOnly).
 * @param	lastBroadcast	int		The Last time in which the entry was broadcast
 *		  (readOnly).
 * @param	currentBroadcastStartTime	float		The time (unix timestamp in milliseconds) in which the entry broadcast started or 0 when the entry is off the air
 *		 .
 * @param	recordingOptions	KalturaLiveEntryRecordingOptions		 (insertOnly).
 * @param	liveStatus	int		the status of the entry of type LiveEntryStatus
 *		 .
 */
function KalturaLiveEntry(){
	this.offlineMessage = null;
	this.recordStatus = null;
	this.dvrStatus = null;
	this.dvrWindow = null;
	this.lastElapsedRecordingTime = null;
	this.liveStreamConfigurations = null;
	this.recordedEntryId = null;
	this.pushPublishEnabled = null;
	this.publishConfigurations = null;
	this.firstBroadcast = null;
	this.lastBroadcast = null;
	this.currentBroadcastStartTime = null;
	this.recordingOptions = null;
	this.liveStatus = null;
}
KalturaLiveEntry.inheritsFrom (KalturaMediaEntry);


/**
 * @param	playlistId	string		Playlist id to be played
 *		 .
 * @param	repeat	int		Indicates that the segments should be repeated for ever
 *		 .
 */
function KalturaLiveChannel(){
	this.playlistId = null;
	this.repeat = null;
}
KalturaLiveChannel.inheritsFrom (KalturaLiveEntry);


/**
 * @param	id	string		Unique identifier
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		Segment creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Segment update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	name	string		Segment name
 *		 .
 * @param	description	string		Segment description
 *		 .
 * @param	tags	string		Segment tags
 *		 .
 * @param	type	string		Segment could be associated with the main stream, as additional stream or as overlay
 *		 .
 * @param	status	string		 (readOnly).
 * @param	channelId	string		Live channel id
 *		 .
 * @param	entryId	string		Entry id to be played
 *		 .
 * @param	triggerType	string		Segment start time trigger type
 *		 .
 * @param	triggerSegmentId	string		Live channel segment that the trigger relates to
 *		 .
 * @param	startTime	float		Segment play start time, in mili-seconds, according to trigger type
 *		 .
 * @param	duration	float		Segment play duration time, in mili-seconds
 *		 .
 */
function KalturaLiveChannelSegment(){
	this.id = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.name = null;
	this.description = null;
	this.tags = null;
	this.type = null;
	this.status = null;
	this.channelId = null;
	this.entryId = null;
	this.triggerType = null;
	this.triggerSegmentId = null;
	this.startTime = null;
	this.duration = null;
}
KalturaLiveChannelSegment.inheritsFrom (KalturaObjectBase);


/**
 * @param	entryIds	string		.
 * @param	recpientEmail	string		.
 * @param	timeZoneOffset	int		Time zone offset in minutes (between client to UTC)
 *		 .
 * @param	applicationUrlTemplate	string		Optional argument that allows controlling the prefix of the exported csv url
 *		 .
 */
function KalturaLiveReportExportParams(){
	this.entryIds = null;
	this.recpientEmail = null;
	this.timeZoneOffset = null;
	this.applicationUrlTemplate = null;
}
KalturaLiveReportExportParams.inheritsFrom (KalturaObjectBase);


/**
 * @param	referenceJobId	int		.
 * @param	reportEmail	string		.
 */
function KalturaLiveReportExportResponse(){
	this.referenceJobId = null;
	this.reportEmail = null;
}
KalturaLiveReportExportResponse.inheritsFrom (KalturaObjectBase);


/**
 * @param	entryIds	string		.
 * @param	fromTime	int		.
 * @param	toTime	int		.
 * @param	live	int		.
 * @param	orderBy	string		.
 */
function KalturaLiveReportInputFilter(){
	this.entryIds = null;
	this.fromTime = null;
	this.toTime = null;
	this.live = null;
	this.orderBy = null;
}
KalturaLiveReportInputFilter.inheritsFrom (KalturaObjectBase);


/**
 * @param	audience	int		.
 * @param	dvrAudience	int		.
 * @param	avgBitrate	float		.
 * @param	bufferTime	int		.
 * @param	plays	int		.
 * @param	secondsViewed	int		.
 * @param	startEvent	int		.
 * @param	timestamp	int		.
 */
function KalturaLiveStats(){
	this.audience = null;
	this.dvrAudience = null;
	this.avgBitrate = null;
	this.bufferTime = null;
	this.plays = null;
	this.secondsViewed = null;
	this.startEvent = null;
	this.timestamp = null;
}
KalturaLiveStats.inheritsFrom (KalturaObjectBase);


/**
 * @param	partnerId	int		.
 * @param	entryId	string		.
 * @param	eventType	int		an integer representing the type of event being sent from the player
 *		 .
 * @param	sessionId	string		a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
 *		 .
 * @param	eventIndex	int		incremental sequence of the event
 *		 .
 * @param	bufferTime	int		buffer time in seconds from the last 10 seconds
 *		 .
 * @param	bitrate	int		bitrate used in the last 10 seconds
 *		 .
 * @param	referrer	string		the referrer of the client
 *		 .
 * @param	isLive	bool		.
 * @param	startTime	string		the event start time as string
 *		 .
 * @param	deliveryType	string		delivery type used for this stream
 *		 .
 */
function KalturaLiveStatsEvent(){
	this.partnerId = null;
	this.entryId = null;
	this.eventType = null;
	this.sessionId = null;
	this.eventIndex = null;
	this.bufferTime = null;
	this.bitrate = null;
	this.referrer = null;
	this.isLive = null;
	this.startTime = null;
	this.deliveryType = null;
}
KalturaLiveStatsEvent.inheritsFrom (KalturaObjectBase);


/**
 * @param	bitrate	int		.
 * @param	width	int		.
 * @param	height	int		.
 * @param	tags	string		.
 */
function KalturaLiveStreamBitrate(){
	this.bitrate = null;
	this.width = null;
	this.height = null;
	this.tags = null;
}
KalturaLiveStreamBitrate.inheritsFrom (KalturaObjectBase);


/**
 * @param	streamRemoteId	string		The stream id as provided by the provider
 *		  (readOnly).
 * @param	streamRemoteBackupId	string		The backup stream id as provided by the provider
 *		  (readOnly).
 * @param	bitrates	array		Array of supported bitrates
 *		 .
 * @param	primaryBroadcastingUrl	string		.
 * @param	secondaryBroadcastingUrl	string		.
 * @param	primaryRtspBroadcastingUrl	string		.
 * @param	secondaryRtspBroadcastingUrl	string		.
 * @param	streamName	string		.
 * @param	streamUrl	string		The stream url
 *		 .
 * @param	hlsStreamUrl	string		HLS URL - URL for live stream playback on mobile device
 *		 .
 * @param	urlManager	string		URL Manager to handle the live stream URL (for instance, add token)
 *		 .
 * @param	encodingIP1	string		The broadcast primary ip
 *		 .
 * @param	encodingIP2	string		The broadcast secondary ip
 *		 .
 * @param	streamPassword	string		The broadcast password
 *		 .
 * @param	streamUsername	string		The broadcast username
 *		  (readOnly).
 */
function KalturaLiveStreamEntry(){
	this.streamRemoteId = null;
	this.streamRemoteBackupId = null;
	this.bitrates = null;
	this.primaryBroadcastingUrl = null;
	this.secondaryBroadcastingUrl = null;
	this.primaryRtspBroadcastingUrl = null;
	this.secondaryRtspBroadcastingUrl = null;
	this.streamName = null;
	this.streamUrl = null;
	this.hlsStreamUrl = null;
	this.urlManager = null;
	this.encodingIP1 = null;
	this.encodingIP2 = null;
	this.streamPassword = null;
	this.streamUsername = null;
}
KalturaLiveStreamEntry.inheritsFrom (KalturaLiveEntry);


/**
 * @param	idEqual	string		This filter should be in use for retrieving only a specific entry (identified by its entryId).
 *		 .
 * @param	idIn	string		This filter should be in use for retrieving few specific entries (string should include comma separated list of entryId strings).
 *		 .
 * @param	idNotIn	string		.
 * @param	nameLike	string		This filter should be in use for retrieving specific entries. It should include only one string to search for in entry names (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	nameMultiLikeOr	string		This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry names, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	nameMultiLikeAnd	string		This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry names, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	nameEqual	string		This filter should be in use for retrieving entries with a specific name.
 *		 .
 * @param	partnerIdEqual	int		This filter should be in use for retrieving only entries which were uploaded by/assigned to users of a specific Kaltura Partner (identified by Partner ID).
 *		 .
 * @param	partnerIdIn	string		This filter should be in use for retrieving only entries within Kaltura network which were uploaded by/assigned to users of few Kaltura Partners  (string should include comma separated list of PartnerIDs)
 *		 .
 * @param	userIdEqual	string		This filter parameter should be in use for retrieving only entries, uploaded by/assigned to a specific user (identified by user Id).
 *		 .
 * @param	userIdIn	string		.
 * @param	creatorIdEqual	string		.
 * @param	tagsLike	string		This filter should be in use for retrieving specific entries. It should include only one string to search for in entry tags (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	tagsMultiLikeOr	string		This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	tagsMultiLikeAnd	string		This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	adminTagsLike	string		This filter should be in use for retrieving specific entries. It should include only one string to search for in entry tags set by an ADMIN user (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	adminTagsMultiLikeOr	string		This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, set by an ADMIN user, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	adminTagsMultiLikeAnd	string		This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, set by an ADMIN user, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
 *		 .
 * @param	categoriesMatchAnd	string		.
 * @param	categoriesMatchOr	string		All entries within these categories or their child categories.
 *		 .
 * @param	categoriesNotContains	string		.
 * @param	categoriesIdsMatchAnd	string		.
 * @param	categoriesIdsMatchOr	string		All entries of the categories, excluding their child categories.
 *		 To include entries of the child categories, use categoryAncestorIdIn, or categoriesMatchOr.
 *		 .
 * @param	categoriesIdsNotContains	string		.
 * @param	categoriesIdsEmpty	int		.
 * @param	statusEqual	string		This filter should be in use for retrieving only entries, at a specific {.
 * @param	statusNotEqual	string		This filter should be in use for retrieving only entries, not at a specific {.
 * @param	statusIn	string		This filter should be in use for retrieving only entries, at few specific {.
 * @param	statusNotIn	string		This filter should be in use for retrieving only entries, not at few specific {.
 * @param	moderationStatusEqual	int		.
 * @param	moderationStatusNotEqual	int		.
 * @param	moderationStatusIn	string		.
 * @param	moderationStatusNotIn	string		.
 * @param	typeEqual	string		.
 * @param	typeIn	string		This filter should be in use for retrieving entries of few {.
 * @param	createdAtGreaterThanOrEqual	int		This filter parameter should be in use for retrieving only entries which were created at Kaltura system after a specific time/date (standard timestamp format).
 *		 .
 * @param	createdAtLessThanOrEqual	int		This filter parameter should be in use for retrieving only entries which were created at Kaltura system before a specific time/date (standard timestamp format).
 *		 .
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	totalRankLessThanOrEqual	int		.
 * @param	totalRankGreaterThanOrEqual	int		.
 * @param	groupIdEqual	int		.
 * @param	searchTextMatchAnd	string		This filter should be in use for retrieving specific entries while search match the input string within all of the following metadata attributes: name, description, tags, adminTags.
 *		 .
 * @param	searchTextMatchOr	string		This filter should be in use for retrieving specific entries while search match the input string within at least one of the following metadata attributes: name, description, tags, adminTags.
 *		 .
 * @param	accessControlIdEqual	int		.
 * @param	accessControlIdIn	string		.
 * @param	startDateGreaterThanOrEqual	int		.
 * @param	startDateLessThanOrEqual	int		.
 * @param	startDateGreaterThanOrEqualOrNull	int		.
 * @param	startDateLessThanOrEqualOrNull	int		.
 * @param	endDateGreaterThanOrEqual	int		.
 * @param	endDateLessThanOrEqual	int		.
 * @param	endDateGreaterThanOrEqualOrNull	int		.
 * @param	endDateLessThanOrEqualOrNull	int		.
 * @param	referenceIdEqual	string		.
 * @param	referenceIdIn	string		.
 * @param	replacingEntryIdEqual	string		.
 * @param	replacingEntryIdIn	string		.
 * @param	replacedEntryIdEqual	string		.
 * @param	replacedEntryIdIn	string		.
 * @param	replacementStatusEqual	string		.
 * @param	replacementStatusIn	string		.
 * @param	partnerSortValueGreaterThanOrEqual	int		.
 * @param	partnerSortValueLessThanOrEqual	int		.
 * @param	rootEntryIdEqual	string		.
 * @param	rootEntryIdIn	string		.
 * @param	parentEntryIdEqual	string		.
 * @param	entitledUsersEditMatchAnd	string		.
 * @param	entitledUsersPublishMatchAnd	string		.
 * @param	tagsNameMultiLikeOr	string		.
 * @param	tagsAdminTagsMultiLikeOr	string		.
 * @param	tagsAdminTagsNameMultiLikeOr	string		.
 * @param	tagsNameMultiLikeAnd	string		.
 * @param	tagsAdminTagsMultiLikeAnd	string		.
 * @param	tagsAdminTagsNameMultiLikeAnd	string		.
 */
function KalturaBaseEntryBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.idNotIn = null;
	this.nameLike = null;
	this.nameMultiLikeOr = null;
	this.nameMultiLikeAnd = null;
	this.nameEqual = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.userIdEqual = null;
	this.userIdIn = null;
	this.creatorIdEqual = null;
	this.tagsLike = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.adminTagsLike = null;
	this.adminTagsMultiLikeOr = null;
	this.adminTagsMultiLikeAnd = null;
	this.categoriesMatchAnd = null;
	this.categoriesMatchOr = null;
	this.categoriesNotContains = null;
	this.categoriesIdsMatchAnd = null;
	this.categoriesIdsMatchOr = null;
	this.categoriesIdsNotContains = null;
	this.categoriesIdsEmpty = null;
	this.statusEqual = null;
	this.statusNotEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
	this.moderationStatusEqual = null;
	this.moderationStatusNotEqual = null;
	this.moderationStatusIn = null;
	this.moderationStatusNotIn = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.totalRankLessThanOrEqual = null;
	this.totalRankGreaterThanOrEqual = null;
	this.groupIdEqual = null;
	this.searchTextMatchAnd = null;
	this.searchTextMatchOr = null;
	this.accessControlIdEqual = null;
	this.accessControlIdIn = null;
	this.startDateGreaterThanOrEqual = null;
	this.startDateLessThanOrEqual = null;
	this.startDateGreaterThanOrEqualOrNull = null;
	this.startDateLessThanOrEqualOrNull = null;
	this.endDateGreaterThanOrEqual = null;
	this.endDateLessThanOrEqual = null;
	this.endDateGreaterThanOrEqualOrNull = null;
	this.endDateLessThanOrEqualOrNull = null;
	this.referenceIdEqual = null;
	this.referenceIdIn = null;
	this.replacingEntryIdEqual = null;
	this.replacingEntryIdIn = null;
	this.replacedEntryIdEqual = null;
	this.replacedEntryIdIn = null;
	this.replacementStatusEqual = null;
	this.replacementStatusIn = null;
	this.partnerSortValueGreaterThanOrEqual = null;
	this.partnerSortValueLessThanOrEqual = null;
	this.rootEntryIdEqual = null;
	this.rootEntryIdIn = null;
	this.parentEntryIdEqual = null;
	this.entitledUsersEditMatchAnd = null;
	this.entitledUsersPublishMatchAnd = null;
	this.tagsNameMultiLikeOr = null;
	this.tagsAdminTagsMultiLikeOr = null;
	this.tagsAdminTagsNameMultiLikeOr = null;
	this.tagsNameMultiLikeAnd = null;
	this.tagsAdminTagsMultiLikeAnd = null;
	this.tagsAdminTagsNameMultiLikeAnd = null;
}
KalturaBaseEntryBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	freeText	string		.
 * @param	isRoot	int		.
 * @param	categoriesFullNameIn	string		.
 * @param	categoryAncestorIdIn	string		All entries within this categoy or in child categories  
 *		 .
 * @param	redirectFromEntryId	string		The id of the original entry
 *		 .
 */
function KalturaBaseEntryFilter(){
	this.freeText = null;
	this.isRoot = null;
	this.categoriesFullNameIn = null;
	this.categoryAncestorIdIn = null;
	this.redirectFromEntryId = null;
}
KalturaBaseEntryFilter.inheritsFrom (KalturaBaseEntryBaseFilter);


/**
 * @param	lastPlayedAtGreaterThanOrEqual	int		.
 * @param	lastPlayedAtLessThanOrEqual	int		.
 * @param	durationLessThan	int		.
 * @param	durationGreaterThan	int		.
 * @param	durationLessThanOrEqual	int		.
 * @param	durationGreaterThanOrEqual	int		.
 * @param	durationTypeMatchOr	string		.
 */
function KalturaPlayableEntryBaseFilter(){
	this.lastPlayedAtGreaterThanOrEqual = null;
	this.lastPlayedAtLessThanOrEqual = null;
	this.durationLessThan = null;
	this.durationGreaterThan = null;
	this.durationLessThanOrEqual = null;
	this.durationGreaterThanOrEqual = null;
	this.durationTypeMatchOr = null;
}
KalturaPlayableEntryBaseFilter.inheritsFrom (KalturaBaseEntryFilter);


/**
 */
function KalturaPlayableEntryFilter(){
}
KalturaPlayableEntryFilter.inheritsFrom (KalturaPlayableEntryBaseFilter);


/**
 * @param	mediaTypeEqual	int		.
 * @param	mediaTypeIn	string		.
 * @param	sourceTypeEqual	string		.
 * @param	sourceTypeNotEqual	string		.
 * @param	sourceTypeIn	string		.
 * @param	sourceTypeNotIn	string		.
 * @param	mediaDateGreaterThanOrEqual	int		.
 * @param	mediaDateLessThanOrEqual	int		.
 * @param	flavorParamsIdsMatchOr	string		.
 * @param	flavorParamsIdsMatchAnd	string		.
 */
function KalturaMediaEntryBaseFilter(){
	this.mediaTypeEqual = null;
	this.mediaTypeIn = null;
	this.sourceTypeEqual = null;
	this.sourceTypeNotEqual = null;
	this.sourceTypeIn = null;
	this.sourceTypeNotIn = null;
	this.mediaDateGreaterThanOrEqual = null;
	this.mediaDateLessThanOrEqual = null;
	this.flavorParamsIdsMatchOr = null;
	this.flavorParamsIdsMatchAnd = null;
}
KalturaMediaEntryBaseFilter.inheritsFrom (KalturaPlayableEntryFilter);


/**
 */
function KalturaMediaEntryFilter(){
}
KalturaMediaEntryFilter.inheritsFrom (KalturaMediaEntryBaseFilter);


/**
 * @param	limit	int		.
 */
function KalturaMediaEntryFilterForPlaylist(){
	this.limit = null;
}
KalturaMediaEntryFilterForPlaylist.inheritsFrom (KalturaMediaEntryFilter);


/**
 * @param	id	int		The id of the media info
 *		  (readOnly).
 * @param	flavorAssetId	string		The id of the related flavor asset
 *		 .
 * @param	fileSize	int		The file size
 *		 .
 * @param	containerFormat	string		The container format
 *		 .
 * @param	containerId	string		The container id
 *		 .
 * @param	containerProfile	string		The container profile
 *		 .
 * @param	containerDuration	int		The container duration
 *		 .
 * @param	containerBitRate	int		The container bit rate
 *		 .
 * @param	videoFormat	string		The video format
 *		 .
 * @param	videoCodecId	string		The video codec id
 *		 .
 * @param	videoDuration	int		The video duration
 *		 .
 * @param	videoBitRate	int		The video bit rate
 *		 .
 * @param	videoBitRateMode	int		The video bit rate mode
 *		 .
 * @param	videoWidth	int		The video width
 *		 .
 * @param	videoHeight	int		The video height
 *		 .
 * @param	videoFrameRate	float		The video frame rate
 *		 .
 * @param	videoDar	float		The video display aspect ratio (dar)
 *		 .
 * @param	videoRotation	int		.
 * @param	audioFormat	string		The audio format
 *		 .
 * @param	audioCodecId	string		The audio codec id
 *		 .
 * @param	audioDuration	int		The audio duration
 *		 .
 * @param	audioBitRate	int		The audio bit rate
 *		 .
 * @param	audioBitRateMode	int		The audio bit rate mode
 *		 .
 * @param	audioChannels	int		The number of audio channels
 *		 .
 * @param	audioSamplingRate	int		The audio sampling rate
 *		 .
 * @param	audioResolution	int		The audio resolution
 *		 .
 * @param	writingLib	string		The writing library
 *		 .
 * @param	rawData	string		The data as returned by the mediainfo command line
 *		 .
 * @param	multiStreamInfo	string		.
 * @param	scanType	int		.
 * @param	multiStream	string		.
 * @param	isFastStart	int		.
 * @param	contentStreams	string		.
 */
function KalturaMediaInfo(){
	this.id = null;
	this.flavorAssetId = null;
	this.fileSize = null;
	this.containerFormat = null;
	this.containerId = null;
	this.containerProfile = null;
	this.containerDuration = null;
	this.containerBitRate = null;
	this.videoFormat = null;
	this.videoCodecId = null;
	this.videoDuration = null;
	this.videoBitRate = null;
	this.videoBitRateMode = null;
	this.videoWidth = null;
	this.videoHeight = null;
	this.videoFrameRate = null;
	this.videoDar = null;
	this.videoRotation = null;
	this.audioFormat = null;
	this.audioCodecId = null;
	this.audioDuration = null;
	this.audioBitRate = null;
	this.audioBitRateMode = null;
	this.audioChannels = null;
	this.audioSamplingRate = null;
	this.audioResolution = null;
	this.writingLib = null;
	this.rawData = null;
	this.multiStreamInfo = null;
	this.scanType = null;
	this.multiStream = null;
	this.isFastStart = null;
	this.contentStreams = null;
}
KalturaMediaInfo.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	metadataProfileId	int		 (readOnly).
 * @param	metadataProfileVersion	int		 (readOnly).
 * @param	metadataObjectType	string		 (readOnly).
 * @param	objectId	string		 (readOnly).
 * @param	version	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	status	int		 (readOnly).
 * @param	xml	string		 (readOnly).
 */
function KalturaMetadata(){
	this.id = null;
	this.partnerId = null;
	this.metadataProfileId = null;
	this.metadataProfileVersion = null;
	this.metadataObjectType = null;
	this.objectId = null;
	this.version = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.status = null;
	this.xml = null;
}
KalturaMetadata.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	metadataObjectType	string		.
 * @param	version	int		 (readOnly).
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	description	string		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	status	int		 (readOnly).
 * @param	xsd	string		 (readOnly).
 * @param	views	string		 (readOnly).
 * @param	xslt	string		 (readOnly).
 * @param	createMode	int		.
 * @param	disableReIndexing	bool		.
 */
function KalturaMetadataProfile(){
	this.id = null;
	this.partnerId = null;
	this.metadataObjectType = null;
	this.version = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.status = null;
	this.xsd = null;
	this.views = null;
	this.xslt = null;
	this.createMode = null;
	this.disableReIndexing = null;
}
KalturaMetadataProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	xPath	string		 (readOnly).
 * @param	key	string		 (readOnly).
 * @param	label	string		 (readOnly).
 */
function KalturaMetadataProfileField(){
	this.id = null;
	this.xPath = null;
	this.key = null;
	this.label = null;
}
KalturaMetadataProfileField.inheritsFrom (KalturaObjectBase);


/**
 * @param	hasRealThumbnail	bool		Indicates whether the user has submited a real thumbnail to the mix (Not the one that was generated automaticaly)
 *		  (readOnly).
 * @param	editorType	int		The editor type used to edit the metadata
 *		 .
 * @param	dataContent	string		The xml data of the mix
 *		 .
 */
function KalturaMixEntry(){
	this.hasRealThumbnail = null;
	this.editorType = null;
	this.dataContent = null;
}
KalturaMixEntry.inheritsFrom (KalturaPlayableEntry);


/**
 * @param	id	int		Moderation flag id
 *		  (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	userId	string		The user id that added the moderation flag
 *		  (readOnly).
 * @param	moderationObjectType	string		The type of the moderation flag (entry or user)
 *		  (readOnly).
 * @param	flaggedEntryId	string		If moderation flag is set for entry, this is the flagged entry id
 *		 .
 * @param	flaggedUserId	string		If moderation flag is set for user, this is the flagged user id
 *		 .
 * @param	status	string		The moderation flag status
 *		  (readOnly).
 * @param	comments	string		The comment that was added to the flag
 *		 .
 * @param	flagType	int		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 */
function KalturaModerationFlag(){
	this.id = null;
	this.partnerId = null;
	this.userId = null;
	this.moderationObjectType = null;
	this.flaggedEntryId = null;
	this.flaggedUserId = null;
	this.status = null;
	this.comments = null;
	this.flagType = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaModerationFlag.inheritsFrom (KalturaObjectBase);


/**
 * @param	type	string		 (readOnly).
 * @param	stopProcessingOnError	bool		.
 */
function KalturaObjectTask(){
	this.type = null;
	this.stopProcessingOnError = null;
}
KalturaObjectTask.inheritsFrom (KalturaObjectBase);


/**
 * @param	key	string		.
 * @param	text	string		.
 * @param	weight	float		.
 * @param	isCorrect	int		.
 */
function KalturaOptionalAnswer(){
	this.key = null;
	this.text = null;
	this.weight = null;
	this.isCorrect = null;
}
KalturaOptionalAnswer.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	label	string		.
 * @param	flashvars	array		.
 * @param	minVersion	string		.
 * @param	enabledByDefault	bool		.
 */
function KalturaPlayerDeliveryType(){
	this.id = null;
	this.label = null;
	this.flashvars = null;
	this.minVersion = null;
	this.enabledByDefault = null;
}
KalturaPlayerDeliveryType.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	label	string		.
 * @param	entryOnly	bool		.
 * @param	minVersion	string		.
 */
function KalturaPlayerEmbedCodeType(){
	this.id = null;
	this.label = null;
	this.entryOnly = null;
	this.minVersion = null;
}
KalturaPlayerEmbedCodeType.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	name	string		.
 * @param	website	string		.
 * @param	notificationUrl	string		.
 * @param	appearInSearch	int		.
 * @param	createdAt	int		 (readOnly).
 * @param	adminName	string		deprecated - lastName and firstName replaces this field
 *		 .
 * @param	adminEmail	string		.
 * @param	description	string		.
 * @param	commercialUse	int		.
 * @param	landingPage	string		.
 * @param	userLandingPage	string		.
 * @param	contentCategories	string		.
 * @param	type	int		.
 * @param	phone	string		.
 * @param	describeYourself	string		.
 * @param	adultContent	bool		.
 * @param	defConversionProfileType	string		.
 * @param	notify	int		.
 * @param	status	int		 (readOnly).
 * @param	allowQuickEdit	int		.
 * @param	mergeEntryLists	int		.
 * @param	notificationsConfig	string		.
 * @param	maxUploadSize	int		.
 * @param	partnerPackage	int		 (readOnly).
 * @param	secret	string		 (readOnly).
 * @param	adminSecret	string		 (readOnly).
 * @param	cmsPassword	string		 (readOnly).
 * @param	allowMultiNotification	int		.
 * @param	adminLoginUsersQuota	int		 (readOnly).
 * @param	adminUserId	string		.
 * @param	firstName	string		firstName and lastName replace the old (deprecated) adminName
 *		 .
 * @param	lastName	string		lastName and firstName replace the old (deprecated) adminName
 *		 .
 * @param	country	string		country code (2char) - this field is optional
 *		 .
 * @param	state	string		state code (2char) - this field is optional
 *		 .
 * @param	additionalParams	array		 (insertOnly).
 * @param	publishersQuota	int		 (readOnly).
 * @param	partnerGroupType	int		 (readOnly).
 * @param	defaultEntitlementEnforcement	bool		 (readOnly).
 * @param	defaultDeliveryType	string		 (readOnly).
 * @param	defaultEmbedCodeType	string		 (readOnly).
 * @param	deliveryTypes	array		 (readOnly).
 * @param	embedCodeTypes	array		 (readOnly).
 * @param	templatePartnerId	int		 (readOnly).
 * @param	ignoreSeoLinks	bool		 (readOnly).
 * @param	host	string		 (readOnly).
 * @param	cdnHost	string		 (readOnly).
 * @param	isFirstLogin	bool		 (readOnly).
 * @param	logoutUrl	string		 (readOnly).
 * @param	partnerParentId	int		 (readOnly).
 * @param	crmId	string		 (readOnly).
 * @param	referenceId	string		.
 * @param	timeAlignedRenditions	bool		 (readOnly).
 */
function KalturaPartner(){
	this.id = null;
	this.name = null;
	this.website = null;
	this.notificationUrl = null;
	this.appearInSearch = null;
	this.createdAt = null;
	this.adminName = null;
	this.adminEmail = null;
	this.description = null;
	this.commercialUse = null;
	this.landingPage = null;
	this.userLandingPage = null;
	this.contentCategories = null;
	this.type = null;
	this.phone = null;
	this.describeYourself = null;
	this.adultContent = null;
	this.defConversionProfileType = null;
	this.notify = null;
	this.status = null;
	this.allowQuickEdit = null;
	this.mergeEntryLists = null;
	this.notificationsConfig = null;
	this.maxUploadSize = null;
	this.partnerPackage = null;
	this.secret = null;
	this.adminSecret = null;
	this.cmsPassword = null;
	this.allowMultiNotification = null;
	this.adminLoginUsersQuota = null;
	this.adminUserId = null;
	this.firstName = null;
	this.lastName = null;
	this.country = null;
	this.state = null;
	this.additionalParams = null;
	this.publishersQuota = null;
	this.partnerGroupType = null;
	this.defaultEntitlementEnforcement = null;
	this.defaultDeliveryType = null;
	this.defaultEmbedCodeType = null;
	this.deliveryTypes = null;
	this.embedCodeTypes = null;
	this.templatePartnerId = null;
	this.ignoreSeoLinks = null;
	this.host = null;
	this.cdnHost = null;
	this.isFirstLogin = null;
	this.logoutUrl = null;
	this.partnerParentId = null;
	this.crmId = null;
	this.referenceId = null;
	this.timeAlignedRenditions = null;
}
KalturaPartner.inheritsFrom (KalturaObjectBase);


/**
 * @param	packageBandwidthAndStorage	int		Package total allowed bandwidth and storage
 *		  (readOnly).
 * @param	hosting	float		Partner total hosting in GB on the disk
 *		  (readOnly).
 * @param	bandwidth	float		Partner total bandwidth in GB
 *		  (readOnly).
 * @param	usage	int		total usage in GB - including bandwidth and storage
 *		  (readOnly).
 * @param	usagePercent	float		Percent of usage out of partner's package. if usage is 5GB and package is 10GB, this value will be 50
 *		  (readOnly).
 * @param	reachedLimitDate	int		date when partner reached the limit of his package (timestamp)
 *		  (readOnly).
 */
function KalturaPartnerStatistics(){
	this.packageBandwidthAndStorage = null;
	this.hosting = null;
	this.bandwidth = null;
	this.usage = null;
	this.usagePercent = null;
	this.reachedLimitDate = null;
}
KalturaPartnerStatistics.inheritsFrom (KalturaObjectBase);


/**
 * @param	hostingGB	float		Partner total hosting in GB on the disk
 *		  (readOnly).
 * @param	Percent	float		percent of usage out of partner's package. if usageGB is 5 and package is 10GB, this value will be 50
 *		  (readOnly).
 * @param	packageBW	int		package total BW - actually this is usage, which represents BW+storage
 *		  (readOnly).
 * @param	usageGB	float		total usage in GB - including bandwidth and storage
 *		  (readOnly).
 * @param	reachedLimitDate	int		date when partner reached the limit of his package (timestamp)
 *		  (readOnly).
 * @param	usageGraph	string		a semi-colon separated list of comma-separated key-values to represent a usage graph.
 *		 keys could be 1-12 for a year view (1,1.2;2,1.1;3,0.9;...;12,1.4;)
 *		 keys could be 1-[28,29,30,31] depending on the requested month, for a daily view in a given month (1,0.4;2,0.2;...;31,0.1;)
 *		  (readOnly).
 */
function KalturaPartnerUsage(){
	this.hostingGB = null;
	this.Percent = null;
	this.packageBW = null;
	this.usageGB = null;
	this.reachedLimitDate = null;
	this.usageGraph = null;
}
KalturaPartnerUsage.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	type	int		 (readOnly).
 * @param	name	string		.
 * @param	friendlyName	string		.
 * @param	description	string		.
 * @param	status	int		.
 * @param	partnerId	int		 (readOnly).
 * @param	dependsOnPermissionNames	string		.
 * @param	tags	string		.
 * @param	permissionItemsIds	string		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	partnerGroup	string		.
 */
function KalturaPermission(){
	this.id = null;
	this.type = null;
	this.name = null;
	this.friendlyName = null;
	this.description = null;
	this.status = null;
	this.partnerId = null;
	this.dependsOnPermissionNames = null;
	this.tags = null;
	this.permissionItemsIds = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerGroup = null;
}
KalturaPermission.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	type	string		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	tags	string		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 */
function KalturaPermissionItem(){
	this.id = null;
	this.type = null;
	this.partnerId = null;
	this.tags = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaPermissionItem.inheritsFrom (KalturaObjectBase);


/**
 * @param	playlistContent	string		Content of the playlist - 
 *		 XML if the playlistType is dynamic 
 *		 text if the playlistType is static 
 *		 url if the playlistType is mRss 
 *		 .
 * @param	filters	array		.
 * @param	totalResults	int		Maximum count of results to be returned in playlist execution
 *		 .
 * @param	playlistType	int		Type of playlist
 *		 .
 * @param	plays	int		Number of plays
 *		  (readOnly).
 * @param	views	int		Number of views
 *		  (readOnly).
 * @param	duration	int		The duration in seconds
 *		  (readOnly).
 * @param	executeUrl	string		The url for this playlist
 *		  (readOnly).
 */
function KalturaPlaylist(){
	this.playlistContent = null;
	this.filters = null;
	this.totalResults = null;
	this.playlistType = null;
	this.plays = null;
	this.views = null;
	this.duration = null;
	this.executeUrl = null;
}
KalturaPlaylist.inheritsFrom (KalturaBaseEntry);


/**
 */
function KalturaPluginData(){
}
KalturaPluginData.inheritsFrom (KalturaObjectBase);


/**
 * @param	version	int		 (readOnly).
 * @param	uiAttributes	array		Array of key value ui related objects
 *		 .
 * @param	showResultOnAnswer	int		.
 * @param	showCorrectKeyOnAnswer	int		.
 * @param	allowAnswerUpdate	int		.
 * @param	showCorrectAfterSubmission	int		.
 * @param	allowDownload	int		.
 * @param	showGradeAfterSubmission	int		.
 */
function KalturaQuiz(){
	this.version = null;
	this.uiAttributes = null;
	this.showResultOnAnswer = null;
	this.showCorrectKeyOnAnswer = null;
	this.allowAnswerUpdate = null;
	this.showCorrectAfterSubmission = null;
	this.allowDownload = null;
	this.showGradeAfterSubmission = null;
}
KalturaQuiz.inheritsFrom (KalturaObjectBase);


/**
 * @param	storageProfileId	int		 (readOnly).
 * @param	uri	string		 (readOnly).
 */
function KalturaRemotePath(){
	this.storageProfileId = null;
	this.uri = null;
}
KalturaRemotePath.inheritsFrom (KalturaObjectBase);


/**
 * @param	url	string		Remote URL, FTP, HTTP or HTTPS 
 *		 .
 * @param	forceAsyncDownload	bool		Force Import Job 
 *		 .
 */
function KalturaUrlResource(){
	this.url = null;
	this.forceAsyncDownload = null;
}
KalturaUrlResource.inheritsFrom (KalturaContentResource);


/**
 * @param	storageProfileId	int		ID of storage profile to be associated with the created file sync, used for file serving URL composing. 
 *		 .
 */
function KalturaRemoteStorageResource(){
	this.storageProfileId = null;
}
KalturaRemoteStorageResource.inheritsFrom (KalturaUrlResource);


/**
 * @param	id	int		Report id
 *		  (readOnly).
 * @param	partnerId	int		Partner id associated with the report
 *		 .
 * @param	name	string		Report name
 *		 .
 * @param	systemName	string		Used to identify system reports in a friendly way
 *		 .
 * @param	description	string		Report description
 *		 .
 * @param	query	string		Report query
 *		 .
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 */
function KalturaReport(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.query = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaReport.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	data	string		.
 */
function KalturaReportBaseTotal(){
	this.id = null;
	this.data = null;
}
KalturaReportBaseTotal.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	data	string		.
 */
function KalturaReportGraph(){
	this.id = null;
	this.data = null;
}
KalturaReportGraph.inheritsFrom (KalturaObjectBase);


/**
 * @param	fromDate	int		Start date as Unix timestamp (In seconds)
 *		 .
 * @param	toDate	int		End date as Unix timestamp (In seconds)
 *		 .
 * @param	fromDay	string		Start day as string (YYYYMMDD)
 *		 .
 * @param	toDay	string		End date as string (YYYYMMDD)
 *		 .
 */
function KalturaReportInputBaseFilter(){
	this.fromDate = null;
	this.toDate = null;
	this.fromDay = null;
	this.toDay = null;
}
KalturaReportInputBaseFilter.inheritsFrom (KalturaObjectBase);


/**
 * @param	columns	string		.
 * @param	results	array		.
 */
function KalturaReportResponse(){
	this.columns = null;
	this.results = null;
}
KalturaReportResponse.inheritsFrom (KalturaObjectBase);


/**
 * @param	header	string		 (readOnly).
 * @param	data	string		 (readOnly).
 * @param	totalCount	int		 (readOnly).
 */
function KalturaReportTable(){
	this.header = null;
	this.data = null;
	this.totalCount = null;
}
KalturaReportTable.inheritsFrom (KalturaObjectBase);


/**
 * @param	header	string		.
 * @param	data	string		.
 */
function KalturaReportTotal(){
	this.header = null;
	this.data = null;
}
KalturaReportTotal.inheritsFrom (KalturaObjectBase);


/**
 * @param	partnerId	int		Impersonated partner id
 *		 .
 * @param	ks	string		Kaltura API session
 *		 .
 * @param	responseProfile	KalturaBaseResponseProfile		Response profile - this attribute will be automatically unset after every API call.
 *		 .
 */
function KalturaRequestConfiguration(){
	this.partnerId = null;
	this.ks = null;
	this.responseProfile = null;
}
KalturaRequestConfiguration.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		Auto generated numeric identifier
 *		  (readOnly).
 * @param	systemName	string		Unique system name
 *		 .
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		Creation time as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	updatedAt	int		Update time as Unix timestamp (In seconds) 
 *		  (readOnly).
 * @param	status	int		 (readOnly).
 * @param	version	int		 (readOnly).
 */
function KalturaResponseProfile(){
	this.id = null;
	this.systemName = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.status = null;
	this.version = null;
}
KalturaResponseProfile.inheritsFrom (KalturaDetachedResponseProfile);


/**
 * @param	limit	int		Maximum number of keys to recalculate
 *		 .
 * @param	cachedObjectType	string		Class name
 *		 .
 * @param	objectId	string		.
 * @param	startObjectKey	string		.
 * @param	endObjectKey	string		.
 * @param	jobCreatedAt	int		.
 * @param	isFirstLoop	bool		.
 */
function KalturaResponseProfileCacheRecalculateOptions(){
	this.limit = null;
	this.cachedObjectType = null;
	this.objectId = null;
	this.startObjectKey = null;
	this.endObjectKey = null;
	this.jobCreatedAt = null;
	this.isFirstLoop = null;
}
KalturaResponseProfileCacheRecalculateOptions.inheritsFrom (KalturaObjectBase);


/**
 * @param	lastObjectKey	string		Last recalculated id
 *		 .
 * @param	recalculated	int		Number of recalculated keys
 *		 .
 */
function KalturaResponseProfileCacheRecalculateResults(){
	this.lastObjectKey = null;
	this.recalculated = null;
}
KalturaResponseProfileCacheRecalculateResults.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	description	string		.
 * @param	status	int		.
 * @param	objectFilterEngineType	string		The type of engine to use to list objects using the given "objectFilter"
 *		 .
 * @param	objectFilter	KalturaFilter		A filter object (inherits KalturaFilter) that is used to list objects for scheduled tasks
 *		 .
 * @param	objectTasks	array		A list of tasks to execute on the founded objects
 *		 .
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	lastExecutionStartedAt	int		.
 * @param	maxTotalCountAllowed	int		The maximum number of result count allowed to be processed by this profile per execution
 *		 .
 */
function KalturaScheduledTaskProfile(){
	this.id = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.status = null;
	this.objectFilterEngineType = null;
	this.objectFilter = null;
	this.objectTasks = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.lastExecutionStartedAt = null;
	this.maxTotalCountAllowed = null;
}
KalturaScheduledTaskProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Category
 *		  (readOnly).
 * @param	schedulerConfiguredId	int		The configured id of the scheduler
 *		 .
 * @param	workerConfiguredId	int		The configured id of the job worker
 *		 .
 * @param	workerType	string		The type of the job worker.
 *		 .
 * @param	type	int		The status type
 *		 .
 * @param	value	int		The status value
 *		 .
 * @param	schedulerId	int		The id of the scheduler
 *		  (readOnly).
 * @param	workerId	int		The id of the worker
 *		  (readOnly).
 */
function KalturaSchedulerStatus(){
	this.id = null;
	this.schedulerConfiguredId = null;
	this.workerConfiguredId = null;
	this.workerType = null;
	this.type = null;
	this.value = null;
	this.schedulerId = null;
	this.workerId = null;
}
KalturaSchedulerStatus.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Category
 *		  (readOnly).
 * @param	createdBy	string		Creator name
 *		 .
 * @param	updatedBy	string		Updater name
 *		 .
 * @param	commandId	string		Id of the control panel command that created this config item 
 *		 .
 * @param	commandStatus	string		The status of the control panel command 
 *		 .
 * @param	schedulerId	int		The id of the scheduler 
 *		 .
 * @param	schedulerConfiguredId	int		The configured id of the scheduler 
 *		 .
 * @param	schedulerName	string		The name of the scheduler 
 *		 .
 * @param	workerId	int		The id of the job worker
 *		 .
 * @param	workerConfiguredId	int		The configured id of the job worker
 *		 .
 * @param	workerName	string		The name of the job worker
 *		 .
 * @param	variable	string		The name of the variable
 *		 .
 * @param	variablePart	string		The part of the variable
 *		 .
 * @param	value	string		The value of the variable
 *		 .
 */
function KalturaSchedulerConfig(){
	this.id = null;
	this.createdBy = null;
	this.updatedBy = null;
	this.commandId = null;
	this.commandStatus = null;
	this.schedulerId = null;
	this.schedulerConfiguredId = null;
	this.schedulerName = null;
	this.workerId = null;
	this.workerConfiguredId = null;
	this.workerName = null;
	this.variable = null;
	this.variablePart = null;
	this.value = null;
}
KalturaSchedulerConfig.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Worker
 *		  (readOnly).
 * @param	configuredId	int		The id as configured in the batch config
 *		 .
 * @param	schedulerId	int		The id of the Scheduler
 *		 .
 * @param	schedulerConfiguredId	int		The id of the scheduler as configured in the batch config
 *		 .
 * @param	type	string		The worker type
 *		 .
 * @param	typeName	string		The friendly name of the type
 *		 .
 * @param	name	string		The scheduler name
 *		 .
 * @param	statuses	array		Array of the last statuses
 *		 .
 * @param	configs	array		Array of the last configs
 *		 .
 * @param	lockedJobs	array		Array of jobs that locked to this worker
 *		 .
 * @param	avgWait	int		Avarage time between creation and queue time
 *		 .
 * @param	avgWork	int		Avarage time between queue time end finish time
 *		 .
 * @param	lastStatus	int		last status time
 *		 .
 * @param	lastStatusStr	string		last status formated
 *		 .
 */
function KalturaSchedulerWorker(){
	this.id = null;
	this.configuredId = null;
	this.schedulerId = null;
	this.schedulerConfiguredId = null;
	this.type = null;
	this.typeName = null;
	this.name = null;
	this.statuses = null;
	this.configs = null;
	this.lockedJobs = null;
	this.avgWait = null;
	this.avgWork = null;
	this.lastStatus = null;
	this.lastStatusStr = null;
}
KalturaSchedulerWorker.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		The id of the Scheduler
 *		  (readOnly).
 * @param	configuredId	int		The id as configured in the batch config
 *		 .
 * @param	name	string		The scheduler name
 *		 .
 * @param	host	string		The host name
 *		 .
 * @param	statuses	array		Array of the last statuses
 *		  (readOnly).
 * @param	configs	array		Array of the last configs
 *		  (readOnly).
 * @param	workers	array		Array of the workers
 *		  (readOnly).
 * @param	createdAt	int		creation time
 *		  (readOnly).
 * @param	lastStatus	int		last status time
 *		  (readOnly).
 * @param	lastStatusStr	string		last status formated
 *		  (readOnly).
 */
function KalturaScheduler(){
	this.id = null;
	this.configuredId = null;
	this.name = null;
	this.host = null;
	this.statuses = null;
	this.configs = null;
	this.workers = null;
	this.createdAt = null;
	this.lastStatus = null;
	this.lastStatusStr = null;
}
KalturaScheduler.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaScope(){
}
KalturaScope.inheritsFrom (KalturaObjectBase);


/**
 * @param	keyWords	string		.
 * @param	searchSource	int		.
 * @param	mediaType	int		.
 * @param	extraData	string		Use this field to pass dynamic data for searching
 *		 For example - if you set this field to "mymovies_$partner_id"
 *		 The $partner_id will be automatically replcaed with your real partner Id
 *		 .
 * @param	authData	string		.
 */
function KalturaSearch(){
	this.keyWords = null;
	this.searchSource = null;
	this.mediaType = null;
	this.extraData = null;
	this.authData = null;
}
KalturaSearch.inheritsFrom (KalturaObjectBase);


/**
 * @param	authData	string		The authentication data that further should be used for search
 *		 .
 * @param	loginUrl	string		Login URL when user need to sign-in and authorize the search
 *		 .
 * @param	message	string		Information when there was an error
 *		 .
 */
function KalturaSearchAuthData(){
	this.authData = null;
	this.loginUrl = null;
	this.message = null;
}
KalturaSearchAuthData.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	title	string		.
 * @param	thumbUrl	string		.
 * @param	description	string		.
 * @param	tags	string		.
 * @param	url	string		.
 * @param	sourceLink	string		.
 * @param	credit	string		.
 * @param	licenseType	int		.
 * @param	flashPlaybackType	string		.
 * @param	fileExt	string		.
 */
function KalturaSearchResult(){
	this.id = null;
	this.title = null;
	this.thumbUrl = null;
	this.description = null;
	this.tags = null;
	this.url = null;
	this.sourceLink = null;
	this.credit = null;
	this.licenseType = null;
	this.flashPlaybackType = null;
	this.fileExt = null;
}
KalturaSearchResult.inheritsFrom (KalturaSearch);


/**
 * @param	objects	array		 (readOnly).
 * @param	needMediaInfo	bool		 (readOnly).
 */
function KalturaSearchResultResponse(){
	this.objects = null;
	this.needMediaInfo = null;
}
KalturaSearchResultResponse.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	heartbeatTime	int		 (readOnly).
 * @param	name	string		serverNode name
 *		 .
 * @param	systemName	string		serverNode uniqe system name
 *		 .
 * @param	description	string		.
 * @param	hostName	string		serverNode hostName
 *		 .
 * @param	status	int		 (readOnly).
 * @param	type	string		 (readOnly).
 * @param	tags	string		serverNode tags
 *		 .
 * @param	dc	int		DC where the serverNode is located
 *		  (readOnly).
 * @param	parentId	int		Id of the parent serverNode
 *		 .
 */
function KalturaServerNode(){
	this.id = null;
	this.partnerId = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.heartbeatTime = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.hostName = null;
	this.status = null;
	this.type = null;
	this.tags = null;
	this.dc = null;
	this.parentId = null;
}
KalturaServerNode.inheritsFrom (KalturaObjectBase);


/**
 * @param	ks	string		 (readOnly).
 * @param	sessionType	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	userId	string		 (readOnly).
 * @param	expiry	int		 (readOnly).
 * @param	privileges	string		 (readOnly).
 */
function KalturaSessionInfo(){
	this.ks = null;
	this.sessionType = null;
	this.partnerId = null;
	this.userId = null;
	this.expiry = null;
	this.privileges = null;
}
KalturaSessionInfo.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	expiresAt	int		.
 * @param	partnerId	int		 (readOnly).
 * @param	userId	string		.
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	fullUrl	string		.
 * @param	status	int		.
 */
function KalturaShortLink(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.expiresAt = null;
	this.partnerId = null;
	this.userId = null;
	this.name = null;
	this.systemName = null;
	this.fullUrl = null;
	this.status = null;
}
KalturaShortLink.inheritsFrom (KalturaObjectBase);


/**
 * @param	actualFileSyncLocalPath	string		The translated path as used by the scheduler
 *		 .
 * @param	assetId	string		.
 * @param	assetParamsId	int		.
 */
function KalturaSourceFileSyncDescriptor(){
	this.actualFileSyncLocalPath = null;
	this.assetId = null;
	this.assetParamsId = null;
}
KalturaSourceFileSyncDescriptor.inheritsFrom (KalturaFileSyncDescriptor);


/**
 * @param	partnerId	int		 (readOnly).
 * @param	ks	string		 (readOnly).
 * @param	userId	string		 (readOnly).
 */
function KalturaStartWidgetSessionResponse(){
	this.partnerId = null;
	this.ks = null;
	this.userId = null;
}
KalturaStartWidgetSessionResponse.inheritsFrom (KalturaObjectBase);


/**
 * @param	clientVer	string		.
 * @param	eventType	int		.
 * @param	eventTimestamp	float		the client's timestamp of this event
 *		 .
 * @param	sessionId	string		a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
 *		 .
 * @param	partnerId	int		.
 * @param	entryId	string		.
 * @param	uniqueViewer	string		the UV cookie - creates in the operational system and should be passed on ofr every event 
 *		 .
 * @param	widgetId	string		.
 * @param	uiconfId	int		.
 * @param	userId	string		the partner's user id 
 *		 .
 * @param	currentPoint	int		the timestamp along the video when the event happend 
 *		 .
 * @param	duration	int		the duration of the video in milliseconds - will make it much faster than quering the db for each entry 
 *		 .
 * @param	userIp	string		will be retrieved from the request of the user 
 *		  (readOnly).
 * @param	processDuration	int		the time in milliseconds the event took
 *		 .
 * @param	controlId	string		the id of the GUI control - will be used in the future to better understand what the user clicked
 *		 .
 * @param	seek	bool		true if the user ever used seek in this session 
 *		 .
 * @param	newPoint	int		timestamp of the new point on the timeline of the video after the user seeks 
 *		 .
 * @param	referrer	string		the referrer of the client
 *		 .
 * @param	isFirstInSession	bool		will indicate if the event is thrown for the first video in the session
 *		 .
 * @param	applicationId	string		kaltura application name 
 *		 .
 * @param	contextId	int		.
 * @param	featureType	int		.
 */
function KalturaStatsEvent(){
	this.clientVer = null;
	this.eventType = null;
	this.eventTimestamp = null;
	this.sessionId = null;
	this.partnerId = null;
	this.entryId = null;
	this.uniqueViewer = null;
	this.widgetId = null;
	this.uiconfId = null;
	this.userId = null;
	this.currentPoint = null;
	this.duration = null;
	this.userIp = null;
	this.processDuration = null;
	this.controlId = null;
	this.seek = null;
	this.newPoint = null;
	this.referrer = null;
	this.isFirstInSession = null;
	this.applicationId = null;
	this.contextId = null;
	this.featureType = null;
}
KalturaStatsEvent.inheritsFrom (KalturaObjectBase);


/**
 * @param	clientVer	string		.
 * @param	kmcEventActionPath	string		.
 * @param	kmcEventType	int		.
 * @param	eventTimestamp	float		the client's timestamp of this event
 *		 .
 * @param	sessionId	string		a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
 *		 .
 * @param	partnerId	int		.
 * @param	entryId	string		.
 * @param	widgetId	string		.
 * @param	uiconfId	int		.
 * @param	userId	string		the partner's user id 
 *		 .
 * @param	userIp	string		will be retrieved from the request of the user 
 *		  (readOnly).
 */
function KalturaStatsKmcEvent(){
	this.clientVer = null;
	this.kmcEventActionPath = null;
	this.kmcEventType = null;
	this.eventTimestamp = null;
	this.sessionId = null;
	this.partnerId = null;
	this.entryId = null;
	this.widgetId = null;
	this.uiconfId = null;
	this.userId = null;
	this.userIp = null;
}
KalturaStatsKmcEvent.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	desciption	string		.
 * @param	status	int		.
 * @param	protocol	string		.
 * @param	storageUrl	string		.
 * @param	storageBaseDir	string		.
 * @param	storageUsername	string		.
 * @param	storagePassword	string		.
 * @param	storageFtpPassiveMode	bool		.
 * @param	minFileSize	int		.
 * @param	maxFileSize	int		.
 * @param	flavorParamsIds	string		.
 * @param	maxConcurrentConnections	int		.
 * @param	pathManagerClass	string		.
 * @param	pathManagerParams	array		.
 * @param	trigger	int		No need to create enum for temp field
 *		 .
 * @param	deliveryPriority	int		Delivery Priority
 *		 .
 * @param	deliveryStatus	int		.
 * @param	readyBehavior	int		.
 * @param	allowAutoDelete	int		Flag sugnifying that the storage exported content should be deleted when soure entry is deleted
 *		 .
 * @param	createFileLink	bool		Indicates to the local file transfer manager to create a link to the file instead of copying it
 *		 .
 * @param	rules	array		Holds storage profile export rules
 *		 .
 * @param	deliveryProfileIds	array		Delivery profile ids
 *		 .
 * @param	privateKey	string		.
 * @param	publicKey	string		.
 * @param	passPhrase	string		.
 */
function KalturaStorageProfile(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerId = null;
	this.name = null;
	this.systemName = null;
	this.desciption = null;
	this.status = null;
	this.protocol = null;
	this.storageUrl = null;
	this.storageBaseDir = null;
	this.storageUsername = null;
	this.storagePassword = null;
	this.storageFtpPassiveMode = null;
	this.minFileSize = null;
	this.maxFileSize = null;
	this.flavorParamsIds = null;
	this.maxConcurrentConnections = null;
	this.pathManagerClass = null;
	this.pathManagerParams = null;
	this.trigger = null;
	this.deliveryPriority = null;
	this.deliveryStatus = null;
	this.readyBehavior = null;
	this.allowAutoDelete = null;
	this.createFileLink = null;
	this.rules = null;
	this.deliveryProfileIds = null;
	this.privateKey = null;
	this.publicKey = null;
	this.passPhrase = null;
}
KalturaStorageProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	totalEntryCount	int		the total count of entries that should appear in the feed without flavor filtering
 *		 .
 * @param	actualEntryCount	int		count of entries that will appear in the feed (including all relevant filters)
 *		 .
 * @param	requireTranscodingCount	int		count of entries that requires transcoding in order to be included in feed
 *		 .
 */
function KalturaSyndicationFeedEntryCount(){
	this.totalEntryCount = null;
	this.actualEntryCount = null;
	this.requireTranscodingCount = null;
}
KalturaSyndicationFeedEntryCount.inheritsFrom (KalturaObjectBase);


/**
 * @param	type	string		.
 * @param	max	float		.
 */
function KalturaSystemPartnerLimit(){
	this.type = null;
	this.max = null;
}
KalturaSystemPartnerLimit.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	partnerName	string		.
 * @param	description	string		.
 * @param	adminName	string		.
 * @param	adminEmail	string		.
 * @param	host	string		.
 * @param	cdnHost	string		.
 * @param	cdnHostWhiteList	string		.
 * @param	thumbnailHost	string		.
 * @param	partnerPackage	int		.
 * @param	monitorUsage	int		.
 * @param	moderateContent	bool		.
 * @param	storageDeleteFromKaltura	bool		.
 * @param	storageServePriority	int		.
 * @param	kmcVersion	int		.
 * @param	restrictThumbnailByKs	int		.
 * @param	supportAnimatedThumbnails	bool		.
 * @param	defThumbOffset	int		.
 * @param	defThumbDensity	int		.
 * @param	userSessionRoleId	int		.
 * @param	adminSessionRoleId	int		.
 * @param	alwaysAllowedPermissionNames	string		.
 * @param	importRemoteSourceForConvert	bool		.
 * @param	permissions	array		.
 * @param	notificationsConfig	string		.
 * @param	allowMultiNotification	bool		.
 * @param	loginBlockPeriod	int		.
 * @param	numPrevPassToKeep	int		.
 * @param	passReplaceFreq	int		.
 * @param	isFirstLogin	bool		.
 * @param	partnerGroupType	int		.
 * @param	partnerParentId	int		.
 * @param	limits	array		.
 * @param	streamerType	string		http/rtmp/hdnetwork
 *		 .
 * @param	mediaProtocol	string		http/https, rtmp/rtmpe
 *		 .
 * @param	extendedFreeTrailExpiryReason	string		.
 * @param	extendedFreeTrailExpiryDate	int		Unix timestamp (In seconds)
 *		 .
 * @param	extendedFreeTrail	int		.
 * @param	crmId	string		.
 * @param	referenceId	string		.
 * @param	crmLink	string		.
 * @param	verticalClasiffication	string		.
 * @param	partnerPackageClassOfService	string		.
 * @param	enableBulkUploadNotificationsEmails	bool		.
 * @param	deliveryProfileIds	string		.
 * @param	enforceDelivery	bool		.
 * @param	bulkUploadNotificationsEmail	string		.
 * @param	internalUse	bool		.
 * @param	defaultLiveStreamEntrySourceType	string		.
 * @param	liveStreamProvisionParams	string		.
 * @param	autoModerateEntryFilter	KalturaBaseEntryFilter		.
 * @param	logoutUrl	string		.
 * @param	defaultEntitlementEnforcement	bool		.
 * @param	cacheFlavorVersion	int		.
 * @param	apiAccessControlId	int		.
 * @param	defaultDeliveryType	string		.
 * @param	defaultEmbedCodeType	string		.
 * @param	customDeliveryTypes	array		.
 * @param	restrictEntryByMetadata	bool		.
 * @param	language	string		.
 * @param	audioThumbEntryId	string		.
 * @param	liveThumbEntryId	string		.
 * @param	timeAlignedRenditions	bool		.
 */
function KalturaSystemPartnerConfiguration(){
	this.id = null;
	this.partnerName = null;
	this.description = null;
	this.adminName = null;
	this.adminEmail = null;
	this.host = null;
	this.cdnHost = null;
	this.cdnHostWhiteList = null;
	this.thumbnailHost = null;
	this.partnerPackage = null;
	this.monitorUsage = null;
	this.moderateContent = null;
	this.storageDeleteFromKaltura = null;
	this.storageServePriority = null;
	this.kmcVersion = null;
	this.restrictThumbnailByKs = null;
	this.supportAnimatedThumbnails = null;
	this.defThumbOffset = null;
	this.defThumbDensity = null;
	this.userSessionRoleId = null;
	this.adminSessionRoleId = null;
	this.alwaysAllowedPermissionNames = null;
	this.importRemoteSourceForConvert = null;
	this.permissions = null;
	this.notificationsConfig = null;
	this.allowMultiNotification = null;
	this.loginBlockPeriod = null;
	this.numPrevPassToKeep = null;
	this.passReplaceFreq = null;
	this.isFirstLogin = null;
	this.partnerGroupType = null;
	this.partnerParentId = null;
	this.limits = null;
	this.streamerType = null;
	this.mediaProtocol = null;
	this.extendedFreeTrailExpiryReason = null;
	this.extendedFreeTrailExpiryDate = null;
	this.extendedFreeTrail = null;
	this.crmId = null;
	this.referenceId = null;
	this.crmLink = null;
	this.verticalClasiffication = null;
	this.partnerPackageClassOfService = null;
	this.enableBulkUploadNotificationsEmails = null;
	this.deliveryProfileIds = null;
	this.enforceDelivery = null;
	this.bulkUploadNotificationsEmail = null;
	this.internalUse = null;
	this.defaultLiveStreamEntrySourceType = null;
	this.liveStreamProvisionParams = null;
	this.autoModerateEntryFilter = null;
	this.logoutUrl = null;
	this.defaultEntitlementEnforcement = null;
	this.cacheFlavorVersion = null;
	this.apiAccessControlId = null;
	this.defaultDeliveryType = null;
	this.defaultEmbedCodeType = null;
	this.customDeliveryTypes = null;
	this.restrictEntryByMetadata = null;
	this.language = null;
	this.audioThumbEntryId = null;
	this.liveThumbEntryId = null;
	this.timeAlignedRenditions = null;
}
KalturaSystemPartnerConfiguration.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		.
 * @param	name	string		.
 */
function KalturaSystemPartnerPackage(){
	this.id = null;
	this.name = null;
}
KalturaSystemPartnerPackage.inheritsFrom (KalturaObjectBase);


/**
 * @param	partnerId	int		Partner ID
 *		 .
 * @param	partnerName	string		Partner name
 *		 .
 * @param	partnerStatus	int		Partner status
 *		 .
 * @param	partnerPackage	int		Partner package
 *		 .
 * @param	partnerCreatedAt	int		Partner creation date (Unix timestamp)
 *		 .
 * @param	views	int		Number of player loads in the specific date range
 *		 .
 * @param	plays	int		Number of plays in the specific date range
 *		 .
 * @param	entriesCount	int		Number of new entries created during specific date range
 *		 .
 * @param	totalEntriesCount	int		Total number of entries
 *		 .
 * @param	videoEntriesCount	int		Number of new video entries created during specific date range
 *		 .
 * @param	imageEntriesCount	int		Number of new image entries created during specific date range
 *		 .
 * @param	audioEntriesCount	int		Number of new audio entries created during specific date range
 *		 .
 * @param	mixEntriesCount	int		Number of new mix entries created during specific date range
 *		 .
 * @param	bandwidth	float		The total bandwidth usage during the given date range (in MB)
 *		 .
 * @param	totalStorage	float		The total storage consumption (in MB)
 *		 .
 * @param	storage	float		The change in storage consumption (new uploads) during the given date range (in MB)
 *		 .
 * @param	peakStorage	float		The peak amount of storage consumption during the given date range for the specific publisher
 *		 .
 * @param	avgStorage	float		The average amount of storage consumption during the given date range for the specific publisher
 *		 .
 * @param	combinedBandwidthStorage	float		The combined amount of bandwidth and storage consumed during the given date range for the specific publisher
 *		 .
 * @param	deletedStorage	float		Amount of deleted storage in MB
 *		 .
 * @param	transcodingUsage	float		Amount of transcoding usage in MB
 *		 .
 */
function KalturaSystemPartnerUsageItem(){
	this.partnerId = null;
	this.partnerName = null;
	this.partnerStatus = null;
	this.partnerPackage = null;
	this.partnerCreatedAt = null;
	this.views = null;
	this.plays = null;
	this.entriesCount = null;
	this.totalEntriesCount = null;
	this.videoEntriesCount = null;
	this.imageEntriesCount = null;
	this.audioEntriesCount = null;
	this.mixEntriesCount = null;
	this.bandwidth = null;
	this.totalStorage = null;
	this.storage = null;
	this.peakStorage = null;
	this.avgStorage = null;
	this.combinedBandwidthStorage = null;
	this.deletedStorage = null;
	this.transcodingUsage = null;
}
KalturaSystemPartnerUsageItem.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	tag	string		 (readOnly).
 * @param	taggedObjectType	string		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	instanceCount	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 */
function KalturaTag(){
	this.id = null;
	this.tag = null;
	this.taggedObjectType = null;
	this.partnerId = null;
	this.instanceCount = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaTag.inheritsFrom (KalturaObjectBase);


/**
 * @param	thumbParamsId	int		The Flavor Params used to create this Flavor Asset
 *		  (insertOnly).
 * @param	width	int		The width of the Flavor Asset 
 *		  (readOnly).
 * @param	height	int		The height of the Flavor Asset
 *		  (readOnly).
 * @param	status	int		The status of the asset
 *		  (readOnly).
 */
function KalturaThumbAsset(){
	this.thumbParamsId = null;
	this.width = null;
	this.height = null;
	this.status = null;
}
KalturaThumbAsset.inheritsFrom (KalturaAsset);


/**
 * @param	cropType	int		.
 * @param	quality	int		.
 * @param	cropX	int		.
 * @param	cropY	int		.
 * @param	cropWidth	int		.
 * @param	cropHeight	int		.
 * @param	videoOffset	float		.
 * @param	width	int		.
 * @param	height	int		.
 * @param	scaleWidth	float		.
 * @param	scaleHeight	float		.
 * @param	backgroundColor	string		Hexadecimal value
 *		 .
 * @param	sourceParamsId	int		Id of the flavor params or the thumbnail params to be used as source for the thumbnail creation
 *		 .
 * @param	format	string		The container format of the Flavor Params
 *		 .
 * @param	density	int		The image density (dpi) for example: 72 or 96
 *		 .
 * @param	stripProfiles	bool		Strip profiles and comments
 *		 .
 * @param	videoOffsetInPercentage	int		Create thumbnail from the videoLengthpercentage second
 *	     .
 */
function KalturaThumbParams(){
	this.cropType = null;
	this.quality = null;
	this.cropX = null;
	this.cropY = null;
	this.cropWidth = null;
	this.cropHeight = null;
	this.videoOffset = null;
	this.width = null;
	this.height = null;
	this.scaleWidth = null;
	this.scaleHeight = null;
	this.backgroundColor = null;
	this.sourceParamsId = null;
	this.format = null;
	this.density = null;
	this.stripProfiles = null;
	this.videoOffsetInPercentage = null;
}
KalturaThumbParams.inheritsFrom (KalturaAssetParams);


/**
 * @param	thumbParamsId	int		.
 * @param	thumbParamsVersion	string		.
 * @param	thumbAssetId	string		.
 * @param	thumbAssetVersion	string		.
 * @param	rotate	int		.
 */
function KalturaThumbParamsOutput(){
	this.thumbParamsId = null;
	this.thumbParamsVersion = null;
	this.thumbAssetId = null;
	this.thumbAssetVersion = null;
	this.rotate = null;
}
KalturaThumbParamsOutput.inheritsFrom (KalturaThumbParams);


/**
 * @param	download	bool		.
 */
function KalturaThumbnailServeOptions(){
	this.download = null;
}
KalturaThumbnailServeOptions.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		.
 * @param	trackEventType	int		.
 * @param	psVersion	string		.
 * @param	context	string		.
 * @param	partnerId	int		.
 * @param	entryId	string		.
 * @param	hostName	string		.
 * @param	userId	string		.
 * @param	changedProperties	string		.
 * @param	paramStr1	string		.
 * @param	paramStr2	string		.
 * @param	paramStr3	string		.
 * @param	ks	string		.
 * @param	description	string		.
 * @param	createdAt	int		.
 * @param	updatedAt	int		.
 * @param	userIp	string		.
 */
function KalturaTrackEntry(){
	this.id = null;
	this.trackEventType = null;
	this.psVersion = null;
	this.context = null;
	this.partnerId = null;
	this.entryId = null;
	this.hostName = null;
	this.userId = null;
	this.changedProperties = null;
	this.paramStr1 = null;
	this.paramStr2 = null;
	this.paramStr3 = null;
	this.ks = null;
	this.description = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.userIp = null;
}
KalturaTrackEntry.inheritsFrom (KalturaObjectBase);


/**
 * @param	accuracy	float		The accuracy of the transcript - values between 0 and 1
 *		 .
 * @param	humanVerified	int		Was verified by human or machine
 *		 .
 * @param	language	string		The language of the transcript
 *		 .
 */
function KalturaTranscriptAsset(){
	this.accuracy = null;
	this.humanVerified = null;
	this.language = null;
}
KalturaTranscriptAsset.inheritsFrom (KalturaAttachmentAsset);


/**
 * @param	id	int		 (readOnly).
 * @param	name	string		Name of the uiConf, this is not a primary key
 *		 .
 * @param	description	string		.
 * @param	partnerId	int		 (readOnly).
 * @param	objType	int		.
 * @param	objTypeAsString	string		 (readOnly).
 * @param	width	int		.
 * @param	height	int		.
 * @param	htmlParams	string		.
 * @param	swfUrl	string		.
 * @param	confFilePath	string		 (readOnly).
 * @param	confFile	string		.
 * @param	confFileFeatures	string		.
 * @param	config	string		.
 * @param	confVars	string		.
 * @param	useCdn	bool		.
 * @param	tags	string		.
 * @param	swfUrlVersion	string		.
 * @param	createdAt	int		Entry creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Entry creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	creationMode	int		.
 * @param	html5Url	string		.
 * @param	version	string		UiConf version
 *		  (readOnly).
 * @param	partnerTags	string		.
 */
function KalturaUiConf(){
	this.id = null;
	this.name = null;
	this.description = null;
	this.partnerId = null;
	this.objType = null;
	this.objTypeAsString = null;
	this.width = null;
	this.height = null;
	this.htmlParams = null;
	this.swfUrl = null;
	this.confFilePath = null;
	this.confFile = null;
	this.confFileFeatures = null;
	this.config = null;
	this.confVars = null;
	this.useCdn = null;
	this.tags = null;
	this.swfUrlVersion = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.creationMode = null;
	this.html5Url = null;
	this.version = null;
	this.partnerTags = null;
}
KalturaUiConf.inheritsFrom (KalturaObjectBase);


/**
 * @param	isPublic	bool		.
 */
function KalturaUiConfAdmin(){
	this.isPublic = null;
}
KalturaUiConfAdmin.inheritsFrom (KalturaUiConf);


/**
 * @param	type	int		UiConf Type
 *		 .
 * @param	versions	array		Available versions
 *	     .
 * @param	directory	string		The direcotry this type is saved at
 *	     .
 * @param	filename	string		Filename for this UiConf type
 *	     .
 */
function KalturaUiConfTypeInfo(){
	this.type = null;
	this.versions = null;
	this.directory = null;
	this.filename = null;
}
KalturaUiConfTypeInfo.inheritsFrom (KalturaObjectBase);


/**
 * @param	uploadTokenId	string		.
 * @param	fileSize	int		.
 * @param	errorCode	int		.
 * @param	errorDescription	string		.
 */
function KalturaUploadResponse(){
	this.uploadTokenId = null;
	this.fileSize = null;
	this.errorCode = null;
	this.errorDescription = null;
}
KalturaUploadResponse.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		Upload token unique ID
 *		  (readOnly).
 * @param	partnerId	int		Partner ID of the upload token
 *		  (readOnly).
 * @param	userId	string		User id for the upload token
 *		  (readOnly).
 * @param	status	int		Status of the upload token
 *		  (readOnly).
 * @param	fileName	string		Name of the file for the upload token, can be empty when the upload token is created and will be updated internally after the file is uploaded
 *		  (insertOnly).
 * @param	fileSize	float		File size in bytes, can be empty when the upload token is created and will be updated internally after the file is uploaded
 *		  (insertOnly).
 * @param	uploadedFileSize	float		Uploaded file size in bytes, can be used to identify how many bytes were uploaded before resuming
 *		  (readOnly).
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 */
function KalturaUploadToken(){
	this.id = null;
	this.partnerId = null;
	this.userId = null;
	this.status = null;
	this.fileName = null;
	this.fileSize = null;
	this.uploadedFileSize = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaUploadToken.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	partnerId	int		 (readOnly).
 * @param	type	int		.
 * @param	screenName	string		.
 * @param	fullName	string		.
 * @param	email	string		.
 * @param	dateOfBirth	int		.
 * @param	country	string		.
 * @param	state	string		.
 * @param	city	string		.
 * @param	zip	string		.
 * @param	thumbnailUrl	string		.
 * @param	description	string		.
 * @param	tags	string		.
 * @param	adminTags	string		Admin tags can be updated only by using an admin session
 *		 .
 * @param	gender	int		.
 * @param	status	int		.
 * @param	createdAt	int		Creation date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	updatedAt	int		Last update date as Unix timestamp (In seconds)
 *		  (readOnly).
 * @param	partnerData	string		Can be used to store various partner related data as a string 
 *		 .
 * @param	indexedPartnerDataInt	int		.
 * @param	indexedPartnerDataString	string		.
 * @param	storageSize	int		 (readOnly).
 * @param	password	string		 (insertOnly).
 * @param	firstName	string		.
 * @param	lastName	string		.
 * @param	isAdmin	bool		.
 * @param	language	string		.
 * @param	lastLoginTime	int		 (readOnly).
 * @param	statusUpdatedAt	int		 (readOnly).
 * @param	deletedAt	int		 (readOnly).
 * @param	loginEnabled	bool		 (readOnly).
 * @param	roleIds	string		.
 * @param	roleNames	string		 (readOnly).
 * @param	isAccountOwner	bool		 (readOnly).
 * @param	allowedPartnerIds	string		.
 * @param	allowedPartnerPackages	string		.
 */
function KalturaUser(){
	this.id = null;
	this.partnerId = null;
	this.type = null;
	this.screenName = null;
	this.fullName = null;
	this.email = null;
	this.dateOfBirth = null;
	this.country = null;
	this.state = null;
	this.city = null;
	this.zip = null;
	this.thumbnailUrl = null;
	this.description = null;
	this.tags = null;
	this.adminTags = null;
	this.gender = null;
	this.status = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerData = null;
	this.indexedPartnerDataInt = null;
	this.indexedPartnerDataString = null;
	this.storageSize = null;
	this.password = null;
	this.firstName = null;
	this.lastName = null;
	this.isAdmin = null;
	this.language = null;
	this.lastLoginTime = null;
	this.statusUpdatedAt = null;
	this.deletedAt = null;
	this.loginEnabled = null;
	this.roleIds = null;
	this.roleNames = null;
	this.isAccountOwner = null;
	this.allowedPartnerIds = null;
	this.allowedPartnerPackages = null;
}
KalturaUser.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		unique auto-generated identifier
 *		  (readOnly).
 * @param	entryId	string		 (insertOnly).
 * @param	userId	string		 (insertOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	status	string		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	type	string		 (readOnly).
 */
function KalturaUserEntry(){
	this.id = null;
	this.entryId = null;
	this.userId = null;
	this.partnerId = null;
	this.status = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.type = null;
}
KalturaUserEntry.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		.
 * @param	loginEmail	string		.
 */
function KalturaUserLoginData(){
	this.id = null;
	this.loginEmail = null;
}
KalturaUserLoginData.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	name	string		.
 * @param	systemName	string		.
 * @param	description	string		.
 * @param	status	int		.
 * @param	partnerId	int		 (readOnly).
 * @param	permissionNames	string		.
 * @param	tags	string		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 */
function KalturaUserRole(){
	this.id = null;
	this.name = null;
	this.systemName = null;
	this.description = null;
	this.status = null;
	this.partnerId = null;
	this.permissionNames = null;
	this.tags = null;
	this.createdAt = null;
	this.updatedAt = null;
}
KalturaUserRole.inheritsFrom (KalturaObjectBase);


/**
 * @param	partnerId	int		Partner ID
 *		 .
 * @param	partnerName	string		Partner name
 *		 .
 * @param	partnerStatus	int		Partner status
 *		 .
 * @param	partnerPackage	int		Partner package
 *		 .
 * @param	partnerCreatedAt	int		Partner creation date (Unix timestamp)
 *		 .
 * @param	views	int		Number of player loads in the specific date range
 *		 .
 * @param	plays	int		Number of plays in the specific date range
 *		 .
 * @param	entriesCount	int		Number of new entries created during specific date range
 *		 .
 * @param	totalEntriesCount	int		Total number of entries
 *		 .
 * @param	videoEntriesCount	int		Number of new video entries created during specific date range
 *		 .
 * @param	imageEntriesCount	int		Number of new image entries created during specific date range
 *		 .
 * @param	audioEntriesCount	int		Number of new audio entries created during specific date range
 *		 .
 * @param	mixEntriesCount	int		Number of new mix entries created during specific date range
 *		 .
 * @param	bandwidth	float		The total bandwidth usage during the given date range (in MB)
 *		 .
 * @param	totalStorage	float		The total storage consumption (in MB)
 *		 .
 * @param	storage	float		The added storage consumption (new uploads) during the given date range (in MB)
 *		 .
 * @param	deletedStorage	float		The deleted storage consumption (new uploads) during the given date range (in MB)
 *		 .
 * @param	peakStorage	float		The peak amount of storage consumption during the given date range for the specific publisher
 *		 .
 * @param	avgStorage	float		The average amount of storage consumption during the given date range for the specific publisher
 *		 .
 * @param	combinedStorageBandwidth	float		The combined amount of bandwidth and storage consumed during the given date range for the specific publisher
 *		 .
 * @param	transcodingUsage	float		Amount of transcoding usage in MB
 *		 .
 * @param	dateId	string		TGhe date at which the report was taken - Unix Timestamp
 *		 .
 */
function KalturaVarPartnerUsageItem(){
	this.partnerId = null;
	this.partnerName = null;
	this.partnerStatus = null;
	this.partnerPackage = null;
	this.partnerCreatedAt = null;
	this.views = null;
	this.plays = null;
	this.entriesCount = null;
	this.totalEntriesCount = null;
	this.videoEntriesCount = null;
	this.imageEntriesCount = null;
	this.audioEntriesCount = null;
	this.mixEntriesCount = null;
	this.bandwidth = null;
	this.totalStorage = null;
	this.storage = null;
	this.deletedStorage = null;
	this.peakStorage = null;
	this.avgStorage = null;
	this.combinedStorageBandwidth = null;
	this.transcodingUsage = null;
	this.dateId = null;
}
KalturaVarPartnerUsageItem.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	int		 (readOnly).
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	name	string		.
 * @param	status	int		.
 * @param	engineType	string		.
 * @param	entryFilter	KalturaBaseEntryFilter		.
 * @param	actionIfInfected	int		.
 */
function KalturaVirusScanProfile(){
	this.id = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerId = null;
	this.name = null;
	this.status = null;
	this.engineType = null;
	this.entryFilter = null;
	this.actionIfInfected = null;
}
KalturaVirusScanProfile.inheritsFrom (KalturaObjectBase);


/**
 * @param	id	string		 (readOnly).
 * @param	sourceWidgetId	string		.
 * @param	rootWidgetId	string		 (readOnly).
 * @param	partnerId	int		 (readOnly).
 * @param	entryId	string		.
 * @param	uiConfId	int		.
 * @param	securityType	int		.
 * @param	securityPolicy	int		.
 * @param	createdAt	int		 (readOnly).
 * @param	updatedAt	int		 (readOnly).
 * @param	partnerData	string		Can be used to store various partner related data as a string 
 *		 .
 * @param	widgetHTML	string		 (readOnly).
 * @param	enforceEntitlement	bool		Should enforce entitlement on feed entries
 *		 .
 * @param	privacyContext	string		Set privacy context for search entries that assiged to private and public categories within a category privacy context.
 *		 .
 * @param	addEmbedHtml5Support	bool		Addes the HTML5 script line to the widget's embed code
 *		 .
 */
function KalturaWidget(){
	this.id = null;
	this.sourceWidgetId = null;
	this.rootWidgetId = null;
	this.partnerId = null;
	this.entryId = null;
	this.uiConfId = null;
	this.securityType = null;
	this.securityPolicy = null;
	this.createdAt = null;
	this.updatedAt = null;
	this.partnerData = null;
	this.widgetHTML = null;
	this.enforceEntitlement = null;
	this.privacyContext = null;
	this.addEmbedHtml5Support = null;
}
KalturaWidget.inheritsFrom (KalturaObjectBase);


/**
 */
function KalturaAccessControlBlockAction(){
}
KalturaAccessControlBlockAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	deliveryProfileIds	string		Comma separated list of delivery profile ids 
 *		 .
 * @param	isBlockedList	bool		.
 */
function KalturaAccessControlLimitDeliveryProfilesAction(){
	this.deliveryProfileIds = null;
	this.isBlockedList = null;
}
KalturaAccessControlLimitDeliveryProfilesAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	flavorParamsIds	string		Comma separated list of flavor ids 
 *		 .
 * @param	isBlockedList	bool		.
 */
function KalturaAccessControlLimitFlavorsAction(){
	this.flavorParamsIds = null;
	this.isBlockedList = null;
}
KalturaAccessControlLimitFlavorsAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaAccessControlListResponse(){
	this.objects = null;
}
KalturaAccessControlListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	pattern	string		Request host regex pattern
 *		 .
 * @param	replacement	string		Request host regex replacment
 *		 .
 */
function KalturaAccessControlModifyRequestHostRegexAction(){
	this.pattern = null;
	this.replacement = null;
}
KalturaAccessControlModifyRequestHostRegexAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	limit	int		.
 */
function KalturaAccessControlPreviewAction(){
	this.limit = null;
}
KalturaAccessControlPreviewAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaAccessControlProfileListResponse(){
	this.objects = null;
}
KalturaAccessControlProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	edgeServerIds	string		Comma separated list of edge servers playBack should be done from
 *		 .
 */
function KalturaAccessControlServeRemoteEdgeServerAction(){
	this.edgeServerIds = null;
}
KalturaAccessControlServeRemoteEdgeServerAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	protocolType	string		 (insertOnly).
 * @param	sourceUrl	string		.
 * @param	adType	string		.
 * @param	title	string		.
 * @param	endTime	int		.
 * @param	duration	int		Duration in milliseconds
 *		 .
 */
function KalturaAdCuePoint(){
	this.protocolType = null;
	this.sourceUrl = null;
	this.adType = null;
	this.title = null;
	this.endTime = null;
	this.duration = null;
}
KalturaAdCuePoint.inheritsFrom (KalturaCuePoint);


/**
 */
function KalturaAdminUser(){
}
KalturaAdminUser.inheritsFrom (KalturaUser);


/**
 * @param	filesPermissionInS3	string		.
 * @param	s3Region	string		.
 */
function KalturaAmazonS3StorageProfile(){
	this.filesPermissionInS3 = null;
	this.s3Region = null;
}
KalturaAmazonS3StorageProfile.inheritsFrom (KalturaStorageProfile);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaAnnotationListResponse(){
	this.objects = null;
}
KalturaAnnotationListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	parentId	string		 (insertOnly).
 * @param	quizUserEntryId	string		 (insertOnly).
 * @param	answerKey	string		.
 * @param	isCorrect	int		 (readOnly).
 * @param	correctAnswerKeys	array		Array of string
 *		  (readOnly).
 * @param	explanation	string		 (readOnly).
 */
function KalturaAnswerCuePoint(){
	this.parentId = null;
	this.quizUserEntryId = null;
	this.answerKey = null;
	this.isCorrect = null;
	this.correctAnswerKeys = null;
	this.explanation = null;
}
KalturaAnswerCuePoint.inheritsFrom (KalturaCuePoint);


/**
 * @param	service	string		.
 * @param	action	string		.
 */
function KalturaApiActionPermissionItem(){
	this.service = null;
	this.action = null;
}
KalturaApiActionPermissionItem.inheritsFrom (KalturaPermissionItem);


/**
 * @param	object	string		.
 * @param	parameter	string		.
 * @param	action	string		.
 */
function KalturaApiParameterPermissionItem(){
	this.object = null;
	this.parameter = null;
	this.action = null;
}
KalturaApiParameterPermissionItem.inheritsFrom (KalturaPermissionItem);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaAppTokenBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaAppTokenBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaAppTokenListResponse(){
	this.objects = null;
}
KalturaAppTokenListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	propertyName	string		The property name to look for, this will match to a getter on the asset object.
 *		 Should be camelCase naming convention (defining "myPropertyName" will look for getMyPropertyName())
 *		 .
 * @param	propertyValue	string		The value to compare
 *		 .
 */
function KalturaAssetDistributionPropertyCondition(){
	this.propertyName = null;
	this.propertyValue = null;
}
KalturaAssetDistributionPropertyCondition.inheritsFrom (KalturaAssetDistributionCondition);


/**
 * @param	assetParamsId	int		.
 * @param	assetParamsVersion	string		.
 * @param	assetId	string		.
 * @param	assetVersion	string		.
 * @param	readyBehavior	int		.
 * @param	format	string		The container format of the Flavor Params
 *		 .
 */
function KalturaAssetParamsOutput(){
	this.assetParamsId = null;
	this.assetParamsVersion = null;
	this.assetId = null;
	this.assetVersion = null;
	this.readyBehavior = null;
	this.format = null;
}
KalturaAssetParamsOutput.inheritsFrom (KalturaAssetParams);


/**
 * @param	properties	array		Array of key/value objects that holds the property and the value to find and compare on an asset object
 *		 .
 */
function KalturaAssetPropertiesCompareCondition(){
	this.properties = null;
}
KalturaAssetPropertiesCompareCondition.inheritsFrom (KalturaCondition);


/**
 * @param	resources	array		Array of resources associated with asset params ids
 *		 .
 */
function KalturaAssetsParamsResourceContainers(){
	this.resources = null;
}
KalturaAssetsParamsResourceContainers.inheritsFrom (KalturaResource);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaAttachmentAssetListResponse(){
	this.objects = null;
}
KalturaAttachmentAssetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	value	string		.
 */
function KalturaAttributeCondition(){
	this.value = null;
}
KalturaAttributeCondition.inheritsFrom (KalturaSearchItem);


/**
 * @param	privileges	array		The privelege needed to remove the restriction
 *		 .
 */
function KalturaAuthenticatedCondition(){
	this.privileges = null;
}
KalturaAuthenticatedCondition.inheritsFrom (KalturaCondition);


/**
 * @param	itemType	string		.
 * @param	rule	string		condition rule (include/exclude)
 *	     .
 */
function KalturaBaseEntryCloneOptionComponent(){
	this.itemType = null;
	this.rule = null;
}
KalturaBaseEntryCloneOptionComponent.inheritsFrom (KalturaBaseEntryCloneOptionItem);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaBaseEntryListResponse(){
	this.objects = null;
}
KalturaBaseEntryListResponse.inheritsFrom (KalturaListResponse);


/**
 */
function KalturaBaseSyndicationFeedBaseFilter(){
}
KalturaBaseSyndicationFeedBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaBaseSyndicationFeedListResponse(){
	this.objects = null;
}
KalturaBaseSyndicationFeedListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	idEqual	int		.
 * @param	idGreaterThanOrEqual	int		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	partnerIdNotIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	executionAttemptsGreaterThanOrEqual	int		.
 * @param	executionAttemptsLessThanOrEqual	int		.
 * @param	lockVersionGreaterThanOrEqual	int		.
 * @param	lockVersionLessThanOrEqual	int		.
 * @param	entryIdEqual	string		.
 * @param	jobTypeEqual	string		.
 * @param	jobTypeIn	string		.
 * @param	jobTypeNotIn	string		.
 * @param	jobSubTypeEqual	int		.
 * @param	jobSubTypeIn	string		.
 * @param	jobSubTypeNotIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	statusNotIn	string		.
 * @param	priorityGreaterThanOrEqual	int		.
 * @param	priorityLessThanOrEqual	int		.
 * @param	priorityEqual	int		.
 * @param	priorityIn	string		.
 * @param	priorityNotIn	string		.
 * @param	batchVersionGreaterThanOrEqual	int		.
 * @param	batchVersionLessThanOrEqual	int		.
 * @param	batchVersionEqual	int		.
 * @param	queueTimeGreaterThanOrEqual	int		.
 * @param	queueTimeLessThanOrEqual	int		.
 * @param	finishTimeGreaterThanOrEqual	int		.
 * @param	finishTimeLessThanOrEqual	int		.
 * @param	errTypeEqual	int		.
 * @param	errTypeIn	string		.
 * @param	errTypeNotIn	string		.
 * @param	errNumberEqual	int		.
 * @param	errNumberIn	string		.
 * @param	errNumberNotIn	string		.
 * @param	estimatedEffortLessThan	int		.
 * @param	estimatedEffortGreaterThan	int		.
 * @param	urgencyLessThanOrEqual	int		.
 * @param	urgencyGreaterThanOrEqual	int		.
 */
function KalturaBatchJobBaseFilter(){
	this.idEqual = null;
	this.idGreaterThanOrEqual = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.partnerIdNotIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.executionAttemptsGreaterThanOrEqual = null;
	this.executionAttemptsLessThanOrEqual = null;
	this.lockVersionGreaterThanOrEqual = null;
	this.lockVersionLessThanOrEqual = null;
	this.entryIdEqual = null;
	this.jobTypeEqual = null;
	this.jobTypeIn = null;
	this.jobTypeNotIn = null;
	this.jobSubTypeEqual = null;
	this.jobSubTypeIn = null;
	this.jobSubTypeNotIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
	this.priorityGreaterThanOrEqual = null;
	this.priorityLessThanOrEqual = null;
	this.priorityEqual = null;
	this.priorityIn = null;
	this.priorityNotIn = null;
	this.batchVersionGreaterThanOrEqual = null;
	this.batchVersionLessThanOrEqual = null;
	this.batchVersionEqual = null;
	this.queueTimeGreaterThanOrEqual = null;
	this.queueTimeLessThanOrEqual = null;
	this.finishTimeGreaterThanOrEqual = null;
	this.finishTimeLessThanOrEqual = null;
	this.errTypeEqual = null;
	this.errTypeIn = null;
	this.errTypeNotIn = null;
	this.errNumberEqual = null;
	this.errNumberIn = null;
	this.errNumberNotIn = null;
	this.estimatedEffortLessThan = null;
	this.estimatedEffortGreaterThan = null;
	this.urgencyLessThanOrEqual = null;
	this.urgencyGreaterThanOrEqual = null;
}
KalturaBatchJobBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaBatchJobListResponse(){
	this.objects = null;
}
KalturaBatchJobListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	value	bool		.
 */
function KalturaBooleanValue(){
	this.value = null;
}
KalturaBooleanValue.inheritsFrom (KalturaValue);


/**
 * @param	entryIds	string		Comma separated list of entry ids
 *		 .
 * @param	flavorParamsId	int		Flavor params id to use for conversion
 *		 .
 * @param	puserId	string		The id of the requesting user
 *		 .
 */
function KalturaBulkDownloadJobData(){
	this.entryIds = null;
	this.flavorParamsId = null;
	this.puserId = null;
}
KalturaBulkDownloadJobData.inheritsFrom (KalturaJobData);


/**
 * @param	filter	KalturaFilter		Filter for extracting the objects list to upload 
 *		 .
 * @param	templateObject	KalturaObjectBase		Template object for new object creation
 *		 .
 */
function KalturaBulkServiceFilterData(){
	this.filter = null;
	this.templateObject = null;
}
KalturaBulkServiceFilterData.inheritsFrom (KalturaBulkServiceData);


/**
 * @param	uploadedOnGreaterThanOrEqual	int		.
 * @param	uploadedOnLessThanOrEqual	int		.
 * @param	uploadedOnEqual	int		.
 * @param	statusIn	string		.
 * @param	statusEqual	int		.
 * @param	bulkUploadObjectTypeEqual	string		.
 * @param	bulkUploadObjectTypeIn	string		.
 */
function KalturaBulkUploadBaseFilter(){
	this.uploadedOnGreaterThanOrEqual = null;
	this.uploadedOnLessThanOrEqual = null;
	this.uploadedOnEqual = null;
	this.statusIn = null;
	this.statusEqual = null;
	this.bulkUploadObjectTypeEqual = null;
	this.bulkUploadObjectTypeIn = null;
}
KalturaBulkUploadBaseFilter.inheritsFrom (KalturaFilter);


/**
 */
function KalturaBulkUploadCategoryData(){
}
KalturaBulkUploadCategoryData.inheritsFrom (KalturaBulkUploadObjectData);


/**
 */
function KalturaBulkUploadCategoryEntryData(){
}
KalturaBulkUploadCategoryEntryData.inheritsFrom (KalturaBulkUploadObjectData);


/**
 */
function KalturaBulkUploadCategoryUserData(){
}
KalturaBulkUploadCategoryUserData.inheritsFrom (KalturaBulkUploadObjectData);


/**
 * @param	conversionProfileId	int		Selected profile id for all bulk entries
 *	     .
 */
function KalturaBulkUploadEntryData(){
	this.conversionProfileId = null;
}
KalturaBulkUploadEntryData.inheritsFrom (KalturaBulkUploadObjectData);


/**
 * @param	userId	string		 (readOnly).
 * @param	uploadedBy	string		The screen name of the user
 *		  (readOnly).
 * @param	conversionProfileId	int		Selected profile id for all bulk entries
 *		  (readOnly).
 * @param	resultsFileLocalPath	string		Created by the API
 *		  (readOnly).
 * @param	resultsFileUrl	string		Created by the API
 *		  (readOnly).
 * @param	numOfEntries	int		Number of created entries
 *		  (readOnly).
 * @param	numOfObjects	int		Number of created objects
 *		  (readOnly).
 * @param	filePath	string		The bulk upload file path
 *		  (readOnly).
 * @param	bulkUploadObjectType	string		Type of object for bulk upload
 *		  (readOnly).
 * @param	fileName	string		Friendly name of the file, used to be recognized later in the logs.
 *		 .
 * @param	objectData	KalturaBulkUploadObjectData		Data pertaining to the objects being uploaded
 *		  (readOnly).
 * @param	type	string		Type of bulk upload
 *		  (readOnly).
 * @param	emailRecipients	string		Recipients of the email for bulk upload success/failure
 *		 .
 * @param	numOfErrorObjects	int		Number of objects that finished on error status
 *		 .
 */
function KalturaBulkUploadJobData(){
	this.userId = null;
	this.uploadedBy = null;
	this.conversionProfileId = null;
	this.resultsFileLocalPath = null;
	this.resultsFileUrl = null;
	this.numOfEntries = null;
	this.numOfObjects = null;
	this.filePath = null;
	this.bulkUploadObjectType = null;
	this.fileName = null;
	this.objectData = null;
	this.type = null;
	this.emailRecipients = null;
	this.numOfErrorObjects = null;
}
KalturaBulkUploadJobData.inheritsFrom (KalturaJobData);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaBulkUploadListResponse(){
	this.objects = null;
}
KalturaBulkUploadListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	relativePath	string		.
 * @param	name	string		.
 * @param	referenceId	string		.
 * @param	description	string		.
 * @param	tags	string		.
 * @param	appearInList	int		.
 * @param	privacy	int		.
 * @param	inheritanceType	int		.
 * @param	userJoinPolicy	int		.
 * @param	defaultPermissionLevel	int		.
 * @param	owner	string		.
 * @param	contributionPolicy	int		.
 * @param	partnerSortValue	int		.
 * @param	moderation	bool		.
 */
function KalturaBulkUploadResultCategory(){
	this.relativePath = null;
	this.name = null;
	this.referenceId = null;
	this.description = null;
	this.tags = null;
	this.appearInList = null;
	this.privacy = null;
	this.inheritanceType = null;
	this.userJoinPolicy = null;
	this.defaultPermissionLevel = null;
	this.owner = null;
	this.contributionPolicy = null;
	this.partnerSortValue = null;
	this.moderation = null;
}
KalturaBulkUploadResultCategory.inheritsFrom (KalturaBulkUploadResult);


/**
 * @param	categoryId	int		.
 * @param	entryId	string		.
 */
function KalturaBulkUploadResultCategoryEntry(){
	this.categoryId = null;
	this.entryId = null;
}
KalturaBulkUploadResultCategoryEntry.inheritsFrom (KalturaBulkUploadResult);


/**
 * @param	categoryId	int		.
 * @param	categoryReferenceId	string		.
 * @param	userId	string		.
 * @param	permissionLevel	int		.
 * @param	updateMethod	int		.
 * @param	requiredObjectStatus	int		.
 */
function KalturaBulkUploadResultCategoryUser(){
	this.categoryId = null;
	this.categoryReferenceId = null;
	this.userId = null;
	this.permissionLevel = null;
	this.updateMethod = null;
	this.requiredObjectStatus = null;
}
KalturaBulkUploadResultCategoryUser.inheritsFrom (KalturaBulkUploadResult);


/**
 * @param	entryId	string		.
 * @param	title	string		.
 * @param	description	string		.
 * @param	tags	string		.
 * @param	url	string		.
 * @param	contentType	string		.
 * @param	conversionProfileId	int		.
 * @param	accessControlProfileId	int		.
 * @param	category	string		.
 * @param	scheduleStartDate	int		.
 * @param	scheduleEndDate	int		.
 * @param	entryStatus	int		.
 * @param	thumbnailUrl	string		.
 * @param	thumbnailSaved	bool		.
 * @param	sshPrivateKey	string		.
 * @param	sshPublicKey	string		.
 * @param	sshKeyPassphrase	string		.
 * @param	creatorId	string		.
 * @param	entitledUsersEdit	string		.
 * @param	entitledUsersPublish	string		.
 * @param	ownerId	string		.
 */
function KalturaBulkUploadResultEntry(){
	this.entryId = null;
	this.title = null;
	this.description = null;
	this.tags = null;
	this.url = null;
	this.contentType = null;
	this.conversionProfileId = null;
	this.accessControlProfileId = null;
	this.category = null;
	this.scheduleStartDate = null;
	this.scheduleEndDate = null;
	this.entryStatus = null;
	this.thumbnailUrl = null;
	this.thumbnailSaved = null;
	this.sshPrivateKey = null;
	this.sshPublicKey = null;
	this.sshKeyPassphrase = null;
	this.creatorId = null;
	this.entitledUsersEdit = null;
	this.entitledUsersPublish = null;
	this.ownerId = null;
}
KalturaBulkUploadResultEntry.inheritsFrom (KalturaBulkUploadResult);


/**
 * @param	userId	string		.
 * @param	screenName	string		.
 * @param	email	string		.
 * @param	description	string		.
 * @param	tags	string		.
 * @param	dateOfBirth	int		.
 * @param	country	string		.
 * @param	state	string		.
 * @param	city	string		.
 * @param	zip	string		.
 * @param	gender	int		.
 * @param	firstName	string		.
 * @param	lastName	string		.
 */
function KalturaBulkUploadResultUser(){
	this.userId = null;
	this.screenName = null;
	this.email = null;
	this.description = null;
	this.tags = null;
	this.dateOfBirth = null;
	this.country = null;
	this.state = null;
	this.city = null;
	this.zip = null;
	this.gender = null;
	this.firstName = null;
	this.lastName = null;
}
KalturaBulkUploadResultUser.inheritsFrom (KalturaBulkUploadResult);


/**
 */
function KalturaBulkUploadUserData(){
}
KalturaBulkUploadUserData.inheritsFrom (KalturaBulkUploadObjectData);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCaptionAssetItemListResponse(){
	this.objects = null;
}
KalturaCaptionAssetItemListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCaptionAssetListResponse(){
	this.objects = null;
}
KalturaCaptionAssetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCaptionParamsListResponse(){
	this.objects = null;
}
KalturaCaptionParamsListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	srcFileSyncLocalPath	string		.
 * @param	actualSrcFileSyncLocalPath	string		The translated path as used by the scheduler
 *		 .
 * @param	srcFileSyncRemoteUrl	string		.
 * @param	thumbParamsOutputId	int		.
 * @param	thumbAssetId	string		.
 * @param	srcAssetId	string		.
 * @param	srcAssetType	string		.
 * @param	thumbPath	string		.
 */
function KalturaCaptureThumbJobData(){
	this.srcFileSyncLocalPath = null;
	this.actualSrcFileSyncLocalPath = null;
	this.srcFileSyncRemoteUrl = null;
	this.thumbParamsOutputId = null;
	this.thumbAssetId = null;
	this.srcAssetId = null;
	this.srcAssetType = null;
	this.thumbPath = null;
}
KalturaCaptureThumbJobData.inheritsFrom (KalturaJobData);


/**
 * @param	categoriesMatchOr	string		.
 * @param	categoryEntryStatusIn	string		.
 * @param	orderBy	string		.
 * @param	categoryIdEqual	int		.
 */
function KalturaCategoryEntryAdvancedFilter(){
	this.categoriesMatchOr = null;
	this.categoryEntryStatusIn = null;
	this.orderBy = null;
	this.categoryIdEqual = null;
}
KalturaCategoryEntryAdvancedFilter.inheritsFrom (KalturaSearchItem);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCategoryEntryListResponse(){
	this.objects = null;
}
KalturaCategoryEntryListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	identifier	string		Identifier of the object
 *		 .
 */
function KalturaCategoryIdentifier(){
	this.identifier = null;
}
KalturaCategoryIdentifier.inheritsFrom (KalturaObjectIdentifier);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCategoryListResponse(){
	this.objects = null;
}
KalturaCategoryListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	memberIdEq	string		.
 * @param	memberIdIn	string		.
 * @param	memberPermissionsMatchOr	string		.
 * @param	memberPermissionsMatchAnd	string		.
 */
function KalturaCategoryUserAdvancedFilter(){
	this.memberIdEq = null;
	this.memberIdIn = null;
	this.memberPermissionsMatchOr = null;
	this.memberPermissionsMatchAnd = null;
}
KalturaCategoryUserAdvancedFilter.inheritsFrom (KalturaSearchItem);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCategoryUserListResponse(){
	this.objects = null;
}
KalturaCategoryUserListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	userIdEqual	string		.
 * @param	userIdIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	updateMethodEqual	int		.
 * @param	updateMethodIn	string		.
 * @param	permissionNamesMatchAnd	string		.
 * @param	permissionNamesMatchOr	string		.
 */
function KalturaCategoryUserProviderFilter(){
	this.userIdEqual = null;
	this.userIdIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.updateMethodEqual = null;
	this.updateMethodIn = null;
	this.permissionNamesMatchAnd = null;
	this.permissionNamesMatchOr = null;
}
KalturaCategoryUserProviderFilter.inheritsFrom (KalturaFilter);


/**
 * @param	entryId	string		Entry ID
 *		 .
 * @param	flavorAssetId	string		Flavor ID
 *		 .
 * @param	captionAssetFormats	string		Caption formats
 *		 .
 * @param	priority	string		.
 * @param	fidelity	string		.
 * @param	username	string		Api key for service provider
 *		  (readOnly).
 * @param	password	string		Api key for service provider
 *		  (readOnly).
 * @param	spokenLanguage	string		Transcript content language
 *		 .
 * @param	replaceMediaContent	bool		should replace remote media content
 *		 .
 */
function KalturaCielo24JobProviderData(){
	this.entryId = null;
	this.flavorAssetId = null;
	this.captionAssetFormats = null;
	this.priority = null;
	this.fidelity = null;
	this.username = null;
	this.password = null;
	this.spokenLanguage = null;
	this.replaceMediaContent = null;
}
KalturaCielo24JobProviderData.inheritsFrom (KalturaIntegrationJobProviderData);


/**
 * @param	offset	int		Offset in milliseconds
 *		 .
 * @param	duration	int		Duration in milliseconds
 *		 .
 */
function KalturaClipAttributes(){
	this.offset = null;
	this.duration = null;
}
KalturaClipAttributes.inheritsFrom (KalturaOperationAttributes);


/**
 * @param	code	string		.
 * @param	description	string		.
 * @param	endTime	int		.
 * @param	duration	int		Duration in milliseconds
 *		  (readOnly).
 */
function KalturaCodeCuePoint(){
	this.code = null;
	this.description = null;
	this.endTime = null;
	this.duration = null;
}
KalturaCodeCuePoint.inheritsFrom (KalturaCuePoint);


/**
 * @param	value	KalturaIntegerValue		Value to evaluate against the field and operator
 *		 .
 * @param	comparison	string		Comparing operator
 *		 .
 */
function KalturaCompareCondition(){
	this.value = null;
	this.comparison = null;
}
KalturaCompareCondition.inheritsFrom (KalturaCondition);


/**
 */
function KalturaDataCenterContentResource(){
}
KalturaDataCenterContentResource.inheritsFrom (KalturaContentResource);


/**
 * @param	resource	KalturaDataCenterContentResource		The resource to be concatenated
 *		 .
 */
function KalturaConcatAttributes(){
	this.resource = null;
}
KalturaConcatAttributes.inheritsFrom (KalturaOperationAttributes);


/**
 * @param	srcFiles	array		Source files to be concatenated
 *		 .
 * @param	destFilePath	string		Output file
 *		 .
 * @param	flavorAssetId	string		Flavor asset to be ingested with the output
 *		 .
 * @param	offset	float		Clipping offset in seconds
 *		 .
 * @param	duration	float		Clipping duration in seconds
 *		 .
 * @param	concatenatedDuration	float		duration of the concated video
 *		 .
 */
function KalturaConcatJobData(){
	this.srcFiles = null;
	this.destFilePath = null;
	this.flavorAssetId = null;
	this.offset = null;
	this.duration = null;
	this.concatenatedDuration = null;
}
KalturaConcatJobData.inheritsFrom (KalturaJobData);


/**
 * @param	fieldValues	string		.
 */
function KalturaConfigurableDistributionJobProviderData(){
	this.fieldValues = null;
}
KalturaConfigurableDistributionJobProviderData.inheritsFrom (KalturaDistributionJobProviderData);


/**
 * @param	fieldConfigArray	array		.
 * @param	itemXpathsToExtend	array		.
 * @param	useCategoryEntries	bool		When checking custom XSLT conditions using the fieldConfigArray - address only categories associated with the entry via the categoryEntry object
 *		 .
 */
function KalturaConfigurableDistributionProfile(){
	this.fieldConfigArray = null;
	this.itemXpathsToExtend = null;
	this.useCategoryEntries = null;
}
KalturaConfigurableDistributionProfile.inheritsFrom (KalturaDistributionProfile);


/**
 * @param	noDistributionProfiles	bool		.
 * @param	distributionProfileId	int		.
 * @param	distributionSunStatus	int		.
 * @param	entryDistributionFlag	int		.
 * @param	entryDistributionStatus	int		.
 * @param	hasEntryDistributionValidationErrors	bool		.
 * @param	entryDistributionValidationErrors	string		Comma seperated validation error types
 *		 .
 */
function KalturaContentDistributionSearchItem(){
	this.noDistributionProfiles = null;
	this.distributionProfileId = null;
	this.distributionSunStatus = null;
	this.entryDistributionFlag = null;
	this.entryDistributionStatus = null;
	this.hasEntryDistributionValidationErrors = null;
	this.entryDistributionValidationErrors = null;
}
KalturaContentDistributionSearchItem.inheritsFrom (KalturaSearchItem);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	createdByIdEqual	int		.
 * @param	typeEqual	int		.
 * @param	typeIn	string		.
 * @param	targetTypeEqual	int		.
 * @param	targetTypeIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaControlPanelCommandBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.createdByIdEqual = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.targetTypeEqual = null;
	this.targetTypeIn = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaControlPanelCommandBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaControlPanelCommandListResponse(){
	this.objects = null;
}
KalturaControlPanelCommandListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	srcFileSyncLocalPath	string		.
 * @param	actualSrcFileSyncLocalPath	string		The translated path as used by the scheduler
 *		 .
 * @param	srcFileSyncRemoteUrl	string		.
 * @param	srcFileSyncs	array		.
 * @param	engineVersion	int		.
 * @param	flavorParamsOutputId	int		.
 * @param	flavorParamsOutput	KalturaFlavorParamsOutput		.
 * @param	mediaInfoId	int		.
 * @param	currentOperationSet	int		.
 * @param	currentOperationIndex	int		.
 * @param	pluginData	array		.
 */
function KalturaConvartableJobData(){
	this.srcFileSyncLocalPath = null;
	this.actualSrcFileSyncLocalPath = null;
	this.srcFileSyncRemoteUrl = null;
	this.srcFileSyncs = null;
	this.engineVersion = null;
	this.flavorParamsOutputId = null;
	this.flavorParamsOutput = null;
	this.mediaInfoId = null;
	this.currentOperationSet = null;
	this.currentOperationIndex = null;
	this.pluginData = null;
}
KalturaConvartableJobData.inheritsFrom (KalturaJobData);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaConversionProfileAssetParamsListResponse(){
	this.objects = null;
}
KalturaConversionProfileAssetParamsListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaConversionProfileListResponse(){
	this.objects = null;
}
KalturaConversionProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	flavorParamsIds	string		Comma separated list of flavor param ids to convert
 *		 .
 * @param	reconvert	bool		Should reconvert when flavor already exists?
 *		 .
 */
function KalturaConvertEntryFlavorsObjectTask(){
	this.flavorParamsIds = null;
	this.reconvert = null;
}
KalturaConvertEntryFlavorsObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	entryId	string		Live stream entry id
 *		 .
 * @param	assetId	string		.
 * @param	mediaServerIndex	int		Primary or secondary media server
 *		 .
 * @param	fileIndex	int		The index of the file within the entry
 *		 .
 * @param	srcFilePath	string		The recorded live media
 *		 .
 * @param	destFilePath	string		The output file
 *		 .
 * @param	endTime	float		Duration of the live entry including all recorded segments including the current
 *		 .
 * @param	destDataFilePath	string		The data output file
 *		 .
 */
function KalturaConvertLiveSegmentJobData(){
	this.entryId = null;
	this.assetId = null;
	this.mediaServerIndex = null;
	this.fileIndex = null;
	this.srcFilePath = null;
	this.destFilePath = null;
	this.endTime = null;
	this.destDataFilePath = null;
}
KalturaConvertLiveSegmentJobData.inheritsFrom (KalturaJobData);


/**
 * @param	inputFileSyncLocalPath	string		.
 * @param	thumbHeight	int		The height of last created thumbnail, will be used to comapare if this thumbnail is the best we can have
 *		 .
 * @param	thumbBitrate	int		The bit rate of last created thumbnail, will be used to comapare if this thumbnail is the best we can have
 *		 .
 */
function KalturaConvertProfileJobData(){
	this.inputFileSyncLocalPath = null;
	this.thumbHeight = null;
	this.thumbBitrate = null;
}
KalturaConvertProfileJobData.inheritsFrom (KalturaJobData);


/**
 * @param	fromPartnerId	int		Id of the partner to copy from
 *		 .
 * @param	toPartnerId	int		Id of the partner to copy to
 *		 .
 */
function KalturaCopyPartnerJobData(){
	this.fromPartnerId = null;
	this.toPartnerId = null;
}
KalturaCopyPartnerJobData.inheritsFrom (KalturaJobData);


/**
 * @param	countryRestrictionType	int		Country restriction type (Allow or deny)
 *		 .
 * @param	countryList	string		Comma separated list of country codes to allow to deny 
 *		 .
 */
function KalturaCountryRestriction(){
	this.countryRestrictionType = null;
	this.countryList = null;
}
KalturaCountryRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaCuePointListResponse(){
	this.objects = null;
}
KalturaCuePointListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDataListResponse(){
	this.objects = null;
}
KalturaDataListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	deleteType	int		The logic to use to choose the flavors for deletion
 *		 .
 * @param	flavorParamsIds	string		Comma separated list of flavor param ids to delete or keep
 *		 .
 */
function KalturaDeleteEntryFlavorsObjectTask(){
	this.deleteType = null;
	this.flavorParamsIds = null;
}
KalturaDeleteEntryFlavorsObjectTask.inheritsFrom (KalturaObjectTask);


/**
 */
function KalturaDeleteEntryObjectTask(){
}
KalturaDeleteEntryObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	localFileSyncPath	string		.
 */
function KalturaDeleteFileJobData(){
	this.localFileSyncPath = null;
}
KalturaDeleteFileJobData.inheritsFrom (KalturaJobData);


/**
 * @param	filter	KalturaFilter		The filter should return the list of objects that need to be deleted.
 *		 .
 */
function KalturaDeleteJobData(){
	this.filter = null;
}
KalturaDeleteJobData.inheritsFrom (KalturaJobData);


/**
 */
function KalturaDeleteLocalContentObjectTask(){
}
KalturaDeleteLocalContentObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	supportClipping	bool		Should we use timing parameters - clipTo / seekFrom
 *		 .
 */
function KalturaDeliveryProfileAkamaiAppleHttpManifest(){
	this.supportClipping = null;
}
KalturaDeliveryProfileAkamaiAppleHttpManifest.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	supportClipping	bool		Should we use timing parameters - clipTo / seekFrom
 *		 .
 */
function KalturaDeliveryProfileAkamaiHds(){
	this.supportClipping = null;
}
KalturaDeliveryProfileAkamaiHds.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	useIntelliseek	bool		Should we use intelliseek
 *		 .
 */
function KalturaDeliveryProfileAkamaiHttp(){
	this.useIntelliseek = null;
}
KalturaDeliveryProfileAkamaiHttp.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	streamerTypeEqual	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaDeliveryProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.streamerTypeEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaDeliveryProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	deliveryProfileIds	array		The delivery ids that are accepted by this condition
 *		 .
 */
function KalturaDeliveryProfileCondition(){
	this.deliveryProfileIds = null;
}
KalturaDeliveryProfileCondition.inheritsFrom (KalturaCondition);


/**
 * @param	pattern	string		.
 * @param	rendererClass	string		rendererClass
 *		 .
 * @param	manifestRedirect	int		Enable to make playManifest redirect to the domain of the delivery profile
 *		 .
 */
function KalturaDeliveryProfileGenericAppleHttp(){
	this.pattern = null;
	this.rendererClass = null;
	this.manifestRedirect = null;
}
KalturaDeliveryProfileGenericAppleHttp.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	pattern	string		.
 * @param	rendererClass	string		rendererClass
 *		 .
 */
function KalturaDeliveryProfileGenericHds(){
	this.pattern = null;
	this.rendererClass = null;
}
KalturaDeliveryProfileGenericHds.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	pattern	string		.
 */
function KalturaDeliveryProfileGenericHttp(){
	this.pattern = null;
}
KalturaDeliveryProfileGenericHttp.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	pattern	string		.
 */
function KalturaDeliveryProfileGenericSilverLight(){
	this.pattern = null;
}
KalturaDeliveryProfileGenericSilverLight.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDeliveryProfileListResponse(){
	this.objects = null;
}
KalturaDeliveryProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	disableExtraAttributes	bool		.
 * @param	forceProxy	bool		.
 */
function KalturaDeliveryProfileLiveAppleHttp(){
	this.disableExtraAttributes = null;
	this.forceProxy = null;
}
KalturaDeliveryProfileLiveAppleHttp.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	enforceRtmpe	bool		enforceRtmpe
 *		 .
 * @param	prefix	string		a prefix that is added to all stream urls (replaces storageProfile::rtmpPrefix)
 *		 .
 */
function KalturaDeliveryProfileRtmp(){
	this.enforceRtmpe = null;
	this.prefix = null;
}
KalturaDeliveryProfileRtmp.inheritsFrom (KalturaDeliveryProfile);


/**
 * @param	playbackDomain	string		Delivery server playback Domain
 *		 .
 */
function KalturaDeliveryServerNode(){
	this.playbackDomain = null;
}
KalturaDeliveryServerNode.inheritsFrom (KalturaServerNode);


/**
 * @param	directoryRestrictionType	int		Kaltura directory restriction type
 *		 .
 */
function KalturaDirectoryRestriction(){
	this.directoryRestrictionType = null;
}
KalturaDirectoryRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 * @param	eventNotificationTemplateId	int		The event notification template id to dispatch
 *		 .
 */
function KalturaDispatchEventNotificationObjectTask(){
	this.eventNotificationTemplateId = null;
}
KalturaDispatchEventNotificationObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	distributionProfileId	string		Distribution profile id
 *		 .
 */
function KalturaDistributeObjectTask(){
	this.distributionProfileId = null;
}
KalturaDistributeObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	distributionProfileId	int		.
 * @param	distributionProfile	KalturaDistributionProfile		.
 * @param	entryDistributionId	int		.
 * @param	entryDistribution	KalturaEntryDistribution		.
 * @param	remoteId	string		Id of the media in the remote system
 *		 .
 * @param	providerType	string		.
 * @param	providerData	KalturaDistributionJobProviderData		Additional data that relevant for the provider only
 *		 .
 * @param	results	string		The results as returned from the remote destination
 *		 .
 * @param	sentData	string		The data as sent to the remote destination
 *		 .
 * @param	mediaFiles	array		Stores array of media files that submitted to the destination site
 *		 Could be used later for media update 
 *		 .
 */
function KalturaDistributionJobData(){
	this.distributionProfileId = null;
	this.distributionProfile = null;
	this.entryDistributionId = null;
	this.entryDistribution = null;
	this.remoteId = null;
	this.providerType = null;
	this.providerData = null;
	this.results = null;
	this.sentData = null;
	this.mediaFiles = null;
}
KalturaDistributionJobData.inheritsFrom (KalturaJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaDistributionProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaDistributionProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDistributionProfileListResponse(){
	this.objects = null;
}
KalturaDistributionProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	typeEqual	string		.
 * @param	typeIn	string		.
 */
function KalturaDistributionProviderBaseFilter(){
	this.typeEqual = null;
	this.typeIn = null;
}
KalturaDistributionProviderBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDistributionProviderListResponse(){
	this.objects = null;
}
KalturaDistributionProviderListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	conditionName	string		.
 */
function KalturaDistributionValidationErrorConditionNotMet(){
	this.conditionName = null;
}
KalturaDistributionValidationErrorConditionNotMet.inheritsFrom (KalturaDistributionValidationError);


/**
 * @param	fieldName	string		.
 * @param	validationErrorType	int		.
 * @param	validationErrorParam	string		Parameter of the validation error
 *		 For example, minimum value for KalturaDistributionValidationErrorType::STRING_TOO_SHORT validation error
 *		 .
 */
function KalturaDistributionValidationErrorInvalidData(){
	this.fieldName = null;
	this.validationErrorType = null;
	this.validationErrorParam = null;
}
KalturaDistributionValidationErrorInvalidData.inheritsFrom (KalturaDistributionValidationError);


/**
 * @param	data	string		.
 */
function KalturaDistributionValidationErrorMissingAsset(){
	this.data = null;
}
KalturaDistributionValidationErrorMissingAsset.inheritsFrom (KalturaDistributionValidationError);


/**
 * @param	flavorParamsId	string		.
 */
function KalturaDistributionValidationErrorMissingFlavor(){
	this.flavorParamsId = null;
}
KalturaDistributionValidationErrorMissingFlavor.inheritsFrom (KalturaDistributionValidationError);


/**
 * @param	fieldName	string		.
 */
function KalturaDistributionValidationErrorMissingMetadata(){
	this.fieldName = null;
}
KalturaDistributionValidationErrorMissingMetadata.inheritsFrom (KalturaDistributionValidationError);


/**
 * @param	dimensions	KalturaDistributionThumbDimensions		.
 */
function KalturaDistributionValidationErrorMissingThumbnail(){
	this.dimensions = null;
}
KalturaDistributionValidationErrorMissingThumbnail.inheritsFrom (KalturaDistributionValidationError);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDocumentListResponse(){
	this.objects = null;
}
KalturaDocumentListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	flavorData	string		For the uDRM we give the drm context data which is a json encoding of an array containing the uDRM data
 *	     for each flavor that is required from this getContextData request.
 *	     .
 */
function KalturaDrmEntryContextPluginData(){
	this.flavorData = null;
}
KalturaDrmEntryContextPluginData.inheritsFrom (KalturaPluginData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	nameLike	string		.
 * @param	typeEqual	string		.
 * @param	typeIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	conversionProfileIdEqual	int		.
 * @param	conversionProfileIdIn	string		.
 * @param	dcEqual	int		.
 * @param	dcIn	string		.
 * @param	pathEqual	string		.
 * @param	pathLike	string		.
 * @param	fileHandlerTypeEqual	string		.
 * @param	fileHandlerTypeIn	string		.
 * @param	fileNamePatternsLike	string		.
 * @param	fileNamePatternsMultiLikeOr	string		.
 * @param	fileNamePatternsMultiLikeAnd	string		.
 * @param	tagsLike	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	errorCodeEqual	string		.
 * @param	errorCodeIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaDropFolderBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.nameLike = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.conversionProfileIdEqual = null;
	this.conversionProfileIdIn = null;
	this.dcEqual = null;
	this.dcIn = null;
	this.pathEqual = null;
	this.pathLike = null;
	this.fileHandlerTypeEqual = null;
	this.fileHandlerTypeIn = null;
	this.fileNamePatternsLike = null;
	this.fileNamePatternsMultiLikeOr = null;
	this.fileNamePatternsMultiLikeAnd = null;
	this.tagsLike = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.errorCodeEqual = null;
	this.errorCodeIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaDropFolderBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	contentMatchPolicy	int		.
 * @param	slugRegex	string		Regular expression that defines valid file names to be handled.
 *		 The following might be extracted from the file name and used if defined:
 *		 - (?P<referenceId>\w+) - will be used as the drop folder file's parsed slug.
 *		 - (?P<flavorName>\w+)  - will be used as the drop folder file's parsed flavor.
 *		 .
 */
function KalturaDropFolderContentFileHandlerConfig(){
	this.contentMatchPolicy = null;
	this.slugRegex = null;
}
KalturaDropFolderContentFileHandlerConfig.inheritsFrom (KalturaDropFolderFileHandlerConfig);


/**
 * @param	dropFolderId	int		.
 * @param	dropFolderFileIds	string		.
 * @param	parsedSlug	string		.
 * @param	contentMatchPolicy	int		.
 * @param	conversionProfileId	int		.
 * @param	parsedUserId	string		.
 */
function KalturaDropFolderContentProcessorJobData(){
	this.dropFolderId = null;
	this.dropFolderFileIds = null;
	this.parsedSlug = null;
	this.contentMatchPolicy = null;
	this.conversionProfileId = null;
	this.parsedUserId = null;
}
KalturaDropFolderContentProcessorJobData.inheritsFrom (KalturaJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	dropFolderIdEqual	int		.
 * @param	dropFolderIdIn	string		.
 * @param	fileNameEqual	string		.
 * @param	fileNameIn	string		.
 * @param	fileNameLike	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	statusNotIn	string		.
 * @param	parsedSlugEqual	string		.
 * @param	parsedSlugIn	string		.
 * @param	parsedSlugLike	string		.
 * @param	parsedFlavorEqual	string		.
 * @param	parsedFlavorIn	string		.
 * @param	parsedFlavorLike	string		.
 * @param	leadDropFolderFileIdEqual	int		.
 * @param	deletedDropFolderFileIdEqual	int		.
 * @param	entryIdEqual	string		.
 * @param	errorCodeEqual	string		.
 * @param	errorCodeIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaDropFolderFileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.dropFolderIdEqual = null;
	this.dropFolderIdIn = null;
	this.fileNameEqual = null;
	this.fileNameIn = null;
	this.fileNameLike = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
	this.parsedSlugEqual = null;
	this.parsedSlugIn = null;
	this.parsedSlugLike = null;
	this.parsedFlavorEqual = null;
	this.parsedFlavorIn = null;
	this.parsedFlavorLike = null;
	this.leadDropFolderFileIdEqual = null;
	this.deletedDropFolderFileIdEqual = null;
	this.entryIdEqual = null;
	this.errorCodeEqual = null;
	this.errorCodeIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaDropFolderFileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDropFolderFileListResponse(){
	this.objects = null;
}
KalturaDropFolderFileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaDropFolderListResponse(){
	this.objects = null;
}
KalturaDropFolderListResponse.inheritsFrom (KalturaListResponse);


/**
 */
function KalturaDropFolderXmlBulkUploadFileHandlerConfig(){
}
KalturaDropFolderXmlBulkUploadFileHandlerConfig.inheritsFrom (KalturaDropFolderFileHandlerConfig);


/**
 * @param	categoryIdEqual	int		.
 * @param	categoryIdIn	string		.
 * @param	userIdEqual	string		.
 * @param	userIdIn	string		.
 * @param	permissionLevelEqual	int		.
 * @param	permissionLevelIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	updateMethodEqual	int		.
 * @param	updateMethodIn	string		.
 * @param	categoryFullIdsStartsWith	string		.
 * @param	categoryFullIdsEqual	string		.
 * @param	permissionNamesMatchAnd	string		.
 * @param	permissionNamesMatchOr	string		.
 * @param	permissionNamesNotContains	string		.
 */
function KalturaCategoryUserBaseFilter(){
	this.categoryIdEqual = null;
	this.categoryIdIn = null;
	this.userIdEqual = null;
	this.userIdIn = null;
	this.permissionLevelEqual = null;
	this.permissionLevelIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.updateMethodEqual = null;
	this.updateMethodIn = null;
	this.categoryFullIdsStartsWith = null;
	this.categoryFullIdsEqual = null;
	this.permissionNamesMatchAnd = null;
	this.permissionNamesMatchOr = null;
	this.permissionNamesNotContains = null;
}
KalturaCategoryUserBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	categoryDirectMembers	bool		Return the list of categoryUser that are not inherited from parent category - only the direct categoryUsers.
 *		 .
 * @param	freeText	string		Free text search on user id or screen name
 *		 .
 * @param	relatedGroupsByUserId	string		Return a list of categoryUser that related to the userId in this field by groups
 *		 .
 */
function KalturaCategoryUserFilter(){
	this.categoryDirectMembers = null;
	this.freeText = null;
	this.relatedGroupsByUserId = null;
}
KalturaCategoryUserFilter.inheritsFrom (KalturaCategoryUserBaseFilter);


/**
 * @param	categoryUserFilter	KalturaCategoryUserFilter		.
 */
function KalturaEmailNotificationCategoryRecipientJobData(){
	this.categoryUserFilter = null;
}
KalturaEmailNotificationCategoryRecipientJobData.inheritsFrom (KalturaEmailNotificationRecipientJobData);


/**
 * @param	categoryId	KalturaStringValue		The ID of the category whose subscribers should receive the email notification.
 *		 .
 * @param	categoryUserFilter	KalturaCategoryUserProviderFilter		.
 */
function KalturaEmailNotificationCategoryRecipientProvider(){
	this.categoryId = null;
	this.categoryUserFilter = null;
}
KalturaEmailNotificationCategoryRecipientProvider.inheritsFrom (KalturaEmailNotificationRecipientProvider);


/**
 */
function KalturaEmailNotificationParameter(){
}
KalturaEmailNotificationParameter.inheritsFrom (KalturaEventNotificationParameter);


/**
 * @param	emailRecipients	array		Email to emails and names
 *		 .
 */
function KalturaEmailNotificationStaticRecipientJobData(){
	this.emailRecipients = null;
}
KalturaEmailNotificationStaticRecipientJobData.inheritsFrom (KalturaEmailNotificationRecipientJobData);


/**
 * @param	emailRecipients	array		Email to emails and names
 *		 .
 */
function KalturaEmailNotificationStaticRecipientProvider(){
	this.emailRecipients = null;
}
KalturaEmailNotificationStaticRecipientProvider.inheritsFrom (KalturaEmailNotificationRecipientProvider);


/**
 * @param	format	string		Define the email body format
 *		 .
 * @param	subject	string		Define the email subject 
 *		 .
 * @param	body	string		Define the email body content
 *		 .
 * @param	fromEmail	string		Define the email sender email
 *		 .
 * @param	fromName	string		Define the email sender name
 *		 .
 * @param	to	KalturaEmailNotificationRecipientProvider		Email recipient emails and names
 *		 .
 * @param	cc	KalturaEmailNotificationRecipientProvider		Email recipient emails and names
 *		 .
 * @param	bcc	KalturaEmailNotificationRecipientProvider		Email recipient emails and names
 *		 .
 * @param	replyTo	KalturaEmailNotificationRecipientProvider		Default email addresses to whom the reply should be sent. 
 *		 .
 * @param	priority	int		Define the email priority
 *		 .
 * @param	confirmReadingTo	string		Email address that a reading confirmation will be sent
 *		 .
 * @param	hostname	string		Hostname to use in Message-Id and Received headers and as default HELLO string. 
 *		 If empty, the value returned by SERVER_NAME is used or 'localhost.localdomain'.
 *		 .
 * @param	messageID	string		Sets the message ID to be used in the Message-Id header.
 *		 If empty, a unique id will be generated.
 *		 .
 * @param	customHeaders	array		Adds a e-mail custom header
 *		 .
 */
function KalturaEmailNotificationTemplate(){
	this.format = null;
	this.subject = null;
	this.body = null;
	this.fromEmail = null;
	this.fromName = null;
	this.to = null;
	this.cc = null;
	this.bcc = null;
	this.replyTo = null;
	this.priority = null;
	this.confirmReadingTo = null;
	this.hostname = null;
	this.messageID = null;
	this.customHeaders = null;
}
KalturaEmailNotificationTemplate.inheritsFrom (KalturaEventNotificationTemplate);


/**
 * @param	partnerIdEqual	int		.
 * @param	typeEqual	int		.
 * @param	typeIn	string		.
 * @param	screenNameLike	string		.
 * @param	screenNameStartsWith	string		.
 * @param	emailLike	string		.
 * @param	emailStartsWith	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	firstNameStartsWith	string		.
 * @param	lastNameStartsWith	string		.
 * @param	isAdminEqual	int		.
 */
function KalturaUserBaseFilter(){
	this.partnerIdEqual = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.screenNameLike = null;
	this.screenNameStartsWith = null;
	this.emailLike = null;
	this.emailStartsWith = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.firstNameStartsWith = null;
	this.lastNameStartsWith = null;
	this.isAdminEqual = null;
}
KalturaUserBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	idOrScreenNameStartsWith	string		.
 * @param	idEqual	string		.
 * @param	idIn	string		.
 * @param	loginEnabledEqual	int		.
 * @param	roleIdEqual	string		.
 * @param	roleIdsEqual	string		.
 * @param	roleIdsIn	string		.
 * @param	firstNameOrLastNameStartsWith	string		.
 * @param	permissionNamesMultiLikeOr	string		Permission names filter expression
 *		 .
 * @param	permissionNamesMultiLikeAnd	string		Permission names filter expression
 *		 .
 */
function KalturaUserFilter(){
	this.idOrScreenNameStartsWith = null;
	this.idEqual = null;
	this.idIn = null;
	this.loginEnabledEqual = null;
	this.roleIdEqual = null;
	this.roleIdsEqual = null;
	this.roleIdsIn = null;
	this.firstNameOrLastNameStartsWith = null;
	this.permissionNamesMultiLikeOr = null;
	this.permissionNamesMultiLikeAnd = null;
}
KalturaUserFilter.inheritsFrom (KalturaUserBaseFilter);


/**
 * @param	filter	KalturaUserFilter		.
 */
function KalturaEmailNotificationUserRecipientJobData(){
	this.filter = null;
}
KalturaEmailNotificationUserRecipientJobData.inheritsFrom (KalturaEmailNotificationRecipientJobData);


/**
 * @param	filter	KalturaUserFilter		.
 */
function KalturaEmailNotificationUserRecipientProvider(){
	this.filter = null;
}
KalturaEmailNotificationUserRecipientProvider.inheritsFrom (KalturaEmailNotificationRecipientProvider);


/**
 * @param	contentLike	string		.
 * @param	contentMultiLikeOr	string		.
 * @param	contentMultiLikeAnd	string		.
 */
function KalturaEntryCaptionAssetSearchItem(){
	this.contentLike = null;
	this.contentMultiLikeOr = null;
	this.contentMultiLikeAnd = null;
}
KalturaEntryCaptionAssetSearchItem.inheritsFrom (KalturaSearchItem);


/**
 * @param	entryId	string		The entry ID in the context of which the playlist should be built
 *	     .
 * @param	followEntryRedirect	int		Is this a redirected entry followup?
 *	     .
 */
function KalturaEntryContext(){
	this.entryId = null;
	this.followEntryRedirect = null;
}
KalturaEntryContext.inheritsFrom (KalturaContext);


/**
 * @param	flavorAssetId	string		Id of the current flavor.
 *		 .
 * @param	flavorTags	string		The tags of the flavors that should be used for playback.
 *		 .
 * @param	streamerType	string		Playback streamer type: RTMP, HTTP, appleHttps, rtsp, sl.
 *		 .
 * @param	mediaProtocol	string		Protocol of the specific media object.
 *		 .
 */
function KalturaEntryContextDataParams(){
	this.flavorAssetId = null;
	this.flavorTags = null;
	this.streamerType = null;
	this.mediaProtocol = null;
}
KalturaEntryContextDataParams.inheritsFrom (KalturaAccessControlScope);


/**
 * @param	isSiteRestricted	bool		.
 * @param	isCountryRestricted	bool		.
 * @param	isSessionRestricted	bool		.
 * @param	isIpAddressRestricted	bool		.
 * @param	isUserAgentRestricted	bool		.
 * @param	previewLength	int		.
 * @param	isScheduledNow	bool		.
 * @param	isAdmin	bool		.
 * @param	streamerType	string		http/rtmp/hdnetwork
 *		 .
 * @param	mediaProtocol	string		http/https, rtmp/rtmpe
 *		 .
 * @param	storageProfilesXML	string		.
 * @param	accessControlMessages	array		Array of messages as received from the access control rules that invalidated
 *		 .
 * @param	accessControlActions	array		Array of actions as received from the access control rules that invalidated
 *		 .
 * @param	flavorAssets	array		Array of allowed flavor assets according to access control limitations and requested tags
 *		 .
 * @param	pluginData	map		Array of allowed flavor assets according to access control limitations and requested tags
 *	     .
 */
function KalturaEntryContextDataResult(){
	this.isSiteRestricted = null;
	this.isCountryRestricted = null;
	this.isSessionRestricted = null;
	this.isIpAddressRestricted = null;
	this.isUserAgentRestricted = null;
	this.previewLength = null;
	this.isScheduledNow = null;
	this.isAdmin = null;
	this.streamerType = null;
	this.mediaProtocol = null;
	this.storageProfilesXML = null;
	this.accessControlMessages = null;
	this.accessControlActions = null;
	this.flavorAssets = null;
	this.pluginData = null;
}
KalturaEntryContextDataResult.inheritsFrom (KalturaContextDataResult);


/**
 * @param	cuePointsFreeText	string		.
 * @param	cuePointTypeIn	string		.
 * @param	cuePointSubTypeEqual	int		.
 */
function KalturaEntryCuePointSearchFilter(){
	this.cuePointsFreeText = null;
	this.cuePointTypeIn = null;
	this.cuePointSubTypeEqual = null;
}
KalturaEntryCuePointSearchFilter.inheritsFrom (KalturaSearchItem);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaEntryDistributionListResponse(){
	this.objects = null;
}
KalturaEntryDistributionListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	identifier	string		Identifier of the object
 *		 .
 */
function KalturaEntryIdentifier(){
	this.identifier = null;
}
KalturaEntryIdentifier.inheritsFrom (KalturaObjectIdentifier);


/**
 * @param	entryId	string		.
 * @param	peakAudience	int		.
 * @param	peakDvrAudience	int		.
 */
function KalturaEntryLiveStats(){
	this.entryId = null;
	this.peakAudience = null;
	this.peakDvrAudience = null;
}
KalturaEntryLiveStats.inheritsFrom (KalturaLiveStats);


/**
 * @param	eventType	string		.
 */
function KalturaEventCuePoint(){
	this.eventType = null;
}
KalturaEventCuePoint.inheritsFrom (KalturaCuePoint);


/**
 */
function KalturaBooleanField(){
}
KalturaBooleanField.inheritsFrom (KalturaBooleanValue);


/**
 * @param	field	KalturaBooleanField		The field to be evaluated at runtime
 *		 .
 */
function KalturaEventFieldCondition(){
	this.field = null;
}
KalturaEventFieldCondition.inheritsFrom (KalturaCondition);


/**
 * @param	values	array		.
 * @param	allowedValues	array		Used to restrict the values to close list
 *		 .
 */
function KalturaEventNotificationArrayParameter(){
	this.values = null;
	this.allowedValues = null;
}
KalturaEventNotificationArrayParameter.inheritsFrom (KalturaEventNotificationParameter);


/**
 * @param	templateId	int		.
 * @param	contentParameters	array		Define the content dynamic parameters
 *		 .
 */
function KalturaEventNotificationDispatchJobData(){
	this.templateId = null;
	this.contentParameters = null;
}
KalturaEventNotificationDispatchJobData.inheritsFrom (KalturaJobData);


/**
 * @param	objectId	string		.
 * @param	scopeObjectType	string		.
 */
function KalturaEventNotificationScope(){
	this.objectId = null;
	this.scopeObjectType = null;
}
KalturaEventNotificationScope.inheritsFrom (KalturaScope);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	typeEqual	string		.
 * @param	typeIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaEventNotificationTemplateBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaEventNotificationTemplateBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaEventNotificationTemplateListResponse(){
	this.objects = null;
}
KalturaEventNotificationTemplateListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	modifiedColumns	string		Comma seperated column names to be tested
 *		 .
 */
function KalturaEventObjectChangedCondition(){
	this.modifiedColumns = null;
}
KalturaEventObjectChangedCondition.inheritsFrom (KalturaCondition);


/**
 * @param	metadataProfileId	int		Metadata profile id to lookup the metadata object
 *		 .
 * @param	metadataObjectType	string		Metadata object type to lookup the metadata object
 *		 .
 * @param	xslt	string		The XSLT to execute
 *		 .
 */
function KalturaExecuteMetadataXsltObjectTask(){
	this.metadataProfileId = null;
	this.metadataObjectType = null;
	this.xslt = null;
}
KalturaExecuteMetadataXsltObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaExternalMediaEntryListResponse(){
	this.objects = null;
}
KalturaExternalMediaEntryListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaFeatureStatusListResponse(){
	this.objects = null;
}
KalturaFeatureStatusListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	itemHandlingLimit	int		.
 * @param	feedItemInfo	KalturaFeedItemInfo		.
 */
function KalturaFeedDropFolder(){
	this.itemHandlingLimit = null;
	this.feedItemInfo = null;
}
KalturaFeedDropFolder.inheritsFrom (KalturaDropFolder);


/**
 * @param	hash	string		MD5 or Sha1 encrypted string
 *		 .
 * @param	feedXmlPath	string		Path of the original Feed content XML
 *		 .
 */
function KalturaFeedDropFolderFile(){
	this.hash = null;
	this.feedXmlPath = null;
}
KalturaFeedDropFolderFile.inheritsFrom (KalturaDropFolderFile);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaFileAssetListResponse(){
	this.objects = null;
}
KalturaFileAssetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	partnerIdEqual	int		.
 * @param	fileObjectTypeEqual	string		.
 * @param	fileObjectTypeIn	string		.
 * @param	objectIdEqual	string		.
 * @param	objectIdIn	string		.
 * @param	versionEqual	string		.
 * @param	versionIn	string		.
 * @param	objectSubTypeEqual	int		.
 * @param	objectSubTypeIn	string		.
 * @param	dcEqual	string		.
 * @param	dcIn	string		.
 * @param	originalEqual	int		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	readyAtGreaterThanOrEqual	int		.
 * @param	readyAtLessThanOrEqual	int		.
 * @param	syncTimeGreaterThanOrEqual	int		.
 * @param	syncTimeLessThanOrEqual	int		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	fileTypeEqual	int		.
 * @param	fileTypeIn	string		.
 * @param	linkedIdEqual	int		.
 * @param	linkCountGreaterThanOrEqual	int		.
 * @param	linkCountLessThanOrEqual	int		.
 * @param	fileSizeGreaterThanOrEqual	float		.
 * @param	fileSizeLessThanOrEqual	float		.
 */
function KalturaFileSyncBaseFilter(){
	this.partnerIdEqual = null;
	this.fileObjectTypeEqual = null;
	this.fileObjectTypeIn = null;
	this.objectIdEqual = null;
	this.objectIdIn = null;
	this.versionEqual = null;
	this.versionIn = null;
	this.objectSubTypeEqual = null;
	this.objectSubTypeIn = null;
	this.dcEqual = null;
	this.dcIn = null;
	this.originalEqual = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.readyAtGreaterThanOrEqual = null;
	this.readyAtLessThanOrEqual = null;
	this.syncTimeGreaterThanOrEqual = null;
	this.syncTimeLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.fileTypeEqual = null;
	this.fileTypeIn = null;
	this.linkedIdEqual = null;
	this.linkCountGreaterThanOrEqual = null;
	this.linkCountLessThanOrEqual = null;
	this.fileSizeGreaterThanOrEqual = null;
	this.fileSizeLessThanOrEqual = null;
}
KalturaFileSyncBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaFileSyncListResponse(){
	this.objects = null;
}
KalturaFileSyncListResponse.inheritsFrom (KalturaListResponse);


/**
 */
function KalturaFlattenJobData(){
}
KalturaFlattenJobData.inheritsFrom (KalturaJobData);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaFlavorAssetListResponse(){
	this.objects = null;
}
KalturaFlavorAssetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaFlavorParamsListResponse(){
	this.objects = null;
}
KalturaFlavorParamsListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaFlavorParamsOutputListResponse(){
	this.objects = null;
}
KalturaFlavorParamsOutputListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	xml	string		.
 * @param	resultParseData	string		.
 * @param	resultParserType	int		.
 */
function KalturaGenericDistributionJobProviderData(){
	this.xml = null;
	this.resultParseData = null;
	this.resultParserType = null;
}
KalturaGenericDistributionJobProviderData.inheritsFrom (KalturaDistributionJobProviderData);


/**
 * @param	genericProviderId	int		 (insertOnly).
 * @param	submitAction	KalturaGenericDistributionProfileAction		.
 * @param	updateAction	KalturaGenericDistributionProfileAction		.
 * @param	deleteAction	KalturaGenericDistributionProfileAction		.
 * @param	fetchReportAction	KalturaGenericDistributionProfileAction		.
 * @param	updateRequiredEntryFields	string		.
 * @param	updateRequiredMetadataXPaths	string		.
 */
function KalturaGenericDistributionProfile(){
	this.genericProviderId = null;
	this.submitAction = null;
	this.updateAction = null;
	this.deleteAction = null;
	this.fetchReportAction = null;
	this.updateRequiredEntryFields = null;
	this.updateRequiredMetadataXPaths = null;
}
KalturaGenericDistributionProfile.inheritsFrom (KalturaDistributionProfile);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	genericDistributionProviderIdEqual	int		.
 * @param	genericDistributionProviderIdIn	string		.
 * @param	actionEqual	int		.
 * @param	actionIn	string		.
 */
function KalturaGenericDistributionProviderActionBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.genericDistributionProviderIdEqual = null;
	this.genericDistributionProviderIdIn = null;
	this.actionEqual = null;
	this.actionIn = null;
}
KalturaGenericDistributionProviderActionBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaGenericDistributionProviderActionListResponse(){
	this.objects = null;
}
KalturaGenericDistributionProviderActionListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaGenericDistributionProviderListResponse(){
	this.objects = null;
}
KalturaGenericDistributionProviderListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	feedDescription	string		feed description
 *	    .
 * @param	feedLandingPage	string		feed landing page (i.e publisher website)
 *		.
 */
function KalturaGenericSyndicationFeed(){
	this.feedDescription = null;
	this.feedLandingPage = null;
}
KalturaGenericSyndicationFeed.inheritsFrom (KalturaBaseSyndicationFeed);


/**
 * @param	adultContent	string		.
 */
function KalturaGoogleVideoSyndicationFeed(){
	this.adultContent = null;
}
KalturaGoogleVideoSyndicationFeed.inheritsFrom (KalturaBaseSyndicationFeed);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaGroupUserListResponse(){
	this.objects = null;
}
KalturaGroupUserListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	hashName	string		hash name
 *		 .
 * @param	hashSecret	string		hash secret
 *		 .
 */
function KalturaHashCondition(){
	this.hashName = null;
	this.hashSecret = null;
}
KalturaHashCondition.inheritsFrom (KalturaCondition);


/**
 */
function KalturaHttpNotificationDataFields(){
}
KalturaHttpNotificationDataFields.inheritsFrom (KalturaHttpNotificationData);


/**
 * @param	content	KalturaStringValue		.
 */
function KalturaHttpNotificationDataText(){
	this.content = null;
}
KalturaHttpNotificationDataText.inheritsFrom (KalturaHttpNotificationData);


/**
 * @param	apiObjectType	string		Kaltura API object type
 *		 .
 * @param	format	int		Data format
 *		 .
 * @param	ignoreNull	bool		Ignore null attributes during serialization
 *		 .
 * @param	code	string		PHP code
 *		 .
 */
function KalturaHttpNotificationObjectData(){
	this.apiObjectType = null;
	this.format = null;
	this.ignoreNull = null;
	this.code = null;
}
KalturaHttpNotificationObjectData.inheritsFrom (KalturaHttpNotificationData);


/**
 * @param	url	string		Remote server URL
 *		 .
 * @param	method	int		Request method.
 *		 .
 * @param	data	KalturaHttpNotificationData		Data to send.
 *		 .
 * @param	timeout	int		The maximum number of seconds to allow cURL functions to execute.
 *		 .
 * @param	connectTimeout	int		The number of seconds to wait while trying to connect.
 *		 Must be larger than zero.
 *		 .
 * @param	username	string		A username to use for the connection.
 *		 .
 * @param	password	string		A password to use for the connection.
 *		 .
 * @param	authenticationMethod	int		The HTTP authentication method to use.
 *		 .
 * @param	sslVersion	int		The SSL version (2 or 3) to use.
 *		 By default PHP will try to determine this itself, although in some cases this must be set manually.
 *		 .
 * @param	sslCertificate	string		SSL certificate to verify the peer with.
 *		 .
 * @param	sslCertificateType	string		The format of the certificate.
 *		 .
 * @param	sslCertificatePassword	string		The password required to use the certificate.
 *		 .
 * @param	sslEngine	string		The identifier for the crypto engine of the private SSL key specified in ssl key.
 *		 .
 * @param	sslEngineDefault	string		The identifier for the crypto engine used for asymmetric crypto operations.
 *		 .
 * @param	sslKeyType	string		The key type of the private SSL key specified in ssl key - PEM / DER / ENG.
 *		 .
 * @param	sslKey	string		Private SSL key.
 *		 .
 * @param	sslKeyPassword	string		The secret password needed to use the private SSL key specified in ssl key.
 *		 .
 * @param	customHeaders	array		Adds a e-mail custom header
 *		 .
 */
function KalturaHttpNotificationTemplate(){
	this.url = null;
	this.method = null;
	this.data = null;
	this.timeout = null;
	this.connectTimeout = null;
	this.username = null;
	this.password = null;
	this.authenticationMethod = null;
	this.sslVersion = null;
	this.sslCertificate = null;
	this.sslCertificateType = null;
	this.sslCertificatePassword = null;
	this.sslEngine = null;
	this.sslEngineDefault = null;
	this.sslKeyType = null;
	this.sslKey = null;
	this.sslKeyPassword = null;
	this.customHeaders = null;
}
KalturaHttpNotificationTemplate.inheritsFrom (KalturaEventNotificationTemplate);


/**
 * @param	feedDescription	string		feed description
 *	         .
 * @param	language	string		feed language
 *	         .
 * @param	feedLandingPage	string		feed landing page (i.e publisher website)
 *	         .
 * @param	ownerName	string		author/publisher name
 *	         .
 * @param	ownerEmail	string		publisher email
 *	         .
 * @param	feedImageUrl	string		podcast thumbnail
 *	         .
 * @param	category	string		 (readOnly).
 * @param	adultContent	string		.
 * @param	feedAuthor	string		.
 * @param	enforceOrder	int		true in case you want to enfore the palylist order on the 
 *			 .
 */
function KalturaITunesSyndicationFeed(){
	this.feedDescription = null;
	this.language = null;
	this.feedLandingPage = null;
	this.ownerName = null;
	this.ownerEmail = null;
	this.feedImageUrl = null;
	this.category = null;
	this.adultContent = null;
	this.feedAuthor = null;
	this.enforceOrder = null;
}
KalturaITunesSyndicationFeed.inheritsFrom (KalturaBaseSyndicationFeed);


/**
 * @param	srcFileUrl	string		.
 * @param	destFileLocalPath	string		.
 * @param	flavorAssetId	string		.
 * @param	fileSize	int		.
 */
function KalturaImportJobData(){
	this.srcFileUrl = null;
	this.destFileLocalPath = null;
	this.flavorAssetId = null;
	this.fileSize = null;
}
KalturaImportJobData.inheritsFrom (KalturaJobData);


/**
 * @param	srcFileUrl	string		.
 * @param	destFileLocalPath	string		.
 * @param	metadataId	int		.
 */
function KalturaImportMetadataJobData(){
	this.srcFileUrl = null;
	this.destFileLocalPath = null;
	this.metadataId = null;
}
KalturaImportMetadataJobData.inheritsFrom (KalturaJobData);


/**
 * @param	indexIdGreaterThan	int		.
 */
function KalturaIndexAdvancedFilter(){
	this.indexIdGreaterThan = null;
}
KalturaIndexAdvancedFilter.inheritsFrom (KalturaSearchItem);


/**
 * @param	filter	KalturaFilter		The filter should return the list of objects that need to be reindexed.
 *		 .
 * @param	lastIndexId	int		Indicates the last id that reindexed, used when the batch crached, to re-run from the last crash point.
 *		 .
 * @param	shouldUpdate	bool		Indicates that the object columns and attributes values should be recalculated before reindexed.
 *		 .
 */
function KalturaIndexJobData(){
	this.filter = null;
	this.lastIndexId = null;
	this.shouldUpdate = null;
}
KalturaIndexJobData.inheritsFrom (KalturaJobData);


/**
 * @param	changedCategoryId	int		.
 * @param	deletedPrivacyContexts	string		.
 * @param	addedPrivacyContexts	string		.
 */
function KalturaIndexTagsByPrivacyContextJobData(){
	this.changedCategoryId = null;
	this.deletedPrivacyContexts = null;
	this.addedPrivacyContexts = null;
}
KalturaIndexTagsByPrivacyContextJobData.inheritsFrom (KalturaJobData);


/**
 * @param	callbackNotificationUrl	string		 (readOnly).
 * @param	providerType	string		.
 * @param	providerData	KalturaIntegrationJobProviderData		Additional data that relevant for the provider only
 *		 .
 * @param	triggerType	string		.
 * @param	triggerData	KalturaIntegrationJobTriggerData		Additional data that relevant for the trigger only
 *		 .
 */
function KalturaIntegrationJobData(){
	this.callbackNotificationUrl = null;
	this.providerType = null;
	this.providerData = null;
	this.triggerType = null;
	this.triggerData = null;
}
KalturaIntegrationJobData.inheritsFrom (KalturaJobData);


/**
 * @param	ipAddressRestrictionType	int		Ip address restriction type (Allow or deny)
 *		 .
 * @param	ipAddressList	string		Comma separated list of ip address to allow to deny 
 *		 .
 */
function KalturaIpAddressRestriction(){
	this.ipAddressRestrictionType = null;
	this.ipAddressList = null;
}
KalturaIpAddressRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 * @param	serviceToken	string		.
 */
function KalturaKontikiStorageProfile(){
	this.serviceToken = null;
}
KalturaKontikiStorageProfile.inheritsFrom (KalturaStorageProfile);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaLikeListResponse(){
	this.objects = null;
}
KalturaLikeListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	limitFlavorsRestrictionType	int		Limit flavors restriction type (Allow or deny)
 *		 .
 * @param	flavorParamsIds	string		Comma separated list of flavor params ids to allow to deny 
 *		 .
 */
function KalturaLimitFlavorsRestriction(){
	this.limitFlavorsRestrictionType = null;
	this.flavorParamsIds = null;
}
KalturaLimitFlavorsRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaLiveChannelListResponse(){
	this.objects = null;
}
KalturaLiveChannelListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaLiveChannelSegmentListResponse(){
	this.objects = null;
}
KalturaLiveChannelSegmentListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	timeReference	int		.
 * @param	timeZoneOffset	int		.
 * @param	entryIds	string		.
 * @param	outputPath	string		.
 * @param	recipientEmail	string		.
 */
function KalturaLiveReportExportJobData(){
	this.timeReference = null;
	this.timeZoneOffset = null;
	this.entryIds = null;
	this.outputPath = null;
	this.recipientEmail = null;
}
KalturaLiveReportExportJobData.inheritsFrom (KalturaJobData);


/**
 * @param	objects	KalturaLiveStats		.
 */
function KalturaLiveStatsListResponse(){
	this.objects = null;
}
KalturaLiveStatsListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaLiveStreamListResponse(){
	this.objects = null;
}
KalturaLiveStreamListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	userId	string		.
 * @param	password	string		.
 * @param	streamName	string		.
 * @param	applicationName	string		.
 */
function KalturaLiveStreamPushPublishRTMPConfiguration(){
	this.userId = null;
	this.password = null;
	this.streamName = null;
	this.applicationName = null;
}
KalturaLiveStreamPushPublishRTMPConfiguration.inheritsFrom (KalturaLiveStreamPushPublishConfiguration);


/**
 * @param	mailType	string		.
 * @param	mailPriority	int		.
 * @param	status	int		.
 * @param	recipientName	string		.
 * @param	recipientEmail	string		.
 * @param	recipientId	int		kuserId  
 *		 .
 * @param	fromName	string		.
 * @param	fromEmail	string		.
 * @param	bodyParams	string		.
 * @param	subjectParams	string		.
 * @param	templatePath	string		.
 * @param	language	string		.
 * @param	campaignId	int		.
 * @param	minSendDate	int		.
 * @param	isHtml	bool		.
 * @param	separator	string		.
 */
function KalturaMailJobData(){
	this.mailType = null;
	this.mailPriority = null;
	this.status = null;
	this.recipientName = null;
	this.recipientEmail = null;
	this.recipientId = null;
	this.fromName = null;
	this.fromEmail = null;
	this.bodyParams = null;
	this.subjectParams = null;
	this.templatePath = null;
	this.language = null;
	this.campaignId = null;
	this.minSendDate = null;
	this.isHtml = null;
	this.separator = null;
}
KalturaMailJobData.inheritsFrom (KalturaJobData);


/**
 * @param	values	array		.
 */
function KalturaMatchCondition(){
	this.values = null;
}
KalturaMatchCondition.inheritsFrom (KalturaCondition);


/**
 * @param	flavorAssetIdEqual	string		.
 */
function KalturaMediaInfoBaseFilter(){
	this.flavorAssetIdEqual = null;
}
KalturaMediaInfoBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaMediaInfoListResponse(){
	this.objects = null;
}
KalturaMediaInfoListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaMediaListResponse(){
	this.objects = null;
}
KalturaMediaListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaMetadataListResponse(){
	this.objects = null;
}
KalturaMetadataListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	idEqual	int		.
 * @param	partnerIdEqual	int		.
 * @param	metadataObjectTypeEqual	string		.
 * @param	metadataObjectTypeIn	string		.
 * @param	versionEqual	int		.
 * @param	nameEqual	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createModeEqual	int		.
 * @param	createModeNotEqual	int		.
 * @param	createModeIn	string		.
 * @param	createModeNotIn	string		.
 */
function KalturaMetadataProfileBaseFilter(){
	this.idEqual = null;
	this.partnerIdEqual = null;
	this.metadataObjectTypeEqual = null;
	this.metadataObjectTypeIn = null;
	this.versionEqual = null;
	this.nameEqual = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createModeEqual = null;
	this.createModeNotEqual = null;
	this.createModeIn = null;
	this.createModeNotIn = null;
}
KalturaMetadataProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaMetadataProfileFieldListResponse(){
	this.objects = null;
}
KalturaMetadataProfileFieldListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaMetadataProfileListResponse(){
	this.objects = null;
}
KalturaMetadataProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 */
function KalturaMetadataResponseProfileMapping(){
}
KalturaMetadataResponseProfileMapping.inheritsFrom (KalturaResponseProfileMapping);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaMixListResponse(){
	this.objects = null;
}
KalturaMixListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaModerationFlagListResponse(){
	this.objects = null;
}
KalturaModerationFlagListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	addRemoveType	int		Should the object task add or remove categories?
 *		 .
 * @param	categoryIds	array		The list of category ids to add or remove
 *		 .
 */
function KalturaModifyCategoriesObjectTask(){
	this.addRemoveType = null;
	this.categoryIds = null;
}
KalturaModifyCategoriesObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	srcCategoryId	int		Source category id
 *		 .
 * @param	destCategoryId	int		Destination category id
 *	     .
 * @param	lastMovedCategoryId	int		Saves the last category id that its entries moved completely
 *	     In case of crash the batch will restart from that point
 *	     .
 * @param	lastMovedCategoryPageIndex	int		Saves the last page index of the child categories filter pager
 *	     In case of crash the batch will restart from that point
 *	     .
 * @param	lastMovedCategoryEntryPageIndex	int		Saves the last page index of the category entries filter pager
 *	     In case of crash the batch will restart from that point
 *	     .
 * @param	moveFromChildren	bool		All entries from all child categories will be moved as well
 *	     .
 * @param	copyOnly	bool		Entries won't be deleted from the source entry
 *	     .
 * @param	destCategoryFullIds	string		Destination categories fallback ids
 *	     .
 */
function KalturaMoveCategoryEntriesJobData(){
	this.srcCategoryId = null;
	this.destCategoryId = null;
	this.lastMovedCategoryId = null;
	this.lastMovedCategoryPageIndex = null;
	this.lastMovedCategoryEntryPageIndex = null;
	this.moveFromChildren = null;
	this.copyOnly = null;
	this.destCategoryFullIds = null;
}
KalturaMoveCategoryEntriesJobData.inheritsFrom (KalturaJobData);


/**
 * @param	userId	string		.
 * @param	type	int		.
 * @param	typeAsString	string		.
 * @param	objectId	string		.
 * @param	status	int		.
 * @param	data	string		.
 * @param	numberOfAttempts	int		.
 * @param	notificationResult	string		.
 * @param	objType	int		.
 */
function KalturaNotificationJobData(){
	this.userId = null;
	this.type = null;
	this.typeAsString = null;
	this.objectId = null;
	this.status = null;
	this.data = null;
	this.numberOfAttempts = null;
	this.notificationResult = null;
	this.objType = null;
}
KalturaNotificationJobData.inheritsFrom (KalturaJobData);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaObjectListResponse(){
	this.objects = null;
}
KalturaObjectListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	conditions	array		.
 */
function KalturaOrCondition(){
	this.conditions = null;
}
KalturaOrCondition.inheritsFrom (KalturaCondition);


/**
 * @param	captionAssetId	string		.
 */
function KalturaParseCaptionAssetJobData(){
	this.captionAssetId = null;
}
KalturaParseCaptionAssetJobData.inheritsFrom (KalturaJobData);


/**
 * @param	multiLanaguageCaptionAssetId	string		.
 * @param	entryId	string		.
 * @param	fileLocation	string		.
 */
function KalturaParseMultiLanguageCaptionAssetJobData(){
	this.multiLanaguageCaptionAssetId = null;
	this.entryId = null;
	this.fileLocation = null;
}
KalturaParseMultiLanguageCaptionAssetJobData.inheritsFrom (KalturaJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	idNotIn	string		.
 * @param	nameLike	string		.
 * @param	nameMultiLikeOr	string		.
 * @param	nameMultiLikeAnd	string		.
 * @param	nameEqual	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	partnerPackageEqual	int		.
 * @param	partnerPackageGreaterThanOrEqual	int		.
 * @param	partnerPackageLessThanOrEqual	int		.
 * @param	partnerPackageIn	string		.
 * @param	partnerGroupTypeEqual	int		.
 * @param	partnerNameDescriptionWebsiteAdminNameAdminEmailLike	string		.
 */
function KalturaPartnerBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.idNotIn = null;
	this.nameLike = null;
	this.nameMultiLikeOr = null;
	this.nameMultiLikeAnd = null;
	this.nameEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.partnerPackageEqual = null;
	this.partnerPackageGreaterThanOrEqual = null;
	this.partnerPackageLessThanOrEqual = null;
	this.partnerPackageIn = null;
	this.partnerGroupTypeEqual = null;
	this.partnerNameDescriptionWebsiteAdminNameAdminEmailLike = null;
}
KalturaPartnerBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaPartnerListResponse(){
	this.objects = null;
}
KalturaPartnerListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	total	KalturaVarPartnerUsageItem		.
 * @param	objects	array		.
 */
function KalturaPartnerUsageListResponse(){
	this.total = null;
	this.objects = null;
}
KalturaPartnerUsageListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaPermissionItemListResponse(){
	this.objects = null;
}
KalturaPermissionItemListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaPermissionListResponse(){
	this.objects = null;
}
KalturaPermissionListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaPlaylistListResponse(){
	this.objects = null;
}
KalturaPlaylistListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	streamID	string		.
 * @param	backupStreamID	string		.
 * @param	rtmp	string		.
 * @param	encoderIP	string		.
 * @param	backupEncoderIP	string		.
 * @param	encoderPassword	string		.
 * @param	encoderUsername	string		.
 * @param	endDate	int		.
 * @param	returnVal	string		.
 * @param	mediaType	int		.
 * @param	primaryBroadcastingUrl	string		.
 * @param	secondaryBroadcastingUrl	string		.
 * @param	streamName	string		.
 */
function KalturaProvisionJobData(){
	this.streamID = null;
	this.backupStreamID = null;
	this.rtmp = null;
	this.encoderIP = null;
	this.backupEncoderIP = null;
	this.encoderPassword = null;
	this.encoderUsername = null;
	this.endDate = null;
	this.returnVal = null;
	this.mediaType = null;
	this.primaryBroadcastingUrl = null;
	this.secondaryBroadcastingUrl = null;
	this.streamName = null;
}
KalturaProvisionJobData.inheritsFrom (KalturaJobData);


/**
 * @param	optionalAnswers	map		Array of key value answerKey->optionAnswer objects
 *		 .
 * @param	hint	string		.
 * @param	question	string		.
 * @param	explanation	string		.
 */
function KalturaQuestionCuePoint(){
	this.optionalAnswers = null;
	this.hint = null;
	this.question = null;
	this.explanation = null;
}
KalturaQuestionCuePoint.inheritsFrom (KalturaCuePoint);


/**
 * @param	isQuiz	int		.
 */
function KalturaQuizAdvancedFilter(){
	this.isQuiz = null;
}
KalturaQuizAdvancedFilter.inheritsFrom (KalturaSearchItem);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaQuizListResponse(){
	this.objects = null;
}
KalturaQuizListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	score	int		 (readOnly).
 */
function KalturaQuizUserEntry(){
	this.score = null;
}
KalturaQuizUserEntry.inheritsFrom (KalturaUserEntry);


/**
 */
function KalturaRecalculateCacheJobData(){
}
KalturaRecalculateCacheJobData.inheritsFrom (KalturaJobData);


/**
 */
function KalturaRemoteDropFolder(){
}
KalturaRemoteDropFolder.inheritsFrom (KalturaDropFolder);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaRemotePathListResponse(){
	this.objects = null;
}
KalturaRemotePathListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 */
function KalturaReportBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
}
KalturaReportBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	keywords	string		Search keywords to filter objects
 *		 .
 * @param	searchInTags	bool		Search keywords in onjects tags
 *		 .
 * @param	searchInAdminTags	bool		Search keywords in onjects admin tags
 *		 .
 * @param	categories	string		Search onjects in specified categories
 *		 .
 * @param	timeZoneOffset	int		Time zone offset in minutes
 *		 .
 * @param	interval	string		Aggregated results according to interval
 *		 .
 */
function KalturaReportInputFilter(){
	this.keywords = null;
	this.searchInTags = null;
	this.searchInAdminTags = null;
	this.categories = null;
	this.timeZoneOffset = null;
	this.interval = null;
}
KalturaReportInputFilter.inheritsFrom (KalturaReportInputBaseFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaReportListResponse(){
	this.objects = null;
}
KalturaReportListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaResponseProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaResponseProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	id	int		Auto generated numeric identifier
 *		 .
 * @param	systemName	string		Unique system name
 *		 .
 */
function KalturaResponseProfileHolder(){
	this.id = null;
	this.systemName = null;
}
KalturaResponseProfileHolder.inheritsFrom (KalturaBaseResponseProfile);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaResponseProfileListResponse(){
	this.objects = null;
}
KalturaResponseProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	maxResults	int		.
 * @param	resultsFilePath	string		.
 * @param	referenceTime	int		.
 */
function KalturaScheduledTaskJobData(){
	this.maxResults = null;
	this.resultsFilePath = null;
	this.referenceTime = null;
}
KalturaScheduledTaskJobData.inheritsFrom (KalturaJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	lastExecutionStartedAtGreaterThanOrEqual	int		.
 * @param	lastExecutionStartedAtLessThanOrEqual	int		.
 */
function KalturaScheduledTaskProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.lastExecutionStartedAtGreaterThanOrEqual = null;
	this.lastExecutionStartedAtLessThanOrEqual = null;
}
KalturaScheduledTaskProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaScheduledTaskProfileListResponse(){
	this.objects = null;
}
KalturaScheduledTaskProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaSchedulerListResponse(){
	this.objects = null;
}
KalturaSchedulerListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaSchedulerWorkerListResponse(){
	this.objects = null;
}
KalturaSchedulerWorkerListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	field	string		.
 * @param	value	string		.
 */
function KalturaSearchCondition(){
	this.field = null;
	this.value = null;
}
KalturaSearchCondition.inheritsFrom (KalturaSearchItem);


/**
 * @param	type	int		.
 * @param	items	array		.
 */
function KalturaSearchOperator(){
	this.type = null;
	this.items = null;
}
KalturaSearchOperator.inheritsFrom (KalturaSearchItem);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	heartbeatTimeGreaterThanOrEqual	int		.
 * @param	heartbeatTimeLessThanOrEqual	int		.
 * @param	nameEqual	string		.
 * @param	nameIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	hostNameLike	string		.
 * @param	hostNameMultiLikeOr	string		.
 * @param	hostNameMultiLikeAnd	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	typeEqual	string		.
 * @param	typeIn	string		.
 * @param	tagsLike	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	dcEqual	int		.
 * @param	dcIn	string		.
 * @param	parentIdEqual	int		.
 * @param	parentIdIn	string		.
 */
function KalturaServerNodeBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.heartbeatTimeGreaterThanOrEqual = null;
	this.heartbeatTimeLessThanOrEqual = null;
	this.nameEqual = null;
	this.nameIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.hostNameLike = null;
	this.hostNameMultiLikeOr = null;
	this.hostNameMultiLikeAnd = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.tagsLike = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.dcEqual = null;
	this.dcIn = null;
	this.parentIdEqual = null;
	this.parentIdIn = null;
}
KalturaServerNodeBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaServerNodeListResponse(){
	this.objects = null;
}
KalturaServerNodeListResponse.inheritsFrom (KalturaListResponse);


/**
 */
function KalturaSessionRestriction(){
}
KalturaSessionRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	expiresAtGreaterThanOrEqual	int		.
 * @param	expiresAtLessThanOrEqual	int		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	userIdEqual	string		.
 * @param	userIdIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaShortLinkBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.expiresAtGreaterThanOrEqual = null;
	this.expiresAtLessThanOrEqual = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.userIdEqual = null;
	this.userIdIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaShortLinkBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaShortLinkListResponse(){
	this.objects = null;
}
KalturaShortLinkListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	siteRestrictionType	int		The site restriction type (allow or deny)
 *		 .
 * @param	siteList	string		Comma separated list of sites (domains) to allow or deny
 *		 .
 */
function KalturaSiteRestriction(){
	this.siteRestrictionType = null;
	this.siteList = null;
}
KalturaSiteRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 */
function KalturaStorageAddAction(){
}
KalturaStorageAddAction.inheritsFrom (KalturaRuleAction);


/**
 * @param	storageId	string		Storage profile id
 *		 .
 */
function KalturaStorageExportObjectTask(){
	this.storageId = null;
}
KalturaStorageExportObjectTask.inheritsFrom (KalturaObjectTask);


/**
 * @param	serverUrl	string		.
 * @param	serverUsername	string		.
 * @param	serverPassword	string		.
 * @param	serverPrivateKey	string		.
 * @param	serverPublicKey	string		.
 * @param	serverPassPhrase	string		.
 * @param	ftpPassiveMode	bool		.
 * @param	srcFileSyncLocalPath	string		.
 * @param	srcFileSyncId	string		.
 * @param	destFileSyncStoredPath	string		.
 */
function KalturaStorageJobData(){
	this.serverUrl = null;
	this.serverUsername = null;
	this.serverPassword = null;
	this.serverPrivateKey = null;
	this.serverPublicKey = null;
	this.serverPassPhrase = null;
	this.ftpPassiveMode = null;
	this.srcFileSyncLocalPath = null;
	this.srcFileSyncId = null;
	this.destFileSyncStoredPath = null;
}
KalturaStorageJobData.inheritsFrom (KalturaJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	protocolEqual	string		.
 * @param	protocolIn	string		.
 */
function KalturaStorageProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.protocolEqual = null;
	this.protocolIn = null;
}
KalturaStorageProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaStorageProfileListResponse(){
	this.objects = null;
}
KalturaStorageProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	categoryId	int		category id
 *		 .
 * @param	lastUpdatedCategoryEntryCreatedAt	int		Saves the last category entry creation date that was updated
 *	     In case of crash the batch will restart from that point
 *	     .
 * @param	lastUpdatedCategoryCreatedAt	int		Saves the last sub category creation date that was updated
 *	     In case of crash the batch will restart from that point
 *	     .
 */
function KalturaSyncCategoryPrivacyContextJobData(){
	this.categoryId = null;
	this.lastUpdatedCategoryEntryCreatedAt = null;
	this.lastUpdatedCategoryCreatedAt = null;
}
KalturaSyncCategoryPrivacyContextJobData.inheritsFrom (KalturaJobData);


/**
 * @param	xsl	string		.
 * @param	feedId	string		 (readOnly).
 */
function KalturaSyndicationDistributionProfile(){
	this.xsl = null;
	this.feedId = null;
}
KalturaSyndicationDistributionProfile.inheritsFrom (KalturaDistributionProfile);


/**
 */
function KalturaSyndicationDistributionProvider(){
}
KalturaSyndicationDistributionProvider.inheritsFrom (KalturaDistributionProvider);


/**
 * @param	overagePrice	float		.
 * @param	overageUnit	float		.
 */
function KalturaSystemPartnerOveragedLimit(){
	this.overagePrice = null;
	this.overageUnit = null;
}
KalturaSystemPartnerOveragedLimit.inheritsFrom (KalturaSystemPartnerLimit);


/**
 * @param	fromDate	int		Date range from
 *		 .
 * @param	toDate	int		Date range to
 *		 .
 * @param	timezoneOffset	int		Time zone offset
 *		 .
 */
function KalturaSystemPartnerUsageFilter(){
	this.fromDate = null;
	this.toDate = null;
	this.timezoneOffset = null;
}
KalturaSystemPartnerUsageFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		.
 */
function KalturaSystemPartnerUsageListResponse(){
	this.objects = null;
}
KalturaSystemPartnerUsageListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objectTypeEqual	string		.
 * @param	tagEqual	string		.
 * @param	tagStartsWith	string		.
 * @param	instanceCountEqual	int		.
 * @param	instanceCountIn	int		.
 */
function KalturaTagFilter(){
	this.objectTypeEqual = null;
	this.tagEqual = null;
	this.tagStartsWith = null;
	this.instanceCountEqual = null;
	this.instanceCountIn = null;
}
KalturaTagFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaTagListResponse(){
	this.objects = null;
}
KalturaTagListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaThumbAssetListResponse(){
	this.objects = null;
}
KalturaThumbAssetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	assetId	string		.
 * @param	description	string		.
 * @param	title	string		.
 * @param	subType	int		The sub type of the ThumbCuePoint
 *		 .
 */
function KalturaThumbCuePoint(){
	this.assetId = null;
	this.description = null;
	this.title = null;
	this.subType = null;
}
KalturaThumbCuePoint.inheritsFrom (KalturaCuePoint);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaThumbParamsListResponse(){
	this.objects = null;
}
KalturaThumbParamsListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaThumbParamsOutputListResponse(){
	this.objects = null;
}
KalturaThumbParamsOutputListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaTrackEntryListResponse(){
	this.objects = null;
}
KalturaTrackEntryListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaTranscriptAssetListResponse(){
	this.objects = null;
}
KalturaTranscriptAssetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	srcXslPath	string		.
 * @param	srcVersion	int		.
 * @param	destVersion	int		.
 * @param	destXsdPath	string		.
 * @param	metadataProfileId	int		.
 */
function KalturaTransformMetadataJobData(){
	this.srcXslPath = null;
	this.srcVersion = null;
	this.destVersion = null;
	this.destXsdPath = null;
	this.metadataProfileId = null;
}
KalturaTransformMetadataJobData.inheritsFrom (KalturaJobData);


/**
 * @param	category	string		 (readOnly).
 */
function KalturaTubeMogulSyndicationFeed(){
	this.category = null;
}
KalturaTubeMogulSyndicationFeed.inheritsFrom (KalturaBaseSyndicationFeed);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUiConfAdminListResponse(){
	this.objects = null;
}
KalturaUiConfAdminListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	nameLike	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	objTypeEqual	int		.
 * @param	objTypeIn	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	creationModeEqual	int		.
 * @param	creationModeIn	string		.
 * @param	versionEqual	string		.
 * @param	versionMultiLikeOr	string		.
 * @param	versionMultiLikeAnd	string		.
 * @param	partnerTagsMultiLikeOr	string		.
 * @param	partnerTagsMultiLikeAnd	string		.
 */
function KalturaUiConfBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.nameLike = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.objTypeEqual = null;
	this.objTypeIn = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.creationModeEqual = null;
	this.creationModeIn = null;
	this.versionEqual = null;
	this.versionMultiLikeOr = null;
	this.versionMultiLikeAnd = null;
	this.partnerTagsMultiLikeOr = null;
	this.partnerTagsMultiLikeAnd = null;
}
KalturaUiConfBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUiConfListResponse(){
	this.objects = null;
}
KalturaUiConfListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	idEqual	string		.
 * @param	idIn	string		.
 * @param	userIdEqual	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	fileNameEqual	string		.
 * @param	fileSizeEqual	float		.
 */
function KalturaUploadTokenBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.userIdEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.fileNameEqual = null;
	this.fileSizeEqual = null;
}
KalturaUploadTokenBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUploadTokenListResponse(){
	this.objects = null;
}
KalturaUploadTokenListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	headerData	string		headerData
 *		 .
 * @param	headerSign	string		headerSign
 *		 .
 * @param	timeout	int		timeout
 *		 .
 * @param	salt	string		salt
 *		 .
 */
function KalturaUrlRecognizerAkamaiG2O(){
	this.headerData = null;
	this.headerSign = null;
	this.timeout = null;
	this.salt = null;
}
KalturaUrlRecognizerAkamaiG2O.inheritsFrom (KalturaUrlRecognizer);


/**
 * @param	paramName	string		param
 *		 .
 * @param	rootDir	string		.
 */
function KalturaUrlTokenizerAkamaiHttp(){
	this.paramName = null;
	this.rootDir = null;
}
KalturaUrlTokenizerAkamaiHttp.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	profile	string		profile
 *		 .
 * @param	type	string		Type
 *		 .
 * @param	aifp	string		.
 * @param	usePrefix	bool		.
 */
function KalturaUrlTokenizerAkamaiRtmp(){
	this.profile = null;
	this.type = null;
	this.aifp = null;
	this.usePrefix = null;
}
KalturaUrlTokenizerAkamaiRtmp.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	host	string		host
 *		 .
 * @param	cpcode	int		Cp-Code
 *		 .
 */
function KalturaUrlTokenizerAkamaiRtsp(){
	this.host = null;
	this.cpcode = null;
}
KalturaUrlTokenizerAkamaiRtsp.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	paramName	string		.
 * @param	aclPostfix	string		.
 * @param	customPostfixes	string		.
 * @param	useCookieHosts	string		.
 * @param	rootDir	string		.
 */
function KalturaUrlTokenizerAkamaiSecureHd(){
	this.paramName = null;
	this.aclPostfix = null;
	this.customPostfixes = null;
	this.useCookieHosts = null;
	this.rootDir = null;
}
KalturaUrlTokenizerAkamaiSecureHd.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	hashPatternRegex	string		hashPatternRegex
 *		 .
 */
function KalturaUrlTokenizerBitGravity(){
	this.hashPatternRegex = null;
}
KalturaUrlTokenizerBitGravity.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	keyPairId	string		.
 * @param	rootDir	string		.
 * @param	limitIpAddress	bool		.
 */
function KalturaUrlTokenizerCloudFront(){
	this.keyPairId = null;
	this.rootDir = null;
	this.limitIpAddress = null;
}
KalturaUrlTokenizerCloudFront.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	paramName	string		paramName
 *		 .
 * @param	expiryName	string		expiryName
 *		 .
 * @param	gen	string		gen
 *		 .
 */
function KalturaUrlTokenizerLevel3(){
	this.paramName = null;
	this.expiryName = null;
	this.gen = null;
}
KalturaUrlTokenizerLevel3.inheritsFrom (KalturaUrlTokenizer);


/**
 */
function KalturaUrlTokenizerLimeLight(){
}
KalturaUrlTokenizerLimeLight.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	hdsPaths	string		hdsPaths
 *		 .
 * @param	paramName	string		tokenParamName
 *		 .
 * @param	authPrefix	string		secure URL prefix
 *		 .
 */
function KalturaUrlTokenizerVelocix(){
	this.hdsPaths = null;
	this.paramName = null;
	this.authPrefix = null;
}
KalturaUrlTokenizerVelocix.inheritsFrom (KalturaUrlTokenizer);


/**
 * @param	userAgentRestrictionType	int		User agent restriction type (Allow or deny)
 *		 .
 * @param	userAgentRegexList	string		A comma seperated list of user agent regular expressions
 *		 .
 */
function KalturaUserAgentRestriction(){
	this.userAgentRestrictionType = null;
	this.userAgentRegexList = null;
}
KalturaUserAgentRestriction.inheritsFrom (KalturaBaseRestriction);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUserEntryListResponse(){
	this.objects = null;
}
KalturaUserEntryListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUserListResponse(){
	this.objects = null;
}
KalturaUserListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUserLoginDataListResponse(){
	this.objects = null;
}
KalturaUserLoginDataListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	roleIds	string		Comma separated list of role ids
 *		 .
 */
function KalturaUserRoleCondition(){
	this.roleIds = null;
}
KalturaUserRoleCondition.inheritsFrom (KalturaCondition);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaUserRoleListResponse(){
	this.objects = null;
}
KalturaUserRoleListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	edgeServerIds	string		Comma separated list of edge servers to validate are active
 *		 .
 */
function KalturaValidateActiveEdgeCondition(){
	this.edgeServerIds = null;
}
KalturaValidateActiveEdgeCondition.inheritsFrom (KalturaCondition);


/**
 */
function KalturaVarPartnerUsageTotalItem(){
}
KalturaVarPartnerUsageTotalItem.inheritsFrom (KalturaVarPartnerUsageItem);


/**
 * @param	srcFilePath	string		.
 * @param	flavorAssetId	string		.
 * @param	scanResult	int		.
 * @param	virusFoundAction	int		.
 */
function KalturaVirusScanJobData(){
	this.srcFilePath = null;
	this.flavorAssetId = null;
	this.scanResult = null;
	this.virusFoundAction = null;
}
KalturaVirusScanJobData.inheritsFrom (KalturaJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	nameEqual	string		.
 * @param	nameLike	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	engineTypeEqual	string		.
 * @param	engineTypeIn	string		.
 */
function KalturaVirusScanProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.nameEqual = null;
	this.nameLike = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.engineTypeEqual = null;
	this.engineTypeIn = null;
}
KalturaVirusScanProfileBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaVirusScanProfileListResponse(){
	this.objects = null;
}
KalturaVirusScanProfileListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	entryId	string		Entry ID
 *		 .
 * @param	flavorAssetId	string		Flavor ID
 *		 .
 * @param	transcriptId	string		input Transcript-asset ID
 *		 .
 * @param	captionAssetFormats	string		Caption formats
 *		 .
 * @param	apiKey	string		Api key for service provider
 *		  (readOnly).
 * @param	apiPassword	string		Api key for service provider
 *		  (readOnly).
 * @param	spokenLanguage	string		Transcript content language
 *		 .
 * @param	fileLocation	string		Transcript Content location
 *		  (readOnly).
 * @param	replaceMediaContent	bool		should replace remote media content
 *		 .
 */
function KalturaVoicebaseJobProviderData(){
	this.entryId = null;
	this.flavorAssetId = null;
	this.transcriptId = null;
	this.captionAssetFormats = null;
	this.apiKey = null;
	this.apiPassword = null;
	this.spokenLanguage = null;
	this.fileLocation = null;
	this.replaceMediaContent = null;
}
KalturaVoicebaseJobProviderData.inheritsFrom (KalturaIntegrationJobProviderData);


/**
 * @param	idEqual	string		.
 * @param	idIn	string		.
 * @param	sourceWidgetIdEqual	string		.
 * @param	rootWidgetIdEqual	string		.
 * @param	partnerIdEqual	int		.
 * @param	entryIdEqual	string		.
 * @param	uiConfIdEqual	int		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	partnerDataLike	string		.
 */
function KalturaWidgetBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.sourceWidgetIdEqual = null;
	this.rootWidgetIdEqual = null;
	this.partnerIdEqual = null;
	this.entryIdEqual = null;
	this.uiConfIdEqual = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.partnerDataLike = null;
}
KalturaWidgetBaseFilter.inheritsFrom (KalturaFilter);


/**
 * @param	objects	array		 (readOnly).
 */
function KalturaWidgetListResponse(){
	this.objects = null;
}
KalturaWidgetListResponse.inheritsFrom (KalturaListResponse);


/**
 * @param	category	string		 (readOnly).
 * @param	adultContent	string		.
 * @param	feedDescription	string		feed description
 *	         .
 * @param	feedLandingPage	string		feed landing page (i.e publisher website)
 *	         .
 */
function KalturaYahooSyndicationFeed(){
	this.category = null;
	this.adultContent = null;
	this.feedDescription = null;
	this.feedLandingPage = null;
}
KalturaYahooSyndicationFeed.inheritsFrom (KalturaBaseSyndicationFeed);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 */
function KalturaAccessControlBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
}
KalturaAccessControlBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaAccessControlProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaAccessControlProfileBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	wsdlUsername	string		.
 * @param	wsdlPassword	string		.
 * @param	cpcode	string		.
 * @param	emailId	string		.
 * @param	primaryContact	string		.
 * @param	secondaryContact	string		.
 */
function KalturaAkamaiProvisionJobData(){
	this.wsdlUsername = null;
	this.wsdlPassword = null;
	this.cpcode = null;
	this.emailId = null;
	this.primaryContact = null;
	this.secondaryContact = null;
}
KalturaAkamaiProvisionJobData.inheritsFrom (KalturaProvisionJobData);


/**
 * @param	streamId	int		.
 * @param	systemUserName	string		.
 * @param	systemPassword	string		.
 * @param	domainName	string		.
 * @param	dvrEnabled	int		.
 * @param	dvrWindow	int		.
 * @param	primaryContact	string		.
 * @param	secondaryContact	string		.
 * @param	streamType	string		.
 * @param	notificationEmail	string		.
 */
function KalturaAkamaiUniversalProvisionJobData(){
	this.streamId = null;
	this.systemUserName = null;
	this.systemPassword = null;
	this.domainName = null;
	this.dvrEnabled = null;
	this.dvrWindow = null;
	this.primaryContact = null;
	this.secondaryContact = null;
	this.streamType = null;
	this.notificationEmail = null;
}
KalturaAkamaiUniversalProvisionJobData.inheritsFrom (KalturaProvisionJobData);


/**
 */
function KalturaAppTokenFilter(){
}
KalturaAppTokenFilter.inheritsFrom (KalturaAppTokenBaseFilter);


/**
 * @param	idEqual	string		.
 * @param	idIn	string		.
 * @param	entryIdEqual	string		.
 * @param	entryIdIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	sizeGreaterThanOrEqual	int		.
 * @param	sizeLessThanOrEqual	int		.
 * @param	tagsLike	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	deletedAtGreaterThanOrEqual	int		.
 * @param	deletedAtLessThanOrEqual	int		.
 */
function KalturaAssetBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.entryIdEqual = null;
	this.entryIdIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.sizeGreaterThanOrEqual = null;
	this.sizeLessThanOrEqual = null;
	this.tagsLike = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.deletedAtGreaterThanOrEqual = null;
	this.deletedAtLessThanOrEqual = null;
}
KalturaAssetBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	isSystemDefaultEqual	int		.
 * @param	tagsEqual	string		.
 */
function KalturaAssetParamsBaseFilter(){
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.isSystemDefaultEqual = null;
	this.tagsEqual = null;
}
KalturaAssetParamsBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	assetId	string		ID of the source asset 
 *		 .
 */
function KalturaAssetResource(){
	this.assetId = null;
}
KalturaAssetResource.inheritsFrom (KalturaContentResource);


/**
 */
function KalturaBaseSyndicationFeedFilter(){
}
KalturaBaseSyndicationFeedFilter.inheritsFrom (KalturaBaseSyndicationFeedBaseFilter);


/**
 */
function KalturaBatchJobFilter(){
}
KalturaBatchJobFilter.inheritsFrom (KalturaBatchJobBaseFilter);


/**
 * @param	csvVersion	int		The version of the csv file
 *		  (readOnly).
 * @param	columns	array		Array containing CSV headers
 *		 .
 */
function KalturaBulkUploadCsvJobData(){
	this.csvVersion = null;
	this.columns = null;
}
KalturaBulkUploadCsvJobData.inheritsFrom (KalturaBulkUploadJobData);


/**
 */
function KalturaBulkUploadFilter(){
}
KalturaBulkUploadFilter.inheritsFrom (KalturaBulkUploadBaseFilter);


/**
 * @param	filter	KalturaFilter		Filter for extracting the objects list to upload 
 *		 .
 * @param	templateObject	KalturaObjectBase		Template object for new object creation
 *		 .
 */
function KalturaBulkUploadFilterJobData(){
	this.filter = null;
	this.templateObject = null;
}
KalturaBulkUploadFilterJobData.inheritsFrom (KalturaBulkUploadJobData);


/**
 */
function KalturaBulkUploadXmlJobData(){
}
KalturaBulkUploadXmlJobData.inheritsFrom (KalturaBulkUploadJobData);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	parentIdEqual	int		.
 * @param	parentIdIn	string		.
 * @param	depthEqual	int		.
 * @param	fullNameEqual	string		.
 * @param	fullNameStartsWith	string		.
 * @param	fullNameIn	string		.
 * @param	fullIdsEqual	string		.
 * @param	fullIdsStartsWith	string		.
 * @param	fullIdsMatchOr	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	tagsLike	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	appearInListEqual	int		.
 * @param	privacyEqual	int		.
 * @param	privacyIn	string		.
 * @param	inheritanceTypeEqual	int		.
 * @param	inheritanceTypeIn	string		.
 * @param	referenceIdEqual	string		.
 * @param	referenceIdEmpty	int		.
 * @param	contributionPolicyEqual	int		.
 * @param	membersCountGreaterThanOrEqual	int		.
 * @param	membersCountLessThanOrEqual	int		.
 * @param	pendingMembersCountGreaterThanOrEqual	int		.
 * @param	pendingMembersCountLessThanOrEqual	int		.
 * @param	privacyContextEqual	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	inheritedParentIdEqual	int		.
 * @param	inheritedParentIdIn	string		.
 * @param	partnerSortValueGreaterThanOrEqual	int		.
 * @param	partnerSortValueLessThanOrEqual	int		.
 */
function KalturaCategoryBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.parentIdEqual = null;
	this.parentIdIn = null;
	this.depthEqual = null;
	this.fullNameEqual = null;
	this.fullNameStartsWith = null;
	this.fullNameIn = null;
	this.fullIdsEqual = null;
	this.fullIdsStartsWith = null;
	this.fullIdsMatchOr = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.tagsLike = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.appearInListEqual = null;
	this.privacyEqual = null;
	this.privacyIn = null;
	this.inheritanceTypeEqual = null;
	this.inheritanceTypeIn = null;
	this.referenceIdEqual = null;
	this.referenceIdEmpty = null;
	this.contributionPolicyEqual = null;
	this.membersCountGreaterThanOrEqual = null;
	this.membersCountLessThanOrEqual = null;
	this.pendingMembersCountGreaterThanOrEqual = null;
	this.pendingMembersCountLessThanOrEqual = null;
	this.privacyContextEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.inheritedParentIdEqual = null;
	this.inheritedParentIdIn = null;
	this.partnerSortValueGreaterThanOrEqual = null;
	this.partnerSortValueLessThanOrEqual = null;
}
KalturaCategoryBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	categoryIdEqual	int		.
 * @param	categoryIdIn	string		.
 * @param	entryIdEqual	string		.
 * @param	entryIdIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	categoryFullIdsStartsWith	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaCategoryEntryBaseFilter(){
	this.categoryIdEqual = null;
	this.categoryIdIn = null;
	this.entryIdEqual = null;
	this.entryIdIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.categoryFullIdsStartsWith = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaCategoryEntryBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	xPath	string		May contain the full xpath to the field in three formats
 *		 1. Slashed xPath, e.g. /metadata/myElementName
 *		 2. Using local-name function, e.g. /[local-name()='metadata']/[local-name()='myElementName']
 *		 3. Using only the field name, e.g. myElementName, it will be searched as //myElementName
 *		 .
 * @param	profileId	int		Metadata profile id
 *		 .
 * @param	profileSystemName	string		Metadata profile system name
 *		 .
 */
function KalturaCompareMetadataCondition(){
	this.xPath = null;
	this.profileId = null;
	this.profileSystemName = null;
}
KalturaCompareMetadataCondition.inheritsFrom (KalturaCompareCondition);


/**
 */
function KalturaControlPanelCommandFilter(){
}
KalturaControlPanelCommandFilter.inheritsFrom (KalturaControlPanelCommandBaseFilter);


/**
 * @param	conversionProfileIdEqual	int		.
 * @param	conversionProfileIdIn	string		.
 * @param	assetParamsIdEqual	int		.
 * @param	assetParamsIdIn	string		.
 * @param	readyBehaviorEqual	int		.
 * @param	readyBehaviorIn	string		.
 * @param	originEqual	int		.
 * @param	originIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 */
function KalturaConversionProfileAssetParamsBaseFilter(){
	this.conversionProfileIdEqual = null;
	this.conversionProfileIdIn = null;
	this.assetParamsIdEqual = null;
	this.assetParamsIdIn = null;
	this.readyBehaviorEqual = null;
	this.readyBehaviorIn = null;
	this.originEqual = null;
	this.originIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
}
KalturaConversionProfileAssetParamsBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	statusEqual	string		.
 * @param	statusIn	string		.
 * @param	typeEqual	string		.
 * @param	typeIn	string		.
 * @param	nameEqual	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	defaultEntryIdEqual	string		.
 * @param	defaultEntryIdIn	string		.
 */
function KalturaConversionProfileBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.nameEqual = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.defaultEntryIdEqual = null;
	this.defaultEntryIdIn = null;
}
KalturaConversionProfileBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	destDirLocalPath	string		.
 * @param	destDirRemoteUrl	string		.
 * @param	destFileName	string		.
 * @param	inputXmlLocalPath	string		.
 * @param	inputXmlRemoteUrl	string		.
 * @param	commandLinesStr	string		.
 * @param	flavors	array		.
 */
function KalturaConvertCollectionJobData(){
	this.destDirLocalPath = null;
	this.destDirRemoteUrl = null;
	this.destFileName = null;
	this.inputXmlLocalPath = null;
	this.inputXmlRemoteUrl = null;
	this.commandLinesStr = null;
	this.flavors = null;
}
KalturaConvertCollectionJobData.inheritsFrom (KalturaConvartableJobData);


/**
 * @param	destFileSyncLocalPath	string		.
 * @param	destFileSyncRemoteUrl	string		.
 * @param	logFileSyncLocalPath	string		.
 * @param	logFileSyncRemoteUrl	string		.
 * @param	flavorAssetId	string		.
 * @param	remoteMediaId	string		.
 * @param	customData	string		.
 * @param	extraDestFileSyncs	array		.
 * @param	engineMessage	string		.
 */
function KalturaConvertJobData(){
	this.destFileSyncLocalPath = null;
	this.destFileSyncRemoteUrl = null;
	this.logFileSyncLocalPath = null;
	this.logFileSyncRemoteUrl = null;
	this.flavorAssetId = null;
	this.remoteMediaId = null;
	this.customData = null;
	this.extraDestFileSyncs = null;
	this.engineMessage = null;
}
KalturaConvertJobData.inheritsFrom (KalturaConvartableJobData);


/**
 * @param	geoCoderType	string		The ip geo coder engine to be used
 *		 .
 */
function KalturaCountryCondition(){
	this.geoCoderType = null;
}
KalturaCountryCondition.inheritsFrom (KalturaMatchCondition);


/**
 * @param	idEqual	string		.
 * @param	idIn	string		.
 * @param	cuePointTypeEqual	string		.
 * @param	cuePointTypeIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	entryIdEqual	string		.
 * @param	entryIdIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	triggeredAtGreaterThanOrEqual	int		.
 * @param	triggeredAtLessThanOrEqual	int		.
 * @param	tagsLike	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	startTimeGreaterThanOrEqual	int		.
 * @param	startTimeLessThanOrEqual	int		.
 * @param	userIdEqual	string		.
 * @param	userIdIn	string		.
 * @param	partnerSortValueEqual	int		.
 * @param	partnerSortValueIn	string		.
 * @param	partnerSortValueGreaterThanOrEqual	int		.
 * @param	partnerSortValueLessThanOrEqual	int		.
 * @param	forceStopEqual	int		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 */
function KalturaCuePointBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.cuePointTypeEqual = null;
	this.cuePointTypeIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.entryIdEqual = null;
	this.entryIdIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.triggeredAtGreaterThanOrEqual = null;
	this.triggeredAtLessThanOrEqual = null;
	this.tagsLike = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.startTimeGreaterThanOrEqual = null;
	this.startTimeLessThanOrEqual = null;
	this.userIdEqual = null;
	this.userIdIn = null;
	this.partnerSortValueEqual = null;
	this.partnerSortValueIn = null;
	this.partnerSortValueGreaterThanOrEqual = null;
	this.partnerSortValueLessThanOrEqual = null;
	this.forceStopEqual = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
}
KalturaCuePointBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 */
function KalturaDeliveryProfileFilter(){
}
KalturaDeliveryProfileFilter.inheritsFrom (KalturaDeliveryProfileBaseFilter);


/**
 * @param	pattern	string		.
 * @param	rendererClass	string		rendererClass
 *		 .
 */
function KalturaDeliveryProfileGenericRtmp(){
	this.pattern = null;
	this.rendererClass = null;
}
KalturaDeliveryProfileGenericRtmp.inheritsFrom (KalturaDeliveryProfileRtmp);


/**
 */
function KalturaDistributionDeleteJobData(){
}
KalturaDistributionDeleteJobData.inheritsFrom (KalturaDistributionJobData);


/**
 * @param	plays	int		.
 * @param	views	int		.
 */
function KalturaDistributionFetchReportJobData(){
	this.plays = null;
	this.views = null;
}
KalturaDistributionFetchReportJobData.inheritsFrom (KalturaDistributionJobData);


/**
 */
function KalturaDistributionProfileFilter(){
}
KalturaDistributionProfileFilter.inheritsFrom (KalturaDistributionProfileBaseFilter);


/**
 */
function KalturaDistributionProviderFilter(){
}
KalturaDistributionProviderFilter.inheritsFrom (KalturaDistributionProviderBaseFilter);


/**
 */
function KalturaDistributionSubmitJobData(){
}
KalturaDistributionSubmitJobData.inheritsFrom (KalturaDistributionJobData);


/**
 */
function KalturaDistributionUpdateJobData(){
}
KalturaDistributionUpdateJobData.inheritsFrom (KalturaDistributionJobData);


/**
 * @param	metadataProfileId	int		.
 */
function KalturaDistributionValidationErrorInvalidMetadata(){
	this.metadataProfileId = null;
}
KalturaDistributionValidationErrorInvalidMetadata.inheritsFrom (KalturaDistributionValidationErrorInvalidData);


/**
 */
function KalturaDocumentFlavorParams(){
}
KalturaDocumentFlavorParams.inheritsFrom (KalturaFlavorParams);


/**
 */
function KalturaDropFolderFileFilter(){
}
KalturaDropFolderFileFilter.inheritsFrom (KalturaDropFolderFileBaseFilter);


/**
 * @param	currentDc	int		.
 */
function KalturaDropFolderFilter(){
	this.currentDc = null;
}
KalturaDropFolderFilter.inheritsFrom (KalturaDropFolderBaseFilter);


/**
 * @param	field	string		.
 */
function KalturaDynamicObjectSearchItem(){
	this.field = null;
}
KalturaDynamicObjectSearchItem.inheritsFrom (KalturaSearchOperator);


/**
 * @param	deliveryProfileIds	array		Delivery profile ids
 *		 .
 * @param	config	string		Overdie edge server default configuration - json format
 *		 .
 */
function KalturaEdgeServerNode(){
	this.deliveryProfileIds = null;
	this.config = null;
}
KalturaEdgeServerNode.inheritsFrom (KalturaDeliveryServerNode);


/**
 * @param	fromEmail	string		Define the email sender email
 *		 .
 * @param	fromName	string		Define the email sender name
 *		 .
 * @param	to	KalturaEmailNotificationRecipientJobData		Email recipient emails and names, key is mail address and value is the name
 *		 .
 * @param	cc	KalturaEmailNotificationRecipientJobData		Email cc emails and names, key is mail address and value is the name
 *		 .
 * @param	bcc	KalturaEmailNotificationRecipientJobData		Email bcc emails and names, key is mail address and value is the name
 *		 .
 * @param	replyTo	KalturaEmailNotificationRecipientJobData		Email addresses that a replies should be sent to, key is mail address and value is the name
 *		 .
 * @param	priority	int		Define the email priority
 *		 .
 * @param	confirmReadingTo	string		Email address that a reading confirmation will be sent to
 *		 .
 * @param	hostname	string		Hostname to use in Message-Id and Received headers and as default HELO string. 
 *		 If empty, the value returned by SERVER_NAME is used or 'localhost.localdomain'.
 *		 .
 * @param	messageID	string		Sets the message ID to be used in the Message-Id header.
 *		 If empty, a unique id will be generated.
 *		 .
 * @param	customHeaders	array		Adds a e-mail custom header
 *		 .
 */
function KalturaEmailNotificationDispatchJobData(){
	this.fromEmail = null;
	this.fromName = null;
	this.to = null;
	this.cc = null;
	this.bcc = null;
	this.replyTo = null;
	this.priority = null;
	this.confirmReadingTo = null;
	this.hostname = null;
	this.messageID = null;
	this.customHeaders = null;
}
KalturaEmailNotificationDispatchJobData.inheritsFrom (KalturaEventNotificationDispatchJobData);


/**
 * @param	application	string		.
 * @param	userIds	string		.
 * @param	playbackContext	string		.
 * @param	ancestorPlaybackContext	string		.
 */
function KalturaEndUserReportInputFilter(){
	this.application = null;
	this.userIds = null;
	this.playbackContext = null;
	this.ancestorPlaybackContext = null;
}
KalturaEndUserReportInputFilter.inheritsFrom (KalturaReportInputFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	submittedAtGreaterThanOrEqual	int		.
 * @param	submittedAtLessThanOrEqual	int		.
 * @param	entryIdEqual	string		.
 * @param	entryIdIn	string		.
 * @param	distributionProfileIdEqual	int		.
 * @param	distributionProfileIdIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	dirtyStatusEqual	int		.
 * @param	dirtyStatusIn	string		.
 * @param	sunriseGreaterThanOrEqual	int		.
 * @param	sunriseLessThanOrEqual	int		.
 * @param	sunsetGreaterThanOrEqual	int		.
 * @param	sunsetLessThanOrEqual	int		.
 */
function KalturaEntryDistributionBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.submittedAtGreaterThanOrEqual = null;
	this.submittedAtLessThanOrEqual = null;
	this.entryIdEqual = null;
	this.entryIdIn = null;
	this.distributionProfileIdEqual = null;
	this.distributionProfileIdIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.dirtyStatusEqual = null;
	this.dirtyStatusIn = null;
	this.sunriseGreaterThanOrEqual = null;
	this.sunriseLessThanOrEqual = null;
	this.sunsetGreaterThanOrEqual = null;
	this.sunsetLessThanOrEqual = null;
}
KalturaEntryDistributionBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	referrer	string		.
 */
function KalturaEntryReferrerLiveStats(){
	this.referrer = null;
}
KalturaEntryReferrerLiveStats.inheritsFrom (KalturaEntryLiveStats);


/**
 * @param	entryId	string		ID of the source entry 
 *		 .
 * @param	flavorParamsId	int		ID of the source flavor params, set to null to use the source flavor
 *		 .
 */
function KalturaEntryResource(){
	this.entryId = null;
	this.flavorParamsId = null;
}
KalturaEntryResource.inheritsFrom (KalturaContentResource);


/**
 */
function KalturaEventNotificationTemplateFilter(){
}
KalturaEventNotificationTemplateFilter.inheritsFrom (KalturaEventNotificationTemplateBaseFilter);


/**
 * @param	flavorAssetId	string		.
 */
function KalturaExtractMediaJobData(){
	this.flavorAssetId = null;
}
KalturaExtractMediaJobData.inheritsFrom (KalturaConvartableJobData);


/**
 */
function KalturaIntegerField(){
}
KalturaIntegerField.inheritsFrom (KalturaIntegerValue);


/**
 * @param	field	KalturaIntegerField		Field to evaluate
 *		 .
 */
function KalturaFieldCompareCondition(){
	this.field = null;
}
KalturaFieldCompareCondition.inheritsFrom (KalturaCompareCondition);


/**
 */
function KalturaStringField(){
}
KalturaStringField.inheritsFrom (KalturaStringValue);


/**
 * @param	field	KalturaStringField		Field to evaluate
 *		 .
 */
function KalturaFieldMatchCondition(){
	this.field = null;
}
KalturaFieldMatchCondition.inheritsFrom (KalturaMatchCondition);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	fileAssetObjectTypeEqual	string		.
 * @param	objectIdEqual	string		.
 * @param	objectIdIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	statusEqual	string		.
 * @param	statusIn	string		.
 */
function KalturaFileAssetBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.partnerIdEqual = null;
	this.fileAssetObjectTypeEqual = null;
	this.objectIdEqual = null;
	this.objectIdIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaFileAssetBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	currentDc	int		.
 */
function KalturaFileSyncFilter(){
	this.currentDc = null;
}
KalturaFileSyncFilter.inheritsFrom (KalturaFileSyncBaseFilter);


/**
 * @param	fileSyncObjectType	int		The object type of the file sync object 
 *		 .
 * @param	objectSubType	int		The object sub-type of the file sync object 
 *		 .
 * @param	objectId	string		The object id of the file sync object 
 *		 .
 * @param	version	string		The version of the file sync object 
 *		 .
 */
function KalturaFileSyncResource(){
	this.fileSyncObjectType = null;
	this.objectSubType = null;
	this.objectId = null;
	this.version = null;
}
KalturaFileSyncResource.inheritsFrom (KalturaContentResource);


/**
 * @param	host	string		.
 * @param	port	int		.
 * @param	username	string		.
 * @param	password	string		.
 */
function KalturaFtpDropFolder(){
	this.host = null;
	this.port = null;
	this.username = null;
	this.password = null;
}
KalturaFtpDropFolder.inheritsFrom (KalturaRemoteDropFolder);


/**
 */
function KalturaGenericDistributionProviderActionFilter(){
}
KalturaGenericDistributionProviderActionFilter.inheritsFrom (KalturaGenericDistributionProviderActionBaseFilter);


/**
 * @param	xslt	string		.
 * @param	itemXpathsToExtend	array		.
 */
function KalturaGenericXsltSyndicationFeed(){
	this.xslt = null;
	this.itemXpathsToExtend = null;
}
KalturaGenericXsltSyndicationFeed.inheritsFrom (KalturaGenericSyndicationFeed);


/**
 * @param	geoCoderType	string		The ip geo coder engine to be used
 *		 .
 */
function KalturaGeoDistanceCondition(){
	this.geoCoderType = null;
}
KalturaGeoDistanceCondition.inheritsFrom (KalturaMatchCondition);


/**
 * @param	city	KalturaCoordinate		.
 * @param	country	KalturaCoordinate		.
 */
function KalturaGeoTimeLiveStats(){
	this.city = null;
	this.country = null;
}
KalturaGeoTimeLiveStats.inheritsFrom (KalturaEntryLiveStats);


/**
 * @param	userIdEqual	string		.
 * @param	userIdIn	string		.
 * @param	groupIdEqual	string		.
 * @param	groupIdIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaGroupUserBaseFilter(){
	this.userIdEqual = null;
	this.userIdIn = null;
	this.groupIdEqual = null;
	this.groupIdIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaGroupUserBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	url	string		Remote server URL
 *		 .
 * @param	method	int		Request method.
 *		 .
 * @param	data	string		Data to send.
 *		 .
 * @param	timeout	int		The maximum number of seconds to allow cURL functions to execute.
 *		 .
 * @param	connectTimeout	int		The number of seconds to wait while trying to connect.
 *		 Must be larger than zero.
 *		 .
 * @param	username	string		A username to use for the connection.
 *		 .
 * @param	password	string		A password to use for the connection.
 *		 .
 * @param	authenticationMethod	int		The HTTP authentication method to use.
 *		 .
 * @param	sslVersion	int		The SSL version (2 or 3) to use.
 *		 By default PHP will try to determine this itself, although in some cases this must be set manually.
 *		 .
 * @param	sslCertificate	string		SSL certificate to verify the peer with.
 *		 .
 * @param	sslCertificateType	string		The format of the certificate.
 *		 .
 * @param	sslCertificatePassword	string		The password required to use the certificate.
 *		 .
 * @param	sslEngine	string		The identifier for the crypto engine of the private SSL key specified in ssl key.
 *		 .
 * @param	sslEngineDefault	string		The identifier for the crypto engine used for asymmetric crypto operations.
 *		 .
 * @param	sslKeyType	string		The key type of the private SSL key specified in ssl key - PEM / DER / ENG.
 *		 .
 * @param	sslKey	string		Private SSL key.
 *		 .
 * @param	sslKeyPassword	string		The secret password needed to use the private SSL key specified in ssl key.
 *		 .
 * @param	customHeaders	array		Adds a e-mail custom header
 *		 .
 * @param	signSecret	string		The secret to sign the notification with
 *		 .
 */
function KalturaHttpNotificationDispatchJobData(){
	this.url = null;
	this.method = null;
	this.data = null;
	this.timeout = null;
	this.connectTimeout = null;
	this.username = null;
	this.password = null;
	this.authenticationMethod = null;
	this.sslVersion = null;
	this.sslCertificate = null;
	this.sslCertificateType = null;
	this.sslCertificatePassword = null;
	this.sslEngine = null;
	this.sslEngineDefault = null;
	this.sslKeyType = null;
	this.sslKey = null;
	this.sslKeyPassword = null;
	this.customHeaders = null;
	this.signSecret = null;
}
KalturaHttpNotificationDispatchJobData.inheritsFrom (KalturaEventNotificationDispatchJobData);


/**
 * @param	densityWidth	int		.
 * @param	densityHeight	int		.
 * @param	sizeWidth	int		.
 * @param	sizeHeight	int		.
 * @param	depth	int		.
 */
function KalturaImageFlavorParams(){
	this.densityWidth = null;
	this.densityHeight = null;
	this.sizeWidth = null;
	this.sizeHeight = null;
	this.depth = null;
}
KalturaImageFlavorParams.inheritsFrom (KalturaFlavorParams);


/**
 * @param	acceptInternalIps	bool		allow internal ips
 *		 .
 * @param	httpHeader	string		http header name for extracting the ip
 *		 .
 */
function KalturaIpAddressCondition(){
	this.acceptInternalIps = null;
	this.httpHeader = null;
}
KalturaIpAddressCondition.inheritsFrom (KalturaMatchCondition);


/**
 * @param	entryIdEqual	string		.
 * @param	userIdEqual	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 */
function KalturaLikeBaseFilter(){
	this.entryIdEqual = null;
	this.userIdEqual = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
}
KalturaLikeBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	multicastIP	string		.
 * @param	multicastPort	int		.
 */
function KalturaLiveAsset(){
	this.multicastIP = null;
	this.multicastPort = null;
}
KalturaLiveAsset.inheritsFrom (KalturaFlavorAsset);


/**
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	statusEqual	string		.
 * @param	statusIn	string		.
 * @param	channelIdEqual	string		.
 * @param	channelIdIn	string		.
 * @param	startTimeGreaterThanOrEqual	float		.
 * @param	startTimeLessThanOrEqual	float		.
 */
function KalturaLiveChannelSegmentBaseFilter(){
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.channelIdEqual = null;
	this.channelIdIn = null;
	this.startTimeGreaterThanOrEqual = null;
	this.startTimeLessThanOrEqual = null;
}
KalturaLiveChannelSegmentBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	streamSuffix	string		Suffix to be added to the stream name after the entry id {entry_id}_{stream_suffix}, e.g. for entry id 0_kjdu5jr6 and suffix 1, the stream name will be 0_kjdu5jr6_1
 *		 .
 */
function KalturaLiveParams(){
	this.streamSuffix = null;
}
KalturaLiveParams.inheritsFrom (KalturaFlavorParams);


/**
 * @param	xPath	string		May contain the full xpath to the field in three formats
 *		 1. Slashed xPath, e.g. /metadata/myElementName
 *		 2. Using local-name function, e.g. /[local-name()='metadata']/[local-name()='myElementName']
 *		 3. Using only the field name, e.g. myElementName, it will be searched as //myElementName
 *		 .
 * @param	profileId	int		Metadata profile id
 *		 .
 * @param	profileSystemName	string		Metadata profile system name
 *		 .
 */
function KalturaMatchMetadataCondition(){
	this.xPath = null;
	this.profileId = null;
	this.profileSystemName = null;
}
KalturaMatchMetadataCondition.inheritsFrom (KalturaMatchCondition);


/**
 */
function KalturaMediaFlavorParams(){
}
KalturaMediaFlavorParams.inheritsFrom (KalturaFlavorParams);


/**
 */
function KalturaMediaInfoFilter(){
}
KalturaMediaInfoFilter.inheritsFrom (KalturaMediaInfoBaseFilter);


/**
 * @param	applicationName	string		Media server application name
 *		 .
 * @param	mediaServerPortConfig	array		Media server playback port configuration by protocol and format
 *		 .
 * @param	mediaServerPlaybackDomainConfig	array		Media server playback Domain configuration by protocol and format
 *		 .
 */
function KalturaMediaServerNode(){
	this.applicationName = null;
	this.mediaServerPortConfig = null;
	this.mediaServerPlaybackDomainConfig = null;
}
KalturaMediaServerNode.inheritsFrom (KalturaDeliveryServerNode);


/**
 * @param	partnerIdEqual	int		.
 * @param	metadataProfileIdEqual	int		.
 * @param	metadataProfileVersionEqual	int		.
 * @param	metadataProfileVersionGreaterThanOrEqual	int		.
 * @param	metadataProfileVersionLessThanOrEqual	int		.
 * @param	metadataObjectTypeEqual	string		When null, default is KalturaMetadataObjectType::ENTRY
 *		 .
 * @param	objectIdEqual	string		.
 * @param	objectIdIn	string		.
 * @param	versionEqual	int		.
 * @param	versionGreaterThanOrEqual	int		.
 * @param	versionLessThanOrEqual	int		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaMetadataBaseFilter(){
	this.partnerIdEqual = null;
	this.metadataProfileIdEqual = null;
	this.metadataProfileVersionEqual = null;
	this.metadataProfileVersionGreaterThanOrEqual = null;
	this.metadataProfileVersionLessThanOrEqual = null;
	this.metadataObjectTypeEqual = null;
	this.objectIdEqual = null;
	this.objectIdIn = null;
	this.versionEqual = null;
	this.versionGreaterThanOrEqual = null;
	this.versionLessThanOrEqual = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaMetadataBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	xPath	string		May contain the full xpath to the field in three formats
 *		 1. Slashed xPath, e.g. /metadata/myElementName
 *		 2. Using local-name function, e.g. /[local-name()='metadata']/[local-name()='myElementName']
 *		 3. Using only the field name, e.g. myElementName, it will be searched as //myElementName
 *		 .
 * @param	profileId	int		Metadata profile id
 *		 .
 * @param	profileSystemName	string		Metadata profile system name
 *		 .
 * @param	versionA	string		.
 * @param	versionB	string		.
 */
function KalturaMetadataFieldChangedCondition(){
	this.xPath = null;
	this.profileId = null;
	this.profileSystemName = null;
	this.versionA = null;
	this.versionB = null;
}
KalturaMetadataFieldChangedCondition.inheritsFrom (KalturaMatchCondition);


/**
 */
function KalturaMetadataProfileFilter(){
}
KalturaMetadataProfileFilter.inheritsFrom (KalturaMetadataProfileBaseFilter);


/**
 * @param	metadataProfileId	int		.
 * @param	orderBy	string		.
 */
function KalturaMetadataSearchItem(){
	this.metadataProfileId = null;
	this.orderBy = null;
}
KalturaMetadataSearchItem.inheritsFrom (KalturaSearchOperator);


/**
 * @param	resource	KalturaContentResource		Only KalturaEntryResource and KalturaAssetResource are supported
 *		 .
 * @param	operationAttributes	array		.
 * @param	assetParamsId	int		ID of alternative asset params to be used instead of the system default flavor params 
 *		 .
 */
function KalturaOperationResource(){
	this.resource = null;
	this.operationAttributes = null;
	this.assetParamsId = null;
}
KalturaOperationResource.inheritsFrom (KalturaContentResource);


/**
 */
function KalturaPartnerFilter(){
}
KalturaPartnerFilter.inheritsFrom (KalturaPartnerBaseFilter);


/**
 * @param	readonly	bool		.
 */
function KalturaPdfFlavorParams(){
	this.readonly = null;
}
KalturaPdfFlavorParams.inheritsFrom (KalturaFlavorParams);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	typeEqual	int		.
 * @param	typeIn	string		.
 * @param	nameEqual	string		.
 * @param	nameIn	string		.
 * @param	friendlyNameLike	string		.
 * @param	descriptionLike	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	dependsOnPermissionNamesMultiLikeOr	string		.
 * @param	dependsOnPermissionNamesMultiLikeAnd	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaPermissionBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.nameEqual = null;
	this.nameIn = null;
	this.friendlyNameLike = null;
	this.descriptionLike = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.dependsOnPermissionNamesMultiLikeOr = null;
	this.dependsOnPermissionNamesMultiLikeAnd = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaPermissionBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	typeEqual	string		.
 * @param	typeIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaPermissionItemBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.typeEqual = null;
	this.typeIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaPermissionItemBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	flavorAssetId	string		.
 * @param	createThumb	bool		Indicates if a thumbnail should be created
 *		 .
 * @param	thumbPath	string		The path of the created thumbnail
 *		 .
 * @param	thumbOffset	int		The position of the thumbnail in the media file
 *		 .
 * @param	thumbHeight	int		The height of the movie, will be used to comapare if this thumbnail is the best we can have
 *		 .
 * @param	thumbBitrate	int		The bit rate of the movie, will be used to comapare if this thumbnail is the best we can have
 *		 .
 * @param	customData	string		.
 */
function KalturaPostConvertJobData(){
	this.flavorAssetId = null;
	this.createThumb = null;
	this.thumbPath = null;
	this.thumbOffset = null;
	this.thumbHeight = null;
	this.thumbBitrate = null;
	this.customData = null;
}
KalturaPostConvertJobData.inheritsFrom (KalturaConvartableJobData);


/**
 * @param	previewLength	int		The preview restriction length 
 *		 .
 */
function KalturaPreviewRestriction(){
	this.previewLength = null;
}
KalturaPreviewRestriction.inheritsFrom (KalturaSessionRestriction);


/**
 * @param	entryIdEqual	string		This filter should be in use for retrieving only a specific quiz entry (identified by its entryId).
 *		 .
 * @param	entryIdIn	string		This filter should be in use for retrieving few specific quiz entries (string should include comma separated list of entryId strings).
 *		 .
 */
function KalturaQuizFilter(){
	this.entryIdEqual = null;
	this.entryIdIn = null;
}
KalturaQuizFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	protocol	string		http / https
 *		 .
 * @param	ksType	int		.
 * @param	userRoles	array		.
 * @param	cachedObjectType	string		Class name
 *		 .
 * @param	objectId	string		.
 * @param	startObjectKey	string		.
 * @param	endObjectKey	string		.
 */
function KalturaRecalculateResponseProfileCacheJobData(){
	this.protocol = null;
	this.ksType = null;
	this.userRoles = null;
	this.cachedObjectType = null;
	this.objectId = null;
	this.startObjectKey = null;
	this.endObjectKey = null;
}
KalturaRecalculateResponseProfileCacheJobData.inheritsFrom (KalturaRecalculateCacheJobData);


/**
 */
function KalturaRegexCondition(){
}
KalturaRegexCondition.inheritsFrom (KalturaMatchCondition);


/**
 * @param	resources	array		Array of remote stoage resources 
 *		 .
 */
function KalturaRemoteStorageResources(){
	this.resources = null;
}
KalturaRemoteStorageResources.inheritsFrom (KalturaContentResource);


/**
 */
function KalturaReportFilter(){
}
KalturaReportFilter.inheritsFrom (KalturaReportBaseFilter);


/**
 */
function KalturaResponseProfileFilter(){
}
KalturaResponseProfileFilter.inheritsFrom (KalturaResponseProfileBaseFilter);


/**
 */
function KalturaScheduledTaskProfileFilter(){
}
KalturaScheduledTaskProfileFilter.inheritsFrom (KalturaScheduledTaskProfileBaseFilter);


/**
 * @param	comparison	string		.
 */
function KalturaSearchComparableAttributeCondition(){
	this.comparison = null;
}
KalturaSearchComparableAttributeCondition.inheritsFrom (KalturaAttributeCondition);


/**
 * @param	comparison	string		.
 */
function KalturaSearchComparableCondition(){
	this.comparison = null;
}
KalturaSearchComparableCondition.inheritsFrom (KalturaSearchCondition);


/**
 * @param	not	bool		.
 */
function KalturaSearchMatchAttributeCondition(){
	this.not = null;
}
KalturaSearchMatchAttributeCondition.inheritsFrom (KalturaAttributeCondition);


/**
 * @param	not	bool		.
 */
function KalturaSearchMatchCondition(){
	this.not = null;
}
KalturaSearchMatchCondition.inheritsFrom (KalturaSearchCondition);


/**
 */
function KalturaServerNodeFilter(){
}
KalturaServerNodeFilter.inheritsFrom (KalturaServerNodeBaseFilter);


/**
 */
function KalturaShortLinkFilter(){
}
KalturaShortLinkFilter.inheritsFrom (KalturaShortLinkBaseFilter);


/**
 */
function KalturaSiteCondition(){
}
KalturaSiteCondition.inheritsFrom (KalturaMatchCondition);


/**
 * @param	host	string		.
 * @param	port	int		.
 * @param	username	string		.
 * @param	password	string		.
 * @param	privateKey	string		.
 * @param	publicKey	string		.
 * @param	passPhrase	string		.
 */
function KalturaSshDropFolder(){
	this.host = null;
	this.port = null;
	this.username = null;
	this.password = null;
	this.privateKey = null;
	this.publicKey = null;
	this.passPhrase = null;
}
KalturaSshDropFolder.inheritsFrom (KalturaRemoteDropFolder);


/**
 * @param	privateKey	string		.
 * @param	publicKey	string		.
 * @param	passPhrase	string		.
 */
function KalturaSshImportJobData(){
	this.privateKey = null;
	this.publicKey = null;
	this.passPhrase = null;
}
KalturaSshImportJobData.inheritsFrom (KalturaImportJobData);


/**
 */
function KalturaStorageDeleteJobData(){
}
KalturaStorageDeleteJobData.inheritsFrom (KalturaStorageJobData);


/**
 * @param	force	bool		.
 * @param	createLink	bool		.
 */
function KalturaStorageExportJobData(){
	this.force = null;
	this.createLink = null;
}
KalturaStorageExportJobData.inheritsFrom (KalturaStorageJobData);


/**
 */
function KalturaStorageProfileFilter(){
}
KalturaStorageProfileFilter.inheritsFrom (KalturaStorageProfileBaseFilter);


/**
 * @param	content	string		Textual content
 *		 .
 */
function KalturaStringResource(){
	this.content = null;
}
KalturaStringResource.inheritsFrom (KalturaContentResource);


/**
 * @param	flashVersion	int		.
 * @param	poly2Bitmap	bool		.
 */
function KalturaSwfFlavorParams(){
	this.flashVersion = null;
	this.poly2Bitmap = null;
}
KalturaSwfFlavorParams.inheritsFrom (KalturaFlavorParams);


/**
 * @param	cuePointId	string		Associated thumb cue point ID
 *		  (insertOnly).
 */
function KalturaTimedThumbAsset(){
	this.cuePointId = null;
}
KalturaTimedThumbAsset.inheritsFrom (KalturaThumbAsset);


/**
 */
function KalturaUiConfFilter(){
}
KalturaUiConfFilter.inheritsFrom (KalturaUiConfBaseFilter);


/**
 */
function KalturaUploadTokenFilter(){
}
KalturaUploadTokenFilter.inheritsFrom (KalturaUploadTokenBaseFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	idNotIn	string		.
 * @param	entryIdEqual	string		.
 * @param	entryIdIn	string		.
 * @param	entryIdNotIn	string		.
 * @param	userIdEqual	string		.
 * @param	userIdIn	string		.
 * @param	userIdNotIn	string		.
 * @param	statusEqual	string		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	typeEqual	string		.
 */
function KalturaUserEntryBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.idNotIn = null;
	this.entryIdEqual = null;
	this.entryIdIn = null;
	this.entryIdNotIn = null;
	this.userIdEqual = null;
	this.userIdIn = null;
	this.userIdNotIn = null;
	this.statusEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.createdAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.typeEqual = null;
}
KalturaUserEntryBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	loginEmailEqual	string		.
 */
function KalturaUserLoginDataBaseFilter(){
	this.loginEmailEqual = null;
}
KalturaUserLoginDataBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	nameEqual	string		.
 * @param	nameIn	string		.
 * @param	systemNameEqual	string		.
 * @param	systemNameIn	string		.
 * @param	descriptionLike	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	tagsMultiLikeOr	string		.
 * @param	tagsMultiLikeAnd	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 */
function KalturaUserRoleBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.nameEqual = null;
	this.nameIn = null;
	this.systemNameEqual = null;
	this.systemNameIn = null;
	this.descriptionLike = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.tagsMultiLikeOr = null;
	this.tagsMultiLikeAnd = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
}
KalturaUserRoleBaseFilter.inheritsFrom (KalturaRelatedFilter);


/**
 * @param	provisioningParams	array		.
 * @param	userName	string		.
 * @param	password	string		.
 */
function KalturaVelocixProvisionJobData(){
	this.provisioningParams = null;
	this.userName = null;
	this.password = null;
}
KalturaVelocixProvisionJobData.inheritsFrom (KalturaProvisionJobData);


/**
 */
function KalturaVirusScanProfileFilter(){
}
KalturaVirusScanProfileFilter.inheritsFrom (KalturaVirusScanProfileBaseFilter);


/**
 */
function KalturaWidgetFilter(){
}
KalturaWidgetFilter.inheritsFrom (KalturaWidgetBaseFilter);


/**
 */
function KalturaAccessControlFilter(){
}
KalturaAccessControlFilter.inheritsFrom (KalturaAccessControlBaseFilter);


/**
 */
function KalturaAccessControlProfileFilter(){
}
KalturaAccessControlProfileFilter.inheritsFrom (KalturaAccessControlProfileBaseFilter);


/**
 * @param	filesPermissionInS3	string		.
 * @param	s3Region	string		.
 */
function KalturaAmazonS3StorageExportJobData(){
	this.filesPermissionInS3 = null;
	this.s3Region = null;
}
KalturaAmazonS3StorageExportJobData.inheritsFrom (KalturaStorageExportJobData);


/**
 */
function KalturaAmazonS3StorageProfileBaseFilter(){
}
KalturaAmazonS3StorageProfileBaseFilter.inheritsFrom (KalturaStorageProfileFilter);


/**
 */
function KalturaAssetFilter(){
}
KalturaAssetFilter.inheritsFrom (KalturaAssetBaseFilter);


/**
 */
function KalturaAssetParamsFilter(){
}
KalturaAssetParamsFilter.inheritsFrom (KalturaAssetParamsBaseFilter);


/**
 * @param	attribute	string		.
 */
function KalturaBaseEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaBaseEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaBaseEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaBaseEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 * @param	jobTypeAndSubTypeIn	string		.
 */
function KalturaBatchJobFilterExt(){
	this.jobTypeAndSubTypeIn = null;
}
KalturaBatchJobFilterExt.inheritsFrom (KalturaBatchJobFilter);


/**
 */
function KalturaCategoryEntryFilter(){
}
KalturaCategoryEntryFilter.inheritsFrom (KalturaCategoryEntryBaseFilter);


/**
 * @param	freeText	string		.
 * @param	membersIn	string		.
 * @param	nameOrReferenceIdStartsWith	string		.
 * @param	managerEqual	string		.
 * @param	memberEqual	string		.
 * @param	fullNameStartsWithIn	string		.
 * @param	ancestorIdIn	string		not includes the category itself (only sub categories)
 *		 .
 * @param	idOrInheritedParentIdIn	string		.
 */
function KalturaCategoryFilter(){
	this.freeText = null;
	this.membersIn = null;
	this.nameOrReferenceIdStartsWith = null;
	this.managerEqual = null;
	this.memberEqual = null;
	this.fullNameStartsWithIn = null;
	this.ancestorIdIn = null;
	this.idOrInheritedParentIdIn = null;
}
KalturaCategoryFilter.inheritsFrom (KalturaCategoryBaseFilter);


/**
 */
function KalturaConfigurableDistributionProfileBaseFilter(){
}
KalturaConfigurableDistributionProfileBaseFilter.inheritsFrom (KalturaDistributionProfileFilter);


/**
 */
function KalturaConversionProfileFilter(){
}
KalturaConversionProfileFilter.inheritsFrom (KalturaConversionProfileBaseFilter);


/**
 * @param	conversionProfileIdFilter	KalturaConversionProfileFilter		.
 * @param	assetParamsIdFilter	KalturaAssetParamsFilter		.
 */
function KalturaConversionProfileAssetParamsFilter(){
	this.conversionProfileIdFilter = null;
	this.assetParamsIdFilter = null;
}
KalturaConversionProfileAssetParamsFilter.inheritsFrom (KalturaConversionProfileAssetParamsBaseFilter);


/**
 * @param	geoCoderType	string		The ip geo coder engine to be used
 *		 .
 */
function KalturaCoordinatesContextField(){
	this.geoCoderType = null;
}
KalturaCoordinatesContextField.inheritsFrom (KalturaStringField);


/**
 * @param	geoCoderType	string		The ip geo coder engine to be used
 *		 .
 */
function KalturaCountryContextField(){
	this.geoCoderType = null;
}
KalturaCountryContextField.inheritsFrom (KalturaStringField);


/**
 * @param	freeText	string		.
 * @param	userIdEqualCurrent	int		.
 * @param	userIdCurrent	int		.
 */
function KalturaCuePointFilter(){
	this.freeText = null;
	this.userIdEqualCurrent = null;
	this.userIdCurrent = null;
}
KalturaCuePointFilter.inheritsFrom (KalturaCuePointBaseFilter);


/**
 * @param	attribute	string		.
 */
function KalturaDataEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaDataEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaDataEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaDataEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter(){
}
KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileAkamaiHdsBaseFilter(){
}
KalturaDeliveryProfileAkamaiHdsBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileAkamaiHttpBaseFilter(){
}
KalturaDeliveryProfileAkamaiHttpBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileGenericAppleHttpBaseFilter(){
}
KalturaDeliveryProfileGenericAppleHttpBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileGenericHdsBaseFilter(){
}
KalturaDeliveryProfileGenericHdsBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileGenericHttpBaseFilter(){
}
KalturaDeliveryProfileGenericHttpBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileGenericSilverLightBaseFilter(){
}
KalturaDeliveryProfileGenericSilverLightBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileLiveAppleHttpBaseFilter(){
}
KalturaDeliveryProfileLiveAppleHttpBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 */
function KalturaDeliveryProfileRtmpBaseFilter(){
}
KalturaDeliveryProfileRtmpBaseFilter.inheritsFrom (KalturaDeliveryProfileFilter);


/**
 * @param	playbackDomainLike	string		.
 * @param	playbackDomainMultiLikeOr	string		.
 * @param	playbackDomainMultiLikeAnd	string		.
 */
function KalturaDeliveryServerNodeBaseFilter(){
	this.playbackDomainLike = null;
	this.playbackDomainMultiLikeOr = null;
	this.playbackDomainMultiLikeAnd = null;
}
KalturaDeliveryServerNodeBaseFilter.inheritsFrom (KalturaServerNodeFilter);


/**
 */
function KalturaDistributionDisableJobData(){
}
KalturaDistributionDisableJobData.inheritsFrom (KalturaDistributionUpdateJobData);


/**
 */
function KalturaDistributionEnableJobData(){
}
KalturaDistributionEnableJobData.inheritsFrom (KalturaDistributionUpdateJobData);


/**
 * @param	attribute	string		.
 */
function KalturaDocumentEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaDocumentEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaDocumentEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaDocumentEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaDocumentFlavorParamsOutput(){
}
KalturaDocumentFlavorParamsOutput.inheritsFrom (KalturaFlavorParamsOutput);


/**
 * @param	dropFolderFileId	int		Id of the drop folder file object
 *		 .
 */
function KalturaDropFolderFileResource(){
	this.dropFolderFileId = null;
}
KalturaDropFolderFileResource.inheritsFrom (KalturaDataCenterContentResource);


/**
 * @param	dropFolderFileId	int		.
 */
function KalturaDropFolderImportJobData(){
	this.dropFolderFileId = null;
}
KalturaDropFolderImportJobData.inheritsFrom (KalturaSshImportJobData);


/**
 */
function KalturaEmailNotificationTemplateBaseFilter(){
}
KalturaEmailNotificationTemplateBaseFilter.inheritsFrom (KalturaEventNotificationTemplateFilter);


/**
 */
function KalturaEntryDistributionFilter(){
}
KalturaEntryDistributionFilter.inheritsFrom (KalturaEntryDistributionBaseFilter);


/**
 * @param	code	string		PHP code
 *		 .
 */
function KalturaEvalBooleanField(){
	this.code = null;
}
KalturaEvalBooleanField.inheritsFrom (KalturaBooleanField);


/**
 * @param	code	string		PHP code
 *		 .
 */
function KalturaEvalStringField(){
	this.code = null;
}
KalturaEvalStringField.inheritsFrom (KalturaStringField);


/**
 * @param	attribute	string		.
 */
function KalturaExternalMediaEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaExternalMediaEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaExternalMediaEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaExternalMediaEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaFileAssetFilter(){
}
KalturaFileAssetFilter.inheritsFrom (KalturaFileAssetBaseFilter);


/**
 */
function KalturaGenericDistributionProfileBaseFilter(){
}
KalturaGenericDistributionProfileBaseFilter.inheritsFrom (KalturaDistributionProfileFilter);


/**
 * @param	idEqual	int		.
 * @param	idIn	string		.
 * @param	createdAtGreaterThanOrEqual	int		.
 * @param	createdAtLessThanOrEqual	int		.
 * @param	updatedAtGreaterThanOrEqual	int		.
 * @param	updatedAtLessThanOrEqual	int		.
 * @param	partnerIdEqual	int		.
 * @param	partnerIdIn	string		.
 * @param	isDefaultEqual	int		.
 * @param	isDefaultIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 */
function KalturaGenericDistributionProviderBaseFilter(){
	this.idEqual = null;
	this.idIn = null;
	this.createdAtGreaterThanOrEqual = null;
	this.createdAtLessThanOrEqual = null;
	this.updatedAtGreaterThanOrEqual = null;
	this.updatedAtLessThanOrEqual = null;
	this.partnerIdEqual = null;
	this.partnerIdIn = null;
	this.isDefaultEqual = null;
	this.isDefaultIn = null;
	this.statusEqual = null;
	this.statusIn = null;
}
KalturaGenericDistributionProviderBaseFilter.inheritsFrom (KalturaDistributionProviderFilter);


/**
 */
function KalturaGenericSyndicationFeedBaseFilter(){
}
KalturaGenericSyndicationFeedBaseFilter.inheritsFrom (KalturaBaseSyndicationFeedFilter);


/**
 */
function KalturaGoogleVideoSyndicationFeedBaseFilter(){
}
KalturaGoogleVideoSyndicationFeedBaseFilter.inheritsFrom (KalturaBaseSyndicationFeedFilter);


/**
 */
function KalturaGroupUserFilter(){
}
KalturaGroupUserFilter.inheritsFrom (KalturaGroupUserBaseFilter);


/**
 */
function KalturaHttpNotificationTemplateBaseFilter(){
}
KalturaHttpNotificationTemplateBaseFilter.inheritsFrom (KalturaEventNotificationTemplateFilter);


/**
 */
function KalturaITunesSyndicationFeedBaseFilter(){
}
KalturaITunesSyndicationFeedBaseFilter.inheritsFrom (KalturaBaseSyndicationFeedFilter);


/**
 * @param	densityWidth	int		.
 * @param	densityHeight	int		.
 * @param	sizeWidth	int		.
 * @param	sizeHeight	int		.
 * @param	depth	int		.
 */
function KalturaImageFlavorParamsOutput(){
	this.densityWidth = null;
	this.densityHeight = null;
	this.sizeWidth = null;
	this.sizeHeight = null;
	this.depth = null;
}
KalturaImageFlavorParamsOutput.inheritsFrom (KalturaFlavorParamsOutput);


/**
 */
function KalturaIpAddressContextField(){
}
KalturaIpAddressContextField.inheritsFrom (KalturaStringField);


/**
 * @param	contentMoid	string		Unique Kontiki MOID for the content uploaded to Kontiki
 *	     .
 * @param	serviceToken	string		.
 */
function KalturaKontikiStorageDeleteJobData(){
	this.contentMoid = null;
	this.serviceToken = null;
}
KalturaKontikiStorageDeleteJobData.inheritsFrom (KalturaStorageDeleteJobData);


/**
 * @param	flavorAssetId	string		Holds the id of the exported asset
 *		 .
 * @param	contentMoid	string		Unique Kontiki MOID for the content uploaded to Kontiki
 *		 .
 * @param	serviceToken	string		.
 */
function KalturaKontikiStorageExportJobData(){
	this.flavorAssetId = null;
	this.contentMoid = null;
	this.serviceToken = null;
}
KalturaKontikiStorageExportJobData.inheritsFrom (KalturaStorageExportJobData);


/**
 */
function KalturaKontikiStorageProfileBaseFilter(){
}
KalturaKontikiStorageProfileBaseFilter.inheritsFrom (KalturaStorageProfileFilter);


/**
 */
function KalturaLikeFilter(){
}
KalturaLikeFilter.inheritsFrom (KalturaLikeBaseFilter);


/**
 * @param	attribute	string		.
 */
function KalturaLiveChannelCompareAttributeCondition(){
	this.attribute = null;
}
KalturaLiveChannelCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaLiveChannelMatchAttributeCondition(){
	this.attribute = null;
}
KalturaLiveChannelMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaLiveChannelSegmentFilter(){
}
KalturaLiveChannelSegmentFilter.inheritsFrom (KalturaLiveChannelSegmentBaseFilter);


/**
 * @param	attribute	string		.
 */
function KalturaLiveEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaLiveEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaLiveEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaLiveEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaLiveStreamAdminEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaLiveStreamAdminEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaLiveStreamAdminEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaLiveStreamAdminEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaLiveStreamEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaLiveStreamEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaLiveStreamEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaLiveStreamEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaMediaEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaMediaEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaMediaEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaMediaEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaMediaFlavorParamsOutput(){
}
KalturaMediaFlavorParamsOutput.inheritsFrom (KalturaFlavorParamsOutput);


/**
 */
function KalturaMetadataFilter(){
}
KalturaMetadataFilter.inheritsFrom (KalturaMetadataBaseFilter);


/**
 * @param	attribute	string		.
 */
function KalturaMixEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaMixEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaMixEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaMixEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaObjectIdField(){
}
KalturaObjectIdField.inheritsFrom (KalturaStringField);


/**
 * @param	readonly	bool		.
 */
function KalturaPdfFlavorParamsOutput(){
	this.readonly = null;
}
KalturaPdfFlavorParamsOutput.inheritsFrom (KalturaFlavorParamsOutput);


/**
 */
function KalturaPermissionFilter(){
}
KalturaPermissionFilter.inheritsFrom (KalturaPermissionBaseFilter);


/**
 */
function KalturaPermissionItemFilter(){
}
KalturaPermissionItemFilter.inheritsFrom (KalturaPermissionItemBaseFilter);


/**
 * @param	attribute	string		.
 */
function KalturaPlayableEntryCompareAttributeCondition(){
	this.attribute = null;
}
KalturaPlayableEntryCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaPlayableEntryMatchAttributeCondition(){
	this.attribute = null;
}
KalturaPlayableEntryMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaPlaylistCompareAttributeCondition(){
	this.attribute = null;
}
KalturaPlaylistCompareAttributeCondition.inheritsFrom (KalturaSearchComparableAttributeCondition);


/**
 * @param	attribute	string		.
 */
function KalturaPlaylistMatchAttributeCondition(){
	this.attribute = null;
}
KalturaPlaylistMatchAttributeCondition.inheritsFrom (KalturaSearchMatchAttributeCondition);


/**
 */
function KalturaRemoteDropFolderBaseFilter(){
}
KalturaRemoteDropFolderBaseFilter.inheritsFrom (KalturaDropFolderFilter);


/**
 */
function KalturaScpDropFolder(){
}
KalturaScpDropFolder.inheritsFrom (KalturaSshDropFolder);


/**
 * @param	localFilePath	string		Full path to the local file 
 *		 .
 */
function KalturaServerFileResource(){
	this.localFilePath = null;
}
KalturaServerFileResource.inheritsFrom (KalturaDataCenterContentResource);


/**
 */
function KalturaSftpDropFolder(){
}
KalturaSftpDropFolder.inheritsFrom (KalturaSshDropFolder);


/**
 * @param	privateKey	string		SSH private key
 *		 .
 * @param	publicKey	string		SSH public key
 *		 .
 * @param	keyPassphrase	string		Passphrase for SSH keys
 *		 .
 */
function KalturaSshUrlResource(){
	this.privateKey = null;
	this.publicKey = null;
	this.keyPassphrase = null;
}
KalturaSshUrlResource.inheritsFrom (KalturaUrlResource);


/**
 * @param	flashVersion	int		.
 * @param	poly2Bitmap	bool		.
 */
function KalturaSwfFlavorParamsOutput(){
	this.flashVersion = null;
	this.poly2Bitmap = null;
}
KalturaSwfFlavorParamsOutput.inheritsFrom (KalturaFlavorParamsOutput);


/**
 */
function KalturaSyndicationDistributionProfileBaseFilter(){
}
KalturaSyndicationDistributionProfileBaseFilter.inheritsFrom (KalturaDistributionProfileFilter);


/**
 */
function KalturaSyndicationDistributionProviderBaseFilter(){
}
KalturaSyndicationDistributionProviderBaseFilter.inheritsFrom (KalturaDistributionProviderFilter);


/**
 * @param	partnerParentIdEqual	int		.
 * @param	partnerParentIdIn	string		.
 */
function KalturaSystemPartnerFilter(){
	this.partnerParentIdEqual = null;
	this.partnerParentIdIn = null;
}
KalturaSystemPartnerFilter.inheritsFrom (KalturaPartnerFilter);


/**
 * @param	offset	int		Time offset in seconds since current time
 *		 .
 */
function KalturaTimeContextField(){
	this.offset = null;
}
KalturaTimeContextField.inheritsFrom (KalturaIntegerField);


/**
 */
function KalturaTubeMogulSyndicationFeedBaseFilter(){
}
KalturaTubeMogulSyndicationFeedBaseFilter.inheritsFrom (KalturaBaseSyndicationFeedFilter);


/**
 */
function KalturaUiConfAdminBaseFilter(){
}
KalturaUiConfAdminBaseFilter.inheritsFrom (KalturaUiConfFilter);


/**
 * @param	token	string		Token that returned from upload.upload action or uploadToken.add action. 
 *		 .
 */
function KalturaUploadedFileTokenResource(){
	this.token = null;
}
KalturaUploadedFileTokenResource.inheritsFrom (KalturaDataCenterContentResource);


/**
 */
function KalturaUserAgentCondition(){
}
KalturaUserAgentCondition.inheritsFrom (KalturaRegexCondition);


/**
 */
function KalturaUserAgentContextField(){
}
KalturaUserAgentContextField.inheritsFrom (KalturaStringField);


/**
 */
function KalturaUserEmailContextField(){
}
KalturaUserEmailContextField.inheritsFrom (KalturaStringField);


/**
 * @param	userIdEqualCurrent	int		.
 */
function KalturaUserEntryFilter(){
	this.userIdEqualCurrent = null;
}
KalturaUserEntryFilter.inheritsFrom (KalturaUserEntryBaseFilter);


/**
 */
function KalturaUserLoginDataFilter(){
}
KalturaUserLoginDataFilter.inheritsFrom (KalturaUserLoginDataBaseFilter);


/**
 */
function KalturaUserRoleFilter(){
}
KalturaUserRoleFilter.inheritsFrom (KalturaUserRoleBaseFilter);


/**
 * @param	groupTypeEq	int		Eq filter for the partner's group type
 *	     .
 * @param	groupTypeIn	string		In filter for the partner's group type
 *	     .
 * @param	partnerPermissionsExist	string		Filter for partner permissions- filter contains comma-separated string of permission names which the returned partners should have.
 *	     .
 */
function KalturaVarConsolePartnerFilter(){
	this.groupTypeEq = null;
	this.groupTypeIn = null;
	this.partnerPermissionsExist = null;
}
KalturaVarConsolePartnerFilter.inheritsFrom (KalturaPartnerFilter);


/**
 * @param	token	string		Token that returned from media server such as FMS or red5.
 *		 .
 */
function KalturaWebcamTokenResource(){
	this.token = null;
}
KalturaWebcamTokenResource.inheritsFrom (KalturaDataCenterContentResource);


/**
 * @param	appPrefix	string		Wowza Media server app prefix
 *		 .
 * @param	transcoder	string		Wowza Media server transcoder configuration overide
 *		 .
 * @param	GPUID	int		Wowza Media server GPU index id
 *		 .
 * @param	liveServicePort	int		Live service port
 *		 .
 * @param	liveServiceProtocol	string		Live service protocol
 *		 .
 * @param	liveServiceInternalDomain	string		Wowza media server live service internal domain
 *		 .
 */
function KalturaWowzaMediaServerNode(){
	this.appPrefix = null;
	this.transcoder = null;
	this.GPUID = null;
	this.liveServicePort = null;
	this.liveServiceProtocol = null;
	this.liveServiceInternalDomain = null;
}
KalturaWowzaMediaServerNode.inheritsFrom (KalturaMediaServerNode);


/**
 */
function KalturaYahooSyndicationFeedBaseFilter(){
}
KalturaYahooSyndicationFeedBaseFilter.inheritsFrom (KalturaBaseSyndicationFeedFilter);


/**
 * @param	protocolTypeEqual	string		.
 * @param	protocolTypeIn	string		.
 * @param	titleLike	string		.
 * @param	titleMultiLikeOr	string		.
 * @param	titleMultiLikeAnd	string		.
 * @param	endTimeGreaterThanOrEqual	int		.
 * @param	endTimeLessThanOrEqual	int		.
 * @param	durationGreaterThanOrEqual	int		.
 * @param	durationLessThanOrEqual	int		.
 */
function KalturaAdCuePointBaseFilter(){
	this.protocolTypeEqual = null;
	this.protocolTypeIn = null;
	this.titleLike = null;
	this.titleMultiLikeOr = null;
	this.titleMultiLikeAnd = null;
	this.endTimeGreaterThanOrEqual = null;
	this.endTimeLessThanOrEqual = null;
	this.durationGreaterThanOrEqual = null;
	this.durationLessThanOrEqual = null;
}
KalturaAdCuePointBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 */
function KalturaAdminUserBaseFilter(){
}
KalturaAdminUserBaseFilter.inheritsFrom (KalturaUserFilter);


/**
 */
function KalturaAmazonS3StorageProfileFilter(){
}
KalturaAmazonS3StorageProfileFilter.inheritsFrom (KalturaAmazonS3StorageProfileBaseFilter);


/**
 * @param	parentIdEqual	string		.
 * @param	parentIdIn	string		.
 * @param	textLike	string		.
 * @param	textMultiLikeOr	string		.
 * @param	textMultiLikeAnd	string		.
 * @param	endTimeGreaterThanOrEqual	int		.
 * @param	endTimeLessThanOrEqual	int		.
 * @param	durationGreaterThanOrEqual	int		.
 * @param	durationLessThanOrEqual	int		.
 * @param	isPublicEqual	int		.
 */
function KalturaAnnotationBaseFilter(){
	this.parentIdEqual = null;
	this.parentIdIn = null;
	this.textLike = null;
	this.textMultiLikeOr = null;
	this.textMultiLikeAnd = null;
	this.endTimeGreaterThanOrEqual = null;
	this.endTimeLessThanOrEqual = null;
	this.durationGreaterThanOrEqual = null;
	this.durationLessThanOrEqual = null;
	this.isPublicEqual = null;
}
KalturaAnnotationBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 * @param	parentIdEqual	string		.
 * @param	parentIdIn	string		.
 * @param	quizUserEntryIdEqual	string		.
 * @param	quizUserEntryIdIn	string		.
 */
function KalturaAnswerCuePointBaseFilter(){
	this.parentIdEqual = null;
	this.parentIdIn = null;
	this.quizUserEntryIdEqual = null;
	this.quizUserEntryIdIn = null;
}
KalturaAnswerCuePointBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 */
function KalturaApiActionPermissionItemBaseFilter(){
}
KalturaApiActionPermissionItemBaseFilter.inheritsFrom (KalturaPermissionItemFilter);


/**
 */
function KalturaApiParameterPermissionItemBaseFilter(){
}
KalturaApiParameterPermissionItemBaseFilter.inheritsFrom (KalturaPermissionItemFilter);


/**
 */
function KalturaAssetParamsOutputBaseFilter(){
}
KalturaAssetParamsOutputBaseFilter.inheritsFrom (KalturaAssetParamsFilter);


/**
 * @param	formatEqual	string		.
 * @param	formatIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	statusNotIn	string		.
 */
function KalturaAttachmentAssetBaseFilter(){
	this.formatEqual = null;
	this.formatIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
}
KalturaAttachmentAssetBaseFilter.inheritsFrom (KalturaAssetFilter);


/**
 * @param	captionParamsIdEqual	int		.
 * @param	captionParamsIdIn	string		.
 * @param	formatEqual	string		.
 * @param	formatIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	statusNotIn	string		.
 */
function KalturaCaptionAssetBaseFilter(){
	this.captionParamsIdEqual = null;
	this.captionParamsIdIn = null;
	this.formatEqual = null;
	this.formatIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
}
KalturaCaptionAssetBaseFilter.inheritsFrom (KalturaAssetFilter);


/**
 * @param	formatEqual	string		.
 * @param	formatIn	string		.
 */
function KalturaCaptionParamsBaseFilter(){
	this.formatEqual = null;
	this.formatIn = null;
}
KalturaCaptionParamsBaseFilter.inheritsFrom (KalturaAssetParamsFilter);


/**
 * @param	codeLike	string		.
 * @param	codeMultiLikeOr	string		.
 * @param	codeMultiLikeAnd	string		.
 * @param	codeEqual	string		.
 * @param	codeIn	string		.
 * @param	descriptionLike	string		.
 * @param	descriptionMultiLikeOr	string		.
 * @param	descriptionMultiLikeAnd	string		.
 * @param	endTimeGreaterThanOrEqual	int		.
 * @param	endTimeLessThanOrEqual	int		.
 * @param	durationGreaterThanOrEqual	int		.
 * @param	durationLessThanOrEqual	int		.
 */
function KalturaCodeCuePointBaseFilter(){
	this.codeLike = null;
	this.codeMultiLikeOr = null;
	this.codeMultiLikeAnd = null;
	this.codeEqual = null;
	this.codeIn = null;
	this.descriptionLike = null;
	this.descriptionMultiLikeOr = null;
	this.descriptionMultiLikeAnd = null;
	this.endTimeGreaterThanOrEqual = null;
	this.endTimeLessThanOrEqual = null;
	this.durationGreaterThanOrEqual = null;
	this.durationLessThanOrEqual = null;
}
KalturaCodeCuePointBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 */
function KalturaConfigurableDistributionProfileFilter(){
}
KalturaConfigurableDistributionProfileFilter.inheritsFrom (KalturaConfigurableDistributionProfileBaseFilter);


/**
 */
function KalturaDataEntryBaseFilter(){
}
KalturaDataEntryBaseFilter.inheritsFrom (KalturaBaseEntryFilter);


/**
 */
function KalturaDeliveryProfileAkamaiAppleHttpManifestFilter(){
}
KalturaDeliveryProfileAkamaiAppleHttpManifestFilter.inheritsFrom (KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter);


/**
 */
function KalturaDeliveryProfileAkamaiHdsFilter(){
}
KalturaDeliveryProfileAkamaiHdsFilter.inheritsFrom (KalturaDeliveryProfileAkamaiHdsBaseFilter);


/**
 */
function KalturaDeliveryProfileAkamaiHttpFilter(){
}
KalturaDeliveryProfileAkamaiHttpFilter.inheritsFrom (KalturaDeliveryProfileAkamaiHttpBaseFilter);


/**
 */
function KalturaDeliveryProfileGenericAppleHttpFilter(){
}
KalturaDeliveryProfileGenericAppleHttpFilter.inheritsFrom (KalturaDeliveryProfileGenericAppleHttpBaseFilter);


/**
 */
function KalturaDeliveryProfileGenericHdsFilter(){
}
KalturaDeliveryProfileGenericHdsFilter.inheritsFrom (KalturaDeliveryProfileGenericHdsBaseFilter);


/**
 */
function KalturaDeliveryProfileGenericHttpFilter(){
}
KalturaDeliveryProfileGenericHttpFilter.inheritsFrom (KalturaDeliveryProfileGenericHttpBaseFilter);


/**
 */
function KalturaDeliveryProfileGenericSilverLightFilter(){
}
KalturaDeliveryProfileGenericSilverLightFilter.inheritsFrom (KalturaDeliveryProfileGenericSilverLightBaseFilter);


/**
 */
function KalturaDeliveryProfileLiveAppleHttpFilter(){
}
KalturaDeliveryProfileLiveAppleHttpFilter.inheritsFrom (KalturaDeliveryProfileLiveAppleHttpBaseFilter);


/**
 */
function KalturaDeliveryProfileRtmpFilter(){
}
KalturaDeliveryProfileRtmpFilter.inheritsFrom (KalturaDeliveryProfileRtmpBaseFilter);


/**
 */
function KalturaDeliveryServerNodeFilter(){
}
KalturaDeliveryServerNodeFilter.inheritsFrom (KalturaDeliveryServerNodeBaseFilter);


/**
 * @param	documentTypeEqual	int		.
 * @param	documentTypeIn	string		.
 * @param	assetParamsIdsMatchOr	string		.
 * @param	assetParamsIdsMatchAnd	string		.
 */
function KalturaDocumentEntryBaseFilter(){
	this.documentTypeEqual = null;
	this.documentTypeIn = null;
	this.assetParamsIdsMatchOr = null;
	this.assetParamsIdsMatchAnd = null;
}
KalturaDocumentEntryBaseFilter.inheritsFrom (KalturaBaseEntryFilter);


/**
 */
function KalturaEmailNotificationTemplateFilter(){
}
KalturaEmailNotificationTemplateFilter.inheritsFrom (KalturaEmailNotificationTemplateBaseFilter);


/**
 * @param	eventTypeEqual	string		.
 * @param	eventTypeIn	string		.
 */
function KalturaEventCuePointBaseFilter(){
	this.eventTypeEqual = null;
	this.eventTypeIn = null;
}
KalturaEventCuePointBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 * @param	flavorParamsIdEqual	int		.
 * @param	flavorParamsIdIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	statusNotIn	string		.
 */
function KalturaFlavorAssetBaseFilter(){
	this.flavorParamsIdEqual = null;
	this.flavorParamsIdIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
}
KalturaFlavorAssetBaseFilter.inheritsFrom (KalturaAssetFilter);


/**
 * @param	formatEqual	string		.
 */
function KalturaFlavorParamsBaseFilter(){
	this.formatEqual = null;
}
KalturaFlavorParamsBaseFilter.inheritsFrom (KalturaAssetParamsFilter);


/**
 */
function KalturaGenericDistributionProfileFilter(){
}
KalturaGenericDistributionProfileFilter.inheritsFrom (KalturaGenericDistributionProfileBaseFilter);


/**
 */
function KalturaGenericDistributionProviderFilter(){
}
KalturaGenericDistributionProviderFilter.inheritsFrom (KalturaGenericDistributionProviderBaseFilter);


/**
 */
function KalturaGenericSyndicationFeedFilter(){
}
KalturaGenericSyndicationFeedFilter.inheritsFrom (KalturaGenericSyndicationFeedBaseFilter);


/**
 */
function KalturaGoogleVideoSyndicationFeedFilter(){
}
KalturaGoogleVideoSyndicationFeedFilter.inheritsFrom (KalturaGoogleVideoSyndicationFeedBaseFilter);


/**
 */
function KalturaHttpNotificationTemplateFilter(){
}
KalturaHttpNotificationTemplateFilter.inheritsFrom (KalturaHttpNotificationTemplateBaseFilter);


/**
 */
function KalturaITunesSyndicationFeedFilter(){
}
KalturaITunesSyndicationFeedFilter.inheritsFrom (KalturaITunesSyndicationFeedBaseFilter);


/**
 */
function KalturaKontikiStorageProfileFilter(){
}
KalturaKontikiStorageProfileFilter.inheritsFrom (KalturaKontikiStorageProfileBaseFilter);


/**
 */
function KalturaPlaylistBaseFilter(){
}
KalturaPlaylistBaseFilter.inheritsFrom (KalturaBaseEntryFilter);


/**
 * @param	questionLike	string		.
 * @param	questionMultiLikeOr	string		.
 * @param	questionMultiLikeAnd	string		.
 */
function KalturaQuestionCuePointBaseFilter(){
	this.questionLike = null;
	this.questionMultiLikeOr = null;
	this.questionMultiLikeAnd = null;
}
KalturaQuestionCuePointBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 */
function KalturaQuizUserEntryBaseFilter(){
}
KalturaQuizUserEntryBaseFilter.inheritsFrom (KalturaUserEntryFilter);


/**
 */
function KalturaRemoteDropFolderFilter(){
}
KalturaRemoteDropFolderFilter.inheritsFrom (KalturaRemoteDropFolderBaseFilter);


/**
 */
function KalturaSyndicationDistributionProfileFilter(){
}
KalturaSyndicationDistributionProfileFilter.inheritsFrom (KalturaSyndicationDistributionProfileBaseFilter);


/**
 * @param	thumbParamsIdEqual	int		.
 * @param	thumbParamsIdIn	string		.
 * @param	statusEqual	int		.
 * @param	statusIn	string		.
 * @param	statusNotIn	string		.
 */
function KalturaThumbAssetBaseFilter(){
	this.thumbParamsIdEqual = null;
	this.thumbParamsIdIn = null;
	this.statusEqual = null;
	this.statusIn = null;
	this.statusNotIn = null;
}
KalturaThumbAssetBaseFilter.inheritsFrom (KalturaAssetFilter);


/**
 * @param	descriptionLike	string		.
 * @param	descriptionMultiLikeOr	string		.
 * @param	descriptionMultiLikeAnd	string		.
 * @param	titleLike	string		.
 * @param	titleMultiLikeOr	string		.
 * @param	titleMultiLikeAnd	string		.
 * @param	subTypeEqual	int		.
 * @param	subTypeIn	string		.
 */
function KalturaThumbCuePointBaseFilter(){
	this.descriptionLike = null;
	this.descriptionMultiLikeOr = null;
	this.descriptionMultiLikeAnd = null;
	this.titleLike = null;
	this.titleMultiLikeOr = null;
	this.titleMultiLikeAnd = null;
	this.subTypeEqual = null;
	this.subTypeIn = null;
}
KalturaThumbCuePointBaseFilter.inheritsFrom (KalturaCuePointFilter);


/**
 * @param	formatEqual	string		.
 */
function KalturaThumbParamsBaseFilter(){
	this.formatEqual = null;
}
KalturaThumbParamsBaseFilter.inheritsFrom (KalturaAssetParamsFilter);


/**
 */
function KalturaTubeMogulSyndicationFeedFilter(){
}
KalturaTubeMogulSyndicationFeedFilter.inheritsFrom (KalturaTubeMogulSyndicationFeedBaseFilter);


/**
 */
function KalturaUiConfAdminFilter(){
}
KalturaUiConfAdminFilter.inheritsFrom (KalturaUiConfAdminBaseFilter);


/**
 */
function KalturaYahooSyndicationFeedFilter(){
}
KalturaYahooSyndicationFeedFilter.inheritsFrom (KalturaYahooSyndicationFeedBaseFilter);


/**
 */
function KalturaAdCuePointFilter(){
}
KalturaAdCuePointFilter.inheritsFrom (KalturaAdCuePointBaseFilter);


/**
 */
function KalturaAdminUserFilter(){
}
KalturaAdminUserFilter.inheritsFrom (KalturaAdminUserBaseFilter);


/**
 */
function KalturaAnnotationFilter(){
}
KalturaAnnotationFilter.inheritsFrom (KalturaAnnotationBaseFilter);


/**
 */
function KalturaAnswerCuePointFilter(){
}
KalturaAnswerCuePointFilter.inheritsFrom (KalturaAnswerCuePointBaseFilter);


/**
 */
function KalturaApiActionPermissionItemFilter(){
}
KalturaApiActionPermissionItemFilter.inheritsFrom (KalturaApiActionPermissionItemBaseFilter);


/**
 */
function KalturaApiParameterPermissionItemFilter(){
}
KalturaApiParameterPermissionItemFilter.inheritsFrom (KalturaApiParameterPermissionItemBaseFilter);


/**
 */
function KalturaAssetParamsOutputFilter(){
}
KalturaAssetParamsOutputFilter.inheritsFrom (KalturaAssetParamsOutputBaseFilter);


/**
 */
function KalturaAttachmentAssetFilter(){
}
KalturaAttachmentAssetFilter.inheritsFrom (KalturaAttachmentAssetBaseFilter);


/**
 */
function KalturaCaptionAssetFilter(){
}
KalturaCaptionAssetFilter.inheritsFrom (KalturaCaptionAssetBaseFilter);


/**
 */
function KalturaCaptionParamsFilter(){
}
KalturaCaptionParamsFilter.inheritsFrom (KalturaCaptionParamsBaseFilter);


/**
 */
function KalturaCodeCuePointFilter(){
}
KalturaCodeCuePointFilter.inheritsFrom (KalturaCodeCuePointBaseFilter);


/**
 */
function KalturaDataEntryFilter(){
}
KalturaDataEntryFilter.inheritsFrom (KalturaDataEntryBaseFilter);


/**
 */
function KalturaDeliveryProfileGenericRtmpBaseFilter(){
}
KalturaDeliveryProfileGenericRtmpBaseFilter.inheritsFrom (KalturaDeliveryProfileRtmpFilter);


/**
 */
function KalturaDocumentEntryFilter(){
}
KalturaDocumentEntryFilter.inheritsFrom (KalturaDocumentEntryBaseFilter);


/**
 */
function KalturaEdgeServerNodeBaseFilter(){
}
KalturaEdgeServerNodeBaseFilter.inheritsFrom (KalturaDeliveryServerNodeFilter);


/**
 */
function KalturaEventCuePointFilter(){
}
KalturaEventCuePointFilter.inheritsFrom (KalturaEventCuePointBaseFilter);


/**
 */
function KalturaFlavorAssetFilter(){
}
KalturaFlavorAssetFilter.inheritsFrom (KalturaFlavorAssetBaseFilter);


/**
 */
function KalturaFlavorParamsFilter(){
}
KalturaFlavorParamsFilter.inheritsFrom (KalturaFlavorParamsBaseFilter);


/**
 */
function KalturaFtpDropFolderBaseFilter(){
}
KalturaFtpDropFolderBaseFilter.inheritsFrom (KalturaRemoteDropFolderFilter);


/**
 */
function KalturaGenericXsltSyndicationFeedBaseFilter(){
}
KalturaGenericXsltSyndicationFeedBaseFilter.inheritsFrom (KalturaGenericSyndicationFeedFilter);


/**
 */
function KalturaLiveStreamAdminEntry(){
}
KalturaLiveStreamAdminEntry.inheritsFrom (KalturaLiveStreamEntry);


/**
 */
function KalturaMediaServerNodeBaseFilter(){
}
KalturaMediaServerNodeBaseFilter.inheritsFrom (KalturaDeliveryServerNodeFilter);


/**
 */
function KalturaPlaylistFilter(){
}
KalturaPlaylistFilter.inheritsFrom (KalturaPlaylistBaseFilter);


/**
 */
function KalturaQuestionCuePointFilter(){
}
KalturaQuestionCuePointFilter.inheritsFrom (KalturaQuestionCuePointBaseFilter);


/**
 */
function KalturaQuizUserEntryFilter(){
}
KalturaQuizUserEntryFilter.inheritsFrom (KalturaQuizUserEntryBaseFilter);


/**
 */
function KalturaSshDropFolderBaseFilter(){
}
KalturaSshDropFolderBaseFilter.inheritsFrom (KalturaRemoteDropFolderFilter);


/**
 * @param	typeIn	string		.
 */
function KalturaThumbAssetFilter(){
	this.typeIn = null;
}
KalturaThumbAssetFilter.inheritsFrom (KalturaThumbAssetBaseFilter);


/**
 */
function KalturaThumbCuePointFilter(){
}
KalturaThumbCuePointFilter.inheritsFrom (KalturaThumbCuePointBaseFilter);


/**
 */
function KalturaThumbParamsFilter(){
}
KalturaThumbParamsFilter.inheritsFrom (KalturaThumbParamsBaseFilter);


/**
 * @param	contentLike	string		.
 * @param	contentMultiLikeOr	string		.
 * @param	contentMultiLikeAnd	string		.
 * @param	partnerDescriptionLike	string		.
 * @param	partnerDescriptionMultiLikeOr	string		.
 * @param	partnerDescriptionMultiLikeAnd	string		.
 * @param	languageEqual	string		.
 * @param	languageIn	string		.
 * @param	labelEqual	string		.
 * @param	labelIn	string		.
 * @param	startTimeGreaterThanOrEqual	int		.
 * @param	startTimeLessThanOrEqual	int		.
 * @param	endTimeGreaterThanOrEqual	int		.
 * @param	endTimeLessThanOrEqual	int		.
 */
function KalturaCaptionAssetItemFilter(){
	this.contentLike = null;
	this.contentMultiLikeOr = null;
	this.contentMultiLikeAnd = null;
	this.partnerDescriptionLike = null;
	this.partnerDescriptionMultiLikeOr = null;
	this.partnerDescriptionMultiLikeAnd = null;
	this.languageEqual = null;
	this.languageIn = null;
	this.labelEqual = null;
	this.labelIn = null;
	this.startTimeGreaterThanOrEqual = null;
	this.startTimeLessThanOrEqual = null;
	this.endTimeGreaterThanOrEqual = null;
	this.endTimeLessThanOrEqual = null;
}
KalturaCaptionAssetItemFilter.inheritsFrom (KalturaCaptionAssetFilter);


/**
 */
function KalturaDeliveryProfileGenericRtmpFilter(){
}
KalturaDeliveryProfileGenericRtmpFilter.inheritsFrom (KalturaDeliveryProfileGenericRtmpBaseFilter);


/**
 */
function KalturaDocumentFlavorParamsBaseFilter(){
}
KalturaDocumentFlavorParamsBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 */
function KalturaEdgeServerNodeFilter(){
}
KalturaEdgeServerNodeFilter.inheritsFrom (KalturaEdgeServerNodeBaseFilter);


/**
 * @param	flavorParamsIdEqual	int		.
 * @param	flavorParamsVersionEqual	string		.
 * @param	flavorAssetIdEqual	string		.
 * @param	flavorAssetVersionEqual	string		.
 */
function KalturaFlavorParamsOutputBaseFilter(){
	this.flavorParamsIdEqual = null;
	this.flavorParamsVersionEqual = null;
	this.flavorAssetIdEqual = null;
	this.flavorAssetVersionEqual = null;
}
KalturaFlavorParamsOutputBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 */
function KalturaFtpDropFolderFilter(){
}
KalturaFtpDropFolderFilter.inheritsFrom (KalturaFtpDropFolderBaseFilter);


/**
 */
function KalturaGenericXsltSyndicationFeedFilter(){
}
KalturaGenericXsltSyndicationFeedFilter.inheritsFrom (KalturaGenericXsltSyndicationFeedBaseFilter);


/**
 */
function KalturaImageFlavorParamsBaseFilter(){
}
KalturaImageFlavorParamsBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 */
function KalturaLiveAssetBaseFilter(){
}
KalturaLiveAssetBaseFilter.inheritsFrom (KalturaFlavorAssetFilter);


/**
 */
function KalturaLiveParamsBaseFilter(){
}
KalturaLiveParamsBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 */
function KalturaMediaFlavorParamsBaseFilter(){
}
KalturaMediaFlavorParamsBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 */
function KalturaMediaServerNodeFilter(){
}
KalturaMediaServerNodeFilter.inheritsFrom (KalturaMediaServerNodeBaseFilter);


/**
 */
function KalturaMixEntryBaseFilter(){
}
KalturaMixEntryBaseFilter.inheritsFrom (KalturaPlayableEntryFilter);


/**
 */
function KalturaPdfFlavorParamsBaseFilter(){
}
KalturaPdfFlavorParamsBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 */
function KalturaSshDropFolderFilter(){
}
KalturaSshDropFolderFilter.inheritsFrom (KalturaSshDropFolderBaseFilter);


/**
 */
function KalturaSwfFlavorParamsBaseFilter(){
}
KalturaSwfFlavorParamsBaseFilter.inheritsFrom (KalturaFlavorParamsFilter);


/**
 * @param	thumbParamsIdEqual	int		.
 * @param	thumbParamsVersionEqual	string		.
 * @param	thumbAssetIdEqual	string		.
 * @param	thumbAssetVersionEqual	string		.
 */
function KalturaThumbParamsOutputBaseFilter(){
	this.thumbParamsIdEqual = null;
	this.thumbParamsVersionEqual = null;
	this.thumbAssetIdEqual = null;
	this.thumbAssetVersionEqual = null;
}
KalturaThumbParamsOutputBaseFilter.inheritsFrom (KalturaThumbParamsFilter);


/**
 */
function KalturaTimedThumbAssetBaseFilter(){
}
KalturaTimedThumbAssetBaseFilter.inheritsFrom (KalturaThumbAssetFilter);


/**
 */
function KalturaTranscriptAssetBaseFilter(){
}
KalturaTranscriptAssetBaseFilter.inheritsFrom (KalturaAttachmentAssetFilter);


/**
 */
function KalturaDocumentFlavorParamsFilter(){
}
KalturaDocumentFlavorParamsFilter.inheritsFrom (KalturaDocumentFlavorParamsBaseFilter);


/**
 */
function KalturaFlavorParamsOutputFilter(){
}
KalturaFlavorParamsOutputFilter.inheritsFrom (KalturaFlavorParamsOutputBaseFilter);


/**
 */
function KalturaImageFlavorParamsFilter(){
}
KalturaImageFlavorParamsFilter.inheritsFrom (KalturaImageFlavorParamsBaseFilter);


/**
 */
function KalturaLiveAssetFilter(){
}
KalturaLiveAssetFilter.inheritsFrom (KalturaLiveAssetBaseFilter);


/**
 */
function KalturaLiveParamsFilter(){
}
KalturaLiveParamsFilter.inheritsFrom (KalturaLiveParamsBaseFilter);


/**
 */
function KalturaMediaFlavorParamsFilter(){
}
KalturaMediaFlavorParamsFilter.inheritsFrom (KalturaMediaFlavorParamsBaseFilter);


/**
 */
function KalturaMixEntryFilter(){
}
KalturaMixEntryFilter.inheritsFrom (KalturaMixEntryBaseFilter);


/**
 */
function KalturaPdfFlavorParamsFilter(){
}
KalturaPdfFlavorParamsFilter.inheritsFrom (KalturaPdfFlavorParamsBaseFilter);


/**
 */
function KalturaScpDropFolderBaseFilter(){
}
KalturaScpDropFolderBaseFilter.inheritsFrom (KalturaSshDropFolderFilter);


/**
 */
function KalturaSftpDropFolderBaseFilter(){
}
KalturaSftpDropFolderBaseFilter.inheritsFrom (KalturaSshDropFolderFilter);


/**
 */
function KalturaSwfFlavorParamsFilter(){
}
KalturaSwfFlavorParamsFilter.inheritsFrom (KalturaSwfFlavorParamsBaseFilter);


/**
 */
function KalturaThumbParamsOutputFilter(){
}
KalturaThumbParamsOutputFilter.inheritsFrom (KalturaThumbParamsOutputBaseFilter);


/**
 */
function KalturaTimedThumbAssetFilter(){
}
KalturaTimedThumbAssetFilter.inheritsFrom (KalturaTimedThumbAssetBaseFilter);


/**
 */
function KalturaTranscriptAssetFilter(){
}
KalturaTranscriptAssetFilter.inheritsFrom (KalturaTranscriptAssetBaseFilter);


/**
 */
function KalturaWowzaMediaServerNodeBaseFilter(){
}
KalturaWowzaMediaServerNodeBaseFilter.inheritsFrom (KalturaMediaServerNodeFilter);


/**
 */
function KalturaDocumentFlavorParamsOutputBaseFilter(){
}
KalturaDocumentFlavorParamsOutputBaseFilter.inheritsFrom (KalturaFlavorParamsOutputFilter);


/**
 * @param	externalSourceTypeEqual	string		.
 * @param	externalSourceTypeIn	string		.
 * @param	assetParamsIdsMatchOr	string		.
 * @param	assetParamsIdsMatchAnd	string		.
 */
function KalturaExternalMediaEntryBaseFilter(){
	this.externalSourceTypeEqual = null;
	this.externalSourceTypeIn = null;
	this.assetParamsIdsMatchOr = null;
	this.assetParamsIdsMatchAnd = null;
}
KalturaExternalMediaEntryBaseFilter.inheritsFrom (KalturaMediaEntryFilter);


/**
 */
function KalturaImageFlavorParamsOutputBaseFilter(){
}
KalturaImageFlavorParamsOutputBaseFilter.inheritsFrom (KalturaFlavorParamsOutputFilter);


/**
 */
function KalturaLiveEntryBaseFilter(){
}
KalturaLiveEntryBaseFilter.inheritsFrom (KalturaMediaEntryFilter);


/**
 */
function KalturaMediaFlavorParamsOutputBaseFilter(){
}
KalturaMediaFlavorParamsOutputBaseFilter.inheritsFrom (KalturaFlavorParamsOutputFilter);


/**
 */
function KalturaPdfFlavorParamsOutputBaseFilter(){
}
KalturaPdfFlavorParamsOutputBaseFilter.inheritsFrom (KalturaFlavorParamsOutputFilter);


/**
 */
function KalturaScpDropFolderFilter(){
}
KalturaScpDropFolderFilter.inheritsFrom (KalturaScpDropFolderBaseFilter);


/**
 */
function KalturaSftpDropFolderFilter(){
}
KalturaSftpDropFolderFilter.inheritsFrom (KalturaSftpDropFolderBaseFilter);


/**
 */
function KalturaSwfFlavorParamsOutputBaseFilter(){
}
KalturaSwfFlavorParamsOutputBaseFilter.inheritsFrom (KalturaFlavorParamsOutputFilter);


/**
 */
function KalturaWowzaMediaServerNodeFilter(){
}
KalturaWowzaMediaServerNodeFilter.inheritsFrom (KalturaWowzaMediaServerNodeBaseFilter);


/**
 */
function KalturaDocumentFlavorParamsOutputFilter(){
}
KalturaDocumentFlavorParamsOutputFilter.inheritsFrom (KalturaDocumentFlavorParamsOutputBaseFilter);


/**
 */
function KalturaExternalMediaEntryFilter(){
}
KalturaExternalMediaEntryFilter.inheritsFrom (KalturaExternalMediaEntryBaseFilter);


/**
 */
function KalturaImageFlavorParamsOutputFilter(){
}
KalturaImageFlavorParamsOutputFilter.inheritsFrom (KalturaImageFlavorParamsOutputBaseFilter);


/**
 * @param	isLive	int		.
 * @param	isRecordedEntryIdEmpty	int		.
 * @param	hasMediaServerHostname	string		.
 */
function KalturaLiveEntryFilter(){
	this.isLive = null;
	this.isRecordedEntryIdEmpty = null;
	this.hasMediaServerHostname = null;
}
KalturaLiveEntryFilter.inheritsFrom (KalturaLiveEntryBaseFilter);


/**
 */
function KalturaMediaFlavorParamsOutputFilter(){
}
KalturaMediaFlavorParamsOutputFilter.inheritsFrom (KalturaMediaFlavorParamsOutputBaseFilter);


/**
 */
function KalturaPdfFlavorParamsOutputFilter(){
}
KalturaPdfFlavorParamsOutputFilter.inheritsFrom (KalturaPdfFlavorParamsOutputBaseFilter);


/**
 */
function KalturaSwfFlavorParamsOutputFilter(){
}
KalturaSwfFlavorParamsOutputFilter.inheritsFrom (KalturaSwfFlavorParamsOutputBaseFilter);


/**
 */
function KalturaLiveChannelBaseFilter(){
}
KalturaLiveChannelBaseFilter.inheritsFrom (KalturaLiveEntryFilter);


/**
 */
function KalturaLiveStreamEntryBaseFilter(){
}
KalturaLiveStreamEntryBaseFilter.inheritsFrom (KalturaLiveEntryFilter);


/**
 */
function KalturaLiveChannelFilter(){
}
KalturaLiveChannelFilter.inheritsFrom (KalturaLiveChannelBaseFilter);


/**
 */
function KalturaLiveStreamEntryFilter(){
}
KalturaLiveStreamEntryFilter.inheritsFrom (KalturaLiveStreamEntryBaseFilter);


/**
 */
function KalturaLiveStreamAdminEntryBaseFilter(){
}
KalturaLiveStreamAdminEntryBaseFilter.inheritsFrom (KalturaLiveStreamEntryFilter);


/**
 */
function KalturaLiveStreamAdminEntryFilter(){
}
KalturaLiveStreamAdminEntryFilter.inheritsFrom (KalturaLiveStreamAdminEntryBaseFilter);


;
// ===================================================================================================
//                           _  __     _ _
//                          | |/ /__ _| | |_ _  _ _ _ __ _
//                          | ' </ _` | |  _| || | '_/ _` |
//                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
//
// This file is part of the Kaltura Collaborative Media Suite which allows users
// to do with audio, video, and animation what Wiki platfroms allow them to do with
// text.
//
// Copyright (C) 2006-2015  Kaltura Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @ignore
// ===================================================================================================
/**
 *Class definition for the Kaltura service: accessControlProfile.
 * The available service actions:
 * @action	add	Add new access control profile
 *		 .
 * @action	get	Get access control profile by id
 *		 .
 * @action	update	Update access control profile by id
 *		 .
 * @action	delete	Delete access control profile by id
 *		 .
 * @action	list	List access control profiles by filter and pager
 *		 .
*/
function KalturaAccessControlProfileService(client){
	this.init(client);
}
KalturaAccessControlProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Add new access control profile
 *		 .
 * @param	accessControlProfile	KalturaAccessControlProfile		 (optional).
 * @return	KalturaAccessControlProfile.
 */
KalturaAccessControlProfileService.prototype.add = function(callback, accessControlProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "accessControlProfile", toParams(accessControlProfile));
	this.client.queueServiceActionCall("accesscontrolprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get access control profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaAccessControlProfile.
 */
KalturaAccessControlProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("accesscontrolprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update access control profile by id
 *		 .
 * @param	id	int		 (optional).
 * @param	accessControlProfile	KalturaAccessControlProfile		 (optional).
 * @return	KalturaAccessControlProfile.
 */
KalturaAccessControlProfileService.prototype.update = function(callback, id, accessControlProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "accessControlProfile", toParams(accessControlProfile));
	this.client.queueServiceActionCall("accesscontrolprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete access control profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaAccessControlProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("accesscontrolprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List access control profiles by filter and pager
 *		 .
 * @param	filter	KalturaAccessControlProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaAccessControlProfileListResponse.
 */
KalturaAccessControlProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("accesscontrolprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: accessControl.
 * The available service actions:
 * @action	add	Add new Access Control Profile
 *		 .
 * @action	get	Get Access Control Profile by id
 *		 .
 * @action	update	Update Access Control Profile by id
 *		 .
 * @action	delete	Delete Access Control Profile by id
 *		 .
 * @action	list	List Access Control Profiles by filter and pager
 *		 .
*/
function KalturaAccessControlService(client){
	this.init(client);
}
KalturaAccessControlService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Access Control Profile
 *		 .
 * @param	accessControl	KalturaAccessControl		 (optional).
 * @return	KalturaAccessControl.
 */
KalturaAccessControlService.prototype.add = function(callback, accessControl){
	var kparams = new Object();
	this.client.addParam(kparams, "accessControl", toParams(accessControl));
	this.client.queueServiceActionCall("accesscontrol", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Access Control Profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaAccessControl.
 */
KalturaAccessControlService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("accesscontrol", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Access Control Profile by id
 *		 .
 * @param	id	int		 (optional).
 * @param	accessControl	KalturaAccessControl		 (optional).
 * @return	KalturaAccessControl.
 */
KalturaAccessControlService.prototype.update = function(callback, id, accessControl){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "accessControl", toParams(accessControl));
	this.client.queueServiceActionCall("accesscontrol", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Access Control Profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaAccessControlService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("accesscontrol", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Access Control Profiles by filter and pager
 *		 .
 * @param	filter	KalturaAccessControlFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaAccessControlListResponse.
 */
KalturaAccessControlService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("accesscontrol", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: adminUser.
 * The available service actions:
 * @action	updatePassword	Update admin user password and email
 *		 .
 * @action	resetPassword	Reset admin user password and send it to the users email address
 *		 .
 * @action	login	Get an admin session using admin email and password (Used for login to the KMC application)
 *		 .
 * @action	setInitialPassword	Set initial users password
 *		 .
*/
function KalturaAdminUserService(client){
	this.init(client);
}
KalturaAdminUserService.inheritsFrom (KalturaServiceBase);
/**
 * Update admin user password and email
 *		 .
 * @param	email	string		 (optional).
 * @param	password	string		 (optional).
 * @param	newEmail	string		Optional, provide only when you want to update the email (optional).
 * @param	newPassword	string		 (optional).
 * @return	KalturaAdminUser.
 */
KalturaAdminUserService.prototype.updatePassword = function(callback, email, password, newEmail, newPassword){
	if(!newEmail)
		newEmail = "";
	if(!newPassword)
		newPassword = "";
	var kparams = new Object();
	this.client.addParam(kparams, "email", email);
	this.client.addParam(kparams, "password", password);
	this.client.addParam(kparams, "newEmail", newEmail);
	this.client.addParam(kparams, "newPassword", newPassword);
	this.client.queueServiceActionCall("adminuser", "updatePassword", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Reset admin user password and send it to the users email address
 *		 .
 * @param	email	string		 (optional).
 * @return	.
 */
KalturaAdminUserService.prototype.resetPassword = function(callback, email){
	var kparams = new Object();
	this.client.addParam(kparams, "email", email);
	this.client.queueServiceActionCall("adminuser", "resetPassword", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get an admin session using admin email and password (Used for login to the KMC application)
 *		 .
 * @param	email	string		 (optional).
 * @param	password	string		 (optional).
 * @param	partnerId	int		 (optional, default: null).
 * @return	string.
 */
KalturaAdminUserService.prototype.login = function(callback, email, password, partnerId){
	if(!partnerId)
		partnerId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "email", email);
	this.client.addParam(kparams, "password", password);
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.queueServiceActionCall("adminuser", "login", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Set initial users password
 *		 .
 * @param	hashKey	string		 (optional).
 * @param	newPassword	string		new password to set (optional).
 * @return	.
 */
KalturaAdminUserService.prototype.setInitialPassword = function(callback, hashKey, newPassword){
	var kparams = new Object();
	this.client.addParam(kparams, "hashKey", hashKey);
	this.client.addParam(kparams, "newPassword", newPassword);
	this.client.queueServiceActionCall("adminuser", "setInitialPassword", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: appToken.
 * The available service actions:
 * @action	add	Add new application authentication token
 *		 .
 * @action	get	Get application authentication token by id
 *		 .
 * @action	update	Update application authentication token by id
 *		 .
 * @action	delete	Delete application authentication token by id
 *		 .
 * @action	list	List application authentication tokens by filter and pager
 *		 .
 * @action	startSession	Starts a new KS (kaltura Session) based on application authentication token id
 *		 .
*/
function KalturaAppTokenService(client){
	this.init(client);
}
KalturaAppTokenService.inheritsFrom (KalturaServiceBase);
/**
 * Add new application authentication token
 *		 .
 * @param	appToken	KalturaAppToken		 (optional).
 * @return	KalturaAppToken.
 */
KalturaAppTokenService.prototype.add = function(callback, appToken){
	var kparams = new Object();
	this.client.addParam(kparams, "appToken", toParams(appToken));
	this.client.queueServiceActionCall("apptoken", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get application authentication token by id
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaAppToken.
 */
KalturaAppTokenService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("apptoken", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update application authentication token by id
 *		 .
 * @param	id	string		 (optional).
 * @param	appToken	KalturaAppToken		 (optional).
 * @return	KalturaAppToken.
 */
KalturaAppTokenService.prototype.update = function(callback, id, appToken){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "appToken", toParams(appToken));
	this.client.queueServiceActionCall("apptoken", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete application authentication token by id
 *		 .
 * @param	id	string		 (optional).
 * @return	.
 */
KalturaAppTokenService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("apptoken", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List application authentication tokens by filter and pager
 *		 .
 * @param	filter	KalturaAppTokenFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaAppTokenListResponse.
 */
KalturaAppTokenService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("apptoken", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Starts a new KS (kaltura Session) based on application authentication token id
 *		 .
 * @param	id	string		application token id (optional).
 * @param	tokenHash	string		hashed token, built of sha1 on current KS concatenated with the application token (optional).
 * @param	userId	string		session user id, will be ignored if a different user id already defined on the application token (optional, default: null).
 * @param	type	int		session type, will be ignored if a different session type already defined on the application token (optional, enum: KalturaSessionType, default: null).
 * @param	expiry	int		session expiry (in seconds), could be overwritten by shorter expiry of the application token and the session-expiry that defined on the application token  (optional, default: null).
 * @return	KalturaSessionInfo.
 */
KalturaAppTokenService.prototype.startSession = function(callback, id, tokenHash, userId, type, expiry){
	if(!userId)
		userId = null;
	if(!type)
		type = null;
	if(!expiry)
		expiry = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "tokenHash", tokenHash);
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "type", type);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.queueServiceActionCall("apptoken", "startSession", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: baseEntry.
 * The available service actions:
 * @action	add	Generic add entry, should be used when the uploaded entry type is not known.
 *	     .
 * @action	addContent	Attach content resource to entry in status NO_MEDIA
 *	     .
 * @action	addFromUploadedFile	Generic add entry using an uploaded file, should be used when the uploaded entry type is not known.
 *	     .
 * @action	get	Get base entry by ID.
 *		 .
 * @action	getRemotePaths	Get remote storage existing paths for the asset.
 *	     .
 * @action	update	Update base entry. Only the properties that were set will be updated.
 *		 .
 * @action	updateContent	Update the content resource associated with the entry.
 *		 .
 * @action	getByIds	Get an array of KalturaBaseEntry objects by a comma-separated list of ids.
 *		 .
 * @action	delete	Delete an entry.
 *		 .
 * @action	list	List base entries by filter with paging support.
 *		 .
 * @action	listByReferenceId	List base entries by filter according to reference id
 *		 .
 * @action	count	Count base entries by filter.
 *		 .
 * @action	upload	Upload a file to Kaltura, that can be used to create an entry.
 *		 .
 * @action	updateThumbnailJpeg	Update entry thumbnail using a raw jpeg file.
 *		 .
 * @action	updateThumbnailFromUrl	Update entry thumbnail using url.
 *		 .
 * @action	updateThumbnailFromSourceEntry	Update entry thumbnail from a different entry by a specified time offset (in seconds).
 *		 .
 * @action	flag	Flag inappropriate entry for moderation.
 *		 .
 * @action	reject	Reject the entry and mark the pending flags (if any) as moderated (this will make the entry non-playable).
 *		 .
 * @action	approve	Approve the entry and mark the pending flags (if any) as moderated (this will make the entry playable).
 *		 .
 * @action	listFlags	List all pending flags for the entry.
 *		 .
 * @action	anonymousRank	Anonymously rank an entry, no validation is done on duplicate rankings.
 *		 .
 * @action	getContextData	This action delivers entry-related data, based on the user's context: access control, restriction, playback format and storage information.
 *		 .
 * @action	export	.
 * @action	index	Index an entry by id.
 *		 .
 * @action	clone	Clone an entry with optional attributes to apply to the clone
 *		 .
*/
function KalturaBaseEntryService(client){
	this.init(client);
}
KalturaBaseEntryService.inheritsFrom (KalturaServiceBase);
/**
 * Generic add entry, should be used when the uploaded entry type is not known.
 *	     .
 * @param	entry	KalturaBaseEntry		 (optional).
 * @param	type	string		 (optional, enum: KalturaEntryType, default: null).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.add = function(callback, entry, type){
	if(!type)
		type = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entry", toParams(entry));
	this.client.addParam(kparams, "type", type);
	this.client.queueServiceActionCall("baseentry", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Attach content resource to entry in status NO_MEDIA
 *	     .
 * @param	entryId	string		 (optional).
 * @param	resource	KalturaResource		 (optional).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.addContent = function(callback, entryId, resource){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.queueServiceActionCall("baseentry", "addContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Generic add entry using an uploaded file, should be used when the uploaded entry type is not known.
 *	     .
 * @param	entry	KalturaBaseEntry		 (optional).
 * @param	uploadTokenId	string		 (optional).
 * @param	type	string		 (optional, enum: KalturaEntryType, default: null).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.addFromUploadedFile = function(callback, entry, uploadTokenId, type){
	if(!type)
		type = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entry", toParams(entry));
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.addParam(kparams, "type", type);
	this.client.queueServiceActionCall("baseentry", "addFromUploadedFile", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get base entry by ID.
 *		 .
 * @param	entryId	string		Entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("baseentry", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get remote storage existing paths for the asset.
 *	     .
 * @param	entryId	string		 (optional).
 * @return	KalturaRemotePathListResponse.
 */
KalturaBaseEntryService.prototype.getRemotePaths = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("baseentry", "getRemotePaths", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update base entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Entry id to update (optional).
 * @param	baseEntry	KalturaBaseEntry		Base entry metadata to update (optional).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.update = function(callback, entryId, baseEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "baseEntry", toParams(baseEntry));
	this.client.queueServiceActionCall("baseentry", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update the content resource associated with the entry.
 *		 .
 * @param	entryId	string		Entry id to update (optional).
 * @param	resource	KalturaResource		Resource to be used to replace entry content (optional).
 * @param	conversionProfileId	int		The conversion profile id to be used on the entry (optional, default: null).
 * @param	advancedOptions	KalturaEntryReplacementOptions		Additional update content options (optional, default: null).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.updateContent = function(callback, entryId, resource, conversionProfileId, advancedOptions){
	if(!conversionProfileId)
		conversionProfileId = null;
	if(!advancedOptions)
		advancedOptions = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	if (advancedOptions != null)
		this.client.addParam(kparams, "advancedOptions", toParams(advancedOptions));
	this.client.queueServiceActionCall("baseentry", "updateContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get an array of KalturaBaseEntry objects by a comma-separated list of ids.
 *		 .
 * @param	entryIds	string		Comma separated string of entry ids (optional).
 * @return	array.
 */
KalturaBaseEntryService.prototype.getByIds = function(callback, entryIds){
	var kparams = new Object();
	this.client.addParam(kparams, "entryIds", entryIds);
	this.client.queueServiceActionCall("baseentry", "getByIds", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an entry.
 *		 .
 * @param	entryId	string		Entry id to delete (optional).
 * @return	.
 */
KalturaBaseEntryService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("baseentry", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List base entries by filter with paging support.
 *		 .
 * @param	filter	KalturaBaseEntryFilter		Entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaBaseEntryListResponse.
 */
KalturaBaseEntryService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("baseentry", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List base entries by filter according to reference id
 *		 .
 * @param	refId	string		Entry Reference ID (optional).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaBaseEntryListResponse.
 */
KalturaBaseEntryService.prototype.listByReferenceId = function(callback, refId, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "refId", refId);
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("baseentry", "listByReferenceId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Count base entries by filter.
 *		 .
 * @param	filter	KalturaBaseEntryFilter		Entry filter (optional, default: null).
 * @return	int.
 */
KalturaBaseEntryService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("baseentry", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Upload a file to Kaltura, that can be used to create an entry.
 *		 .
 * @param	fileData	file		The file data (optional).
 * @return	string.
 */
KalturaBaseEntryService.prototype.upload = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("baseentry", "upload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update entry thumbnail using a raw jpeg file.
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	fileData	file		Jpeg file data (optional).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.updateThumbnailJpeg = function(callback, entryId, fileData){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("baseentry", "updateThumbnailJpeg", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update entry thumbnail using url.
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	url	string		file url (optional).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.updateThumbnailFromUrl = function(callback, entryId, url){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("baseentry", "updateThumbnailFromUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update entry thumbnail from a different entry by a specified time offset (in seconds).
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	sourceEntryId	string		Media entry id (optional).
 * @param	timeOffset	int		Time offset (in seconds) (optional).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.updateThumbnailFromSourceEntry = function(callback, entryId, sourceEntryId, timeOffset){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "sourceEntryId", sourceEntryId);
	this.client.addParam(kparams, "timeOffset", timeOffset);
	this.client.queueServiceActionCall("baseentry", "updateThumbnailFromSourceEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Flag inappropriate entry for moderation.
 *		 .
 * @param	moderationFlag	KalturaModerationFlag		 (optional).
 * @return	.
 */
KalturaBaseEntryService.prototype.flag = function(callback, moderationFlag){
	var kparams = new Object();
	this.client.addParam(kparams, "moderationFlag", toParams(moderationFlag));
	this.client.queueServiceActionCall("baseentry", "flag", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Reject the entry and mark the pending flags (if any) as moderated (this will make the entry non-playable).
 *		 .
 * @param	entryId	string		 (optional).
 * @return	.
 */
KalturaBaseEntryService.prototype.reject = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("baseentry", "reject", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Approve the entry and mark the pending flags (if any) as moderated (this will make the entry playable).
 *		 .
 * @param	entryId	string		 (optional).
 * @return	.
 */
KalturaBaseEntryService.prototype.approve = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("baseentry", "approve", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all pending flags for the entry.
 *		 .
 * @param	entryId	string		 (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaModerationFlagListResponse.
 */
KalturaBaseEntryService.prototype.listFlags = function(callback, entryId, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("baseentry", "listFlags", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Anonymously rank an entry, no validation is done on duplicate rankings.
 *		 .
 * @param	entryId	string		 (optional).
 * @param	rank	int		 (optional).
 * @return	.
 */
KalturaBaseEntryService.prototype.anonymousRank = function(callback, entryId, rank){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "rank", rank);
	this.client.queueServiceActionCall("baseentry", "anonymousRank", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * This action delivers entry-related data, based on the user's context: access control, restriction, playback format and storage information.
 *		 .
 * @param	entryId	string		 (optional).
 * @param	contextDataParams	KalturaEntryContextDataParams		 (optional).
 * @return	KalturaEntryContextDataResult.
 */
KalturaBaseEntryService.prototype.getContextData = function(callback, entryId, contextDataParams){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "contextDataParams", toParams(contextDataParams));
	this.client.queueServiceActionCall("baseentry", "getContextData", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @param	storageProfileId	int		 (optional).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.exportAction = function(callback, entryId, storageProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "storageProfileId", storageProfileId);
	this.client.queueServiceActionCall("baseentry", "export", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Index an entry by id.
 *		 .
 * @param	id	string		 (optional).
 * @param	shouldUpdate	bool		 (optional, default: true).
 * @return	int.
 */
KalturaBaseEntryService.prototype.index = function(callback, id, shouldUpdate){
	if(!shouldUpdate)
		shouldUpdate = true;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "shouldUpdate", shouldUpdate);
	this.client.queueServiceActionCall("baseentry", "index", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Clone an entry with optional attributes to apply to the clone
 *		 .
 * @param	entryId	string		Id of entry to clone (optional).
 * @param	cloneOptions	array		 (optional, default: null).
 * @return	KalturaBaseEntry.
 */
KalturaBaseEntryService.prototype.cloneAction = function(callback, entryId, cloneOptions){
	if(!cloneOptions)
		cloneOptions = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	if(cloneOptions != null)
	for(var index in cloneOptions)
	{
		var obj = cloneOptions[index];
		this.client.addParam(kparams, "cloneOptions:" + index, toParams(obj));
	}
	this.client.queueServiceActionCall("baseentry", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: bulkUpload.
 * The available service actions:
 * @action	add	Add new bulk upload batch job
 *		 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
 *		 If no conversion profile was specified, partner's default will be used
 *		 .
 * @action	get	Get bulk upload batch job by id
 *		 .
 * @action	list	List bulk upload batch jobs
 *		 .
 * @action	abort	Aborts the bulk upload and all its child jobs
 *		 .
*/
function KalturaBulkUploadService(client){
	this.init(client);
}
KalturaBulkUploadService.inheritsFrom (KalturaServiceBase);
/**
 * Add new bulk upload batch job
 *		 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
 *		 If no conversion profile was specified, partner's default will be used
 *		 .
 * @param	conversionProfileId	int		Convertion profile id to use for converting the current bulk (-1 to use partner's default) (optional).
 * @param	csvFileData	file		bulk upload file (optional).
 * @param	bulkUploadType	string		 (optional, enum: KalturaBulkUploadType, default: null).
 * @param	uploadedBy	string		 (optional, default: null).
 * @param	fileName	string		Friendly name of the file, used to be recognized later in the logs. (optional, default: null).
 * @return	KalturaBulkUpload.
 */
KalturaBulkUploadService.prototype.add = function(callback, conversionProfileId, csvFileData, bulkUploadType, uploadedBy, fileName){
	if(!bulkUploadType)
		bulkUploadType = null;
	if(!uploadedBy)
		uploadedBy = null;
	if(!fileName)
		fileName = null;
	var kparams = new Object();
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	kfiles = new Object();
	this.client.addParam(kfiles, "csvFileData", csvFileData);
	this.client.addParam(kparams, "bulkUploadType", bulkUploadType);
	this.client.addParam(kparams, "uploadedBy", uploadedBy);
	this.client.addParam(kparams, "fileName", fileName);
	this.client.queueServiceActionCall("bulkupload", "add", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get bulk upload batch job by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaBulkUpload.
 */
KalturaBulkUploadService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("bulkupload", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List bulk upload batch jobs
 *		 .
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaBulkUploadListResponse.
 */
KalturaBulkUploadService.prototype.listAction = function(callback, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("bulkupload", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Aborts the bulk upload and all its child jobs
 *		 .
 * @param	id	int		job id (optional).
 * @return	KalturaBulkUpload.
 */
KalturaBulkUploadService.prototype.abort = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("bulkupload", "abort", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: categoryEntry.
 * The available service actions:
 * @action	add	Add new CategoryEntry
 *		 .
 * @action	delete	Delete CategoryEntry
 *		 .
 * @action	list	List all categoryEntry
 *		 .
 * @action	index	Index CategoryEntry by Id
 *		 .
 * @action	activate	activate CategoryEntry when it is pending moderation
 *		 .
 * @action	reject	activate CategoryEntry when it is pending moderation
 *		 .
 * @action	syncPrivacyContext	update privacy context from the category
 *		 .
 * @action	addFromBulkUpload	.
*/
function KalturaCategoryEntryService(client){
	this.init(client);
}
KalturaCategoryEntryService.inheritsFrom (KalturaServiceBase);
/**
 * Add new CategoryEntry
 *		 .
 * @param	categoryEntry	KalturaCategoryEntry		 (optional).
 * @return	KalturaCategoryEntry.
 */
KalturaCategoryEntryService.prototype.add = function(callback, categoryEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryEntry", toParams(categoryEntry));
	this.client.queueServiceActionCall("categoryentry", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete CategoryEntry
 *		 .
 * @param	entryId	string		 (optional).
 * @param	categoryId	int		 (optional).
 * @return	.
 */
KalturaCategoryEntryService.prototype.deleteAction = function(callback, entryId, categoryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.queueServiceActionCall("categoryentry", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all categoryEntry
 *		 .
 * @param	filter	KalturaCategoryEntryFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCategoryEntryListResponse.
 */
KalturaCategoryEntryService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("categoryentry", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Index CategoryEntry by Id
 *		 .
 * @param	entryId	string		 (optional).
 * @param	categoryId	int		 (optional).
 * @param	shouldUpdate	bool		 (optional, default: true).
 * @return	int.
 */
KalturaCategoryEntryService.prototype.index = function(callback, entryId, categoryId, shouldUpdate){
	if(!shouldUpdate)
		shouldUpdate = true;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "shouldUpdate", shouldUpdate);
	this.client.queueServiceActionCall("categoryentry", "index", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * activate CategoryEntry when it is pending moderation
 *		 .
 * @param	entryId	string		 (optional).
 * @param	categoryId	int		 (optional).
 * @return	.
 */
KalturaCategoryEntryService.prototype.activate = function(callback, entryId, categoryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.queueServiceActionCall("categoryentry", "activate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * activate CategoryEntry when it is pending moderation
 *		 .
 * @param	entryId	string		 (optional).
 * @param	categoryId	int		 (optional).
 * @return	.
 */
KalturaCategoryEntryService.prototype.reject = function(callback, entryId, categoryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.queueServiceActionCall("categoryentry", "reject", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * update privacy context from the category
 *		 .
 * @param	entryId	string		 (optional).
 * @param	categoryId	int		 (optional).
 * @return	.
 */
KalturaCategoryEntryService.prototype.syncPrivacyContext = function(callback, entryId, categoryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.queueServiceActionCall("categoryentry", "syncPrivacyContext", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	bulkUploadData	KalturaBulkServiceData		 (optional).
 * @param	bulkUploadCategoryEntryData	KalturaBulkUploadCategoryEntryData		 (optional, default: null).
 * @return	KalturaBulkUpload.
 */
KalturaCategoryEntryService.prototype.addFromBulkUpload = function(callback, bulkUploadData, bulkUploadCategoryEntryData){
	if(!bulkUploadCategoryEntryData)
		bulkUploadCategoryEntryData = null;
	var kparams = new Object();
	this.client.addParam(kparams, "bulkUploadData", toParams(bulkUploadData));
	if (bulkUploadCategoryEntryData != null)
		this.client.addParam(kparams, "bulkUploadCategoryEntryData", toParams(bulkUploadCategoryEntryData));
	this.client.queueServiceActionCall("categoryentry", "addFromBulkUpload", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: category.
 * The available service actions:
 * @action	add	Add new Category
 *		 .
 * @action	get	Get Category by id
 *		 .
 * @action	update	Update Category
 *		 .
 * @action	delete	Delete a Category
 *		 .
 * @action	list	List all categories
 *		 .
 * @action	index	Index Category by id
 *		 .
 * @action	move	Move categories that belong to the same parent category to a target categroy - enabled only for ks with disable entitlement
 *		 .
 * @action	unlockCategories	Unlock categories
 *		 .
 * @action	addFromBulkUpload	.
*/
function KalturaCategoryService(client){
	this.init(client);
}
KalturaCategoryService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Category
 *		 .
 * @param	category	KalturaCategory		 (optional).
 * @return	KalturaCategory.
 */
KalturaCategoryService.prototype.add = function(callback, category){
	var kparams = new Object();
	this.client.addParam(kparams, "category", toParams(category));
	this.client.queueServiceActionCall("category", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Category by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaCategory.
 */
KalturaCategoryService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("category", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Category
 *		 .
 * @param	id	int		 (optional).
 * @param	category	KalturaCategory		 (optional).
 * @return	KalturaCategory.
 */
KalturaCategoryService.prototype.update = function(callback, id, category){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "category", toParams(category));
	this.client.queueServiceActionCall("category", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a Category
 *		 .
 * @param	id	int		 (optional).
 * @param	moveEntriesToParentCategory	int		 (optional, enum: KalturaNullableBoolean, default: 1).
 * @return	.
 */
KalturaCategoryService.prototype.deleteAction = function(callback, id, moveEntriesToParentCategory){
	if(!moveEntriesToParentCategory)
		moveEntriesToParentCategory = 1;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "moveEntriesToParentCategory", moveEntriesToParentCategory);
	this.client.queueServiceActionCall("category", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all categories
 *		 .
 * @param	filter	KalturaCategoryFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCategoryListResponse.
 */
KalturaCategoryService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("category", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Index Category by id
 *		 .
 * @param	id	int		 (optional).
 * @param	shouldUpdate	bool		 (optional, default: true).
 * @return	int.
 */
KalturaCategoryService.prototype.index = function(callback, id, shouldUpdate){
	if(!shouldUpdate)
		shouldUpdate = true;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "shouldUpdate", shouldUpdate);
	this.client.queueServiceActionCall("category", "index", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Move categories that belong to the same parent category to a target categroy - enabled only for ks with disable entitlement
 *		 .
 * @param	categoryIds	string		 (optional).
 * @param	targetCategoryParentId	int		 (optional).
 * @return	KalturaCategoryListResponse.
 */
KalturaCategoryService.prototype.move = function(callback, categoryIds, targetCategoryParentId){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryIds", categoryIds);
	this.client.addParam(kparams, "targetCategoryParentId", targetCategoryParentId);
	this.client.queueServiceActionCall("category", "move", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Unlock categories
 *		 .
 * @return	.
 */
KalturaCategoryService.prototype.unlockCategories = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("category", "unlockCategories", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	fileData	file		 (optional).
 * @param	bulkUploadData	KalturaBulkUploadJobData		 (optional, default: null).
 * @param	bulkUploadCategoryData	KalturaBulkUploadCategoryData		 (optional, default: null).
 * @return	KalturaBulkUpload.
 */
KalturaCategoryService.prototype.addFromBulkUpload = function(callback, fileData, bulkUploadData, bulkUploadCategoryData){
	if(!bulkUploadData)
		bulkUploadData = null;
	if(!bulkUploadCategoryData)
		bulkUploadCategoryData = null;
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	if (bulkUploadData != null)
		this.client.addParam(kparams, "bulkUploadData", toParams(bulkUploadData));
	if (bulkUploadCategoryData != null)
		this.client.addParam(kparams, "bulkUploadCategoryData", toParams(bulkUploadCategoryData));
	this.client.queueServiceActionCall("category", "addFromBulkUpload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: categoryUser.
 * The available service actions:
 * @action	add	Add new CategoryUser
 *		 .
 * @action	get	Get CategoryUser by id
 *		 .
 * @action	update	Update CategoryUser by id
 *		 .
 * @action	delete	Delete a CategoryUser
 *		 .
 * @action	activate	activate CategoryUser
 *		 .
 * @action	deactivate	reject CategoryUser
 *		 .
 * @action	list	List all categories
 *		 .
 * @action	copyFromCategory	Copy all memeber from parent category
 *		 .
 * @action	index	Index CategoryUser by userid and category id
 *		 .
 * @action	addFromBulkUpload	.
*/
function KalturaCategoryUserService(client){
	this.init(client);
}
KalturaCategoryUserService.inheritsFrom (KalturaServiceBase);
/**
 * Add new CategoryUser
 *		 .
 * @param	categoryUser	KalturaCategoryUser		 (optional).
 * @return	KalturaCategoryUser.
 */
KalturaCategoryUserService.prototype.add = function(callback, categoryUser){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryUser", toParams(categoryUser));
	this.client.queueServiceActionCall("categoryuser", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get CategoryUser by id
 *		 .
 * @param	categoryId	int		 (optional).
 * @param	userId	string		 (optional).
 * @return	KalturaCategoryUser.
 */
KalturaCategoryUserService.prototype.get = function(callback, categoryId, userId){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("categoryuser", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update CategoryUser by id
 *		 .
 * @param	categoryId	int		 (optional).
 * @param	userId	string		 (optional).
 * @param	categoryUser	KalturaCategoryUser		 (optional).
 * @param	override	bool		- to override manual changes (optional, default: false).
 * @return	KalturaCategoryUser.
 */
KalturaCategoryUserService.prototype.update = function(callback, categoryId, userId, categoryUser, override){
	if(!override)
		override = false;
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "categoryUser", toParams(categoryUser));
	this.client.addParam(kparams, "override", override);
	this.client.queueServiceActionCall("categoryuser", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a CategoryUser
 *		 .
 * @param	categoryId	int		 (optional).
 * @param	userId	string		 (optional).
 * @return	.
 */
KalturaCategoryUserService.prototype.deleteAction = function(callback, categoryId, userId){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("categoryuser", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * activate CategoryUser
 *		 .
 * @param	categoryId	int		 (optional).
 * @param	userId	string		 (optional).
 * @return	KalturaCategoryUser.
 */
KalturaCategoryUserService.prototype.activate = function(callback, categoryId, userId){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("categoryuser", "activate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * reject CategoryUser
 *		 .
 * @param	categoryId	int		 (optional).
 * @param	userId	string		 (optional).
 * @return	KalturaCategoryUser.
 */
KalturaCategoryUserService.prototype.deactivate = function(callback, categoryId, userId){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("categoryuser", "deactivate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all categories
 *		 .
 * @param	filter	KalturaCategoryUserFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCategoryUserListResponse.
 */
KalturaCategoryUserService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("categoryuser", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy all memeber from parent category
 *		 .
 * @param	categoryId	int		 (optional).
 * @return	.
 */
KalturaCategoryUserService.prototype.copyFromCategory = function(callback, categoryId){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.queueServiceActionCall("categoryuser", "copyFromCategory", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Index CategoryUser by userid and category id
 *		 .
 * @param	userId	string		 (optional).
 * @param	categoryId	int		 (optional).
 * @param	shouldUpdate	bool		 (optional, default: true).
 * @return	int.
 */
KalturaCategoryUserService.prototype.index = function(callback, userId, categoryId, shouldUpdate){
	if(!shouldUpdate)
		shouldUpdate = true;
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "shouldUpdate", shouldUpdate);
	this.client.queueServiceActionCall("categoryuser", "index", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	fileData	file		 (optional).
 * @param	bulkUploadData	KalturaBulkUploadJobData		 (optional, default: null).
 * @param	bulkUploadCategoryUserData	KalturaBulkUploadCategoryUserData		 (optional, default: null).
 * @return	KalturaBulkUpload.
 */
KalturaCategoryUserService.prototype.addFromBulkUpload = function(callback, fileData, bulkUploadData, bulkUploadCategoryUserData){
	if(!bulkUploadData)
		bulkUploadData = null;
	if(!bulkUploadCategoryUserData)
		bulkUploadCategoryUserData = null;
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	if (bulkUploadData != null)
		this.client.addParam(kparams, "bulkUploadData", toParams(bulkUploadData));
	if (bulkUploadCategoryUserData != null)
		this.client.addParam(kparams, "bulkUploadCategoryUserData", toParams(bulkUploadCategoryUserData));
	this.client.queueServiceActionCall("categoryuser", "addFromBulkUpload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: conversionProfileAssetParams.
 * The available service actions:
 * @action	list	Lists asset parmas of conversion profile by ID
 *		 .
 * @action	update	Update asset parmas of conversion profile by ID
 *		 .
*/
function KalturaConversionProfileAssetParamsService(client){
	this.init(client);
}
KalturaConversionProfileAssetParamsService.inheritsFrom (KalturaServiceBase);
/**
 * Lists asset parmas of conversion profile by ID
 *		 .
 * @param	filter	KalturaConversionProfileAssetParamsFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaConversionProfileAssetParamsListResponse.
 */
KalturaConversionProfileAssetParamsService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("conversionprofileassetparams", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update asset parmas of conversion profile by ID
 *		 .
 * @param	conversionProfileId	int		 (optional).
 * @param	assetParamsId	int		 (optional).
 * @param	conversionProfileAssetParams	KalturaConversionProfileAssetParams		 (optional).
 * @return	KalturaConversionProfileAssetParams.
 */
KalturaConversionProfileAssetParamsService.prototype.update = function(callback, conversionProfileId, assetParamsId, conversionProfileAssetParams){
	var kparams = new Object();
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	this.client.addParam(kparams, "assetParamsId", assetParamsId);
	this.client.addParam(kparams, "conversionProfileAssetParams", toParams(conversionProfileAssetParams));
	this.client.queueServiceActionCall("conversionprofileassetparams", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: conversionProfile.
 * The available service actions:
 * @action	setAsDefault	Set Conversion Profile to be the partner default
 *		 .
 * @action	getDefault	Get the partner's default conversion profile
 *		 .
 * @action	add	Add new Conversion Profile
 *		 .
 * @action	get	Get Conversion Profile by ID
 *		 .
 * @action	update	Update Conversion Profile by ID
 *		 .
 * @action	delete	Delete Conversion Profile by ID
 *		 .
 * @action	list	List Conversion Profiles by filter with paging support
 *		 .
*/
function KalturaConversionProfileService(client){
	this.init(client);
}
KalturaConversionProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Set Conversion Profile to be the partner default
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaConversionProfile.
 */
KalturaConversionProfileService.prototype.setAsDefault = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("conversionprofile", "setAsDefault", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get the partner's default conversion profile
 *		 .
 * @param	type	string		 (optional, enum: KalturaConversionProfileType, default: null).
 * @return	KalturaConversionProfile.
 */
KalturaConversionProfileService.prototype.getDefault = function(callback, type){
	if(!type)
		type = null;
	var kparams = new Object();
	this.client.addParam(kparams, "type", type);
	this.client.queueServiceActionCall("conversionprofile", "getDefault", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add new Conversion Profile
 *		 .
 * @param	conversionProfile	KalturaConversionProfile		 (optional).
 * @return	KalturaConversionProfile.
 */
KalturaConversionProfileService.prototype.add = function(callback, conversionProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "conversionProfile", toParams(conversionProfile));
	this.client.queueServiceActionCall("conversionprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Conversion Profile by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaConversionProfile.
 */
KalturaConversionProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("conversionprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Conversion Profile by ID
 *		 .
 * @param	id	int		 (optional).
 * @param	conversionProfile	KalturaConversionProfile		 (optional).
 * @return	KalturaConversionProfile.
 */
KalturaConversionProfileService.prototype.update = function(callback, id, conversionProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "conversionProfile", toParams(conversionProfile));
	this.client.queueServiceActionCall("conversionprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Conversion Profile by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaConversionProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("conversionprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Conversion Profiles by filter with paging support
 *		 .
 * @param	filter	KalturaConversionProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaConversionProfileListResponse.
 */
KalturaConversionProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("conversionprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: data.
 * The available service actions:
 * @action	add	Adds a new data entry
 *		 .
 * @action	get	Get data entry by ID.
 *		 .
 * @action	update	Update data entry. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a data entry.
 *		 .
 * @action	list	List data entries by filter with paging support.
 *		 .
*/
function KalturaDataService(client){
	this.init(client);
}
KalturaDataService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a new data entry
 *		 .
 * @param	dataEntry	KalturaDataEntry		Data entry (optional).
 * @return	KalturaDataEntry.
 */
KalturaDataService.prototype.add = function(callback, dataEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "dataEntry", toParams(dataEntry));
	this.client.queueServiceActionCall("data", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get data entry by ID.
 *		 .
 * @param	entryId	string		Data entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaDataEntry.
 */
KalturaDataService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("data", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update data entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Data entry id to update (optional).
 * @param	documentEntry	KalturaDataEntry		Data entry metadata to update (optional).
 * @return	KalturaDataEntry.
 */
KalturaDataService.prototype.update = function(callback, entryId, documentEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.queueServiceActionCall("data", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a data entry.
 *		 .
 * @param	entryId	string		Data entry id to delete (optional).
 * @return	.
 */
KalturaDataService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("data", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List data entries by filter with paging support.
 *		 .
 * @param	filter	KalturaDataEntryFilter		Document entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaDataListResponse.
 */
KalturaDataService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("data", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: deliveryProfile.
 * The available service actions:
 * @action	add	Add new delivery.
 *		 .
 * @action	update	Update exisiting delivery
 *		 .
 * @action	get	Get delivery by id
 *		.
 * @action	clone	Add delivery based on existing delivery.
 *		Must provide valid sourceDeliveryId
 *		.
 * @action	list	Retrieve a list of available delivery depends on the filter given
 *		.
*/
function KalturaDeliveryProfileService(client){
	this.init(client);
}
KalturaDeliveryProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Add new delivery.
 *		 .
 * @param	delivery	KalturaDeliveryProfile		 (optional).
 * @return	KalturaDeliveryProfile.
 */
KalturaDeliveryProfileService.prototype.add = function(callback, delivery){
	var kparams = new Object();
	this.client.addParam(kparams, "delivery", toParams(delivery));
	this.client.queueServiceActionCall("deliveryprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update exisiting delivery
 *		 .
 * @param	id	string		 (optional).
 * @param	delivery	KalturaDeliveryProfile		 (optional).
 * @return	KalturaDeliveryProfile.
 */
KalturaDeliveryProfileService.prototype.update = function(callback, id, delivery){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "delivery", toParams(delivery));
	this.client.queueServiceActionCall("deliveryprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get delivery by id
 *		.
 * @param	id	string		 (optional).
 * @return	KalturaDeliveryProfile.
 */
KalturaDeliveryProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("deliveryprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add delivery based on existing delivery.
 *		Must provide valid sourceDeliveryId
 *		.
 * @param	deliveryId	int		 (optional).
 * @return	KalturaDeliveryProfile.
 */
KalturaDeliveryProfileService.prototype.cloneAction = function(callback, deliveryId){
	var kparams = new Object();
	this.client.addParam(kparams, "deliveryId", deliveryId);
	this.client.queueServiceActionCall("deliveryprofile", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a list of available delivery depends on the filter given
 *		.
 * @param	filter	KalturaDeliveryProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaDeliveryProfileListResponse.
 */
KalturaDeliveryProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("deliveryprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: document.
 * The available service actions:
 * @action	addFromUploadedFile	Add new document entry after the specific document file was uploaded and the upload token id exists
 *		 .
 * @action	addFromEntry	Copy entry into new entry
 *		 .
 * @action	addFromFlavorAsset	Copy flavor asset into new entry
 *		 .
 * @action	convert	Convert entry
 *		 .
 * @action	get	Get document entry by ID.
 *		 .
 * @action	update	Update document entry. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a document entry.
 *		 .
 * @action	list	List document entries by filter with paging support.
 *		 .
 * @action	upload	Upload a document file to Kaltura, then the file can be used to create a document entry. 
 *		 .
 * @action	convertPptToSwf	This will queue a batch job for converting the document file to swf
 *		 Returns the URL where the new swf will be available 
 *		 .
 * @action	updateContent	Replace content associated with the given document entry.
 *		 .
 * @action	approveReplace	Approves document replacement
 *		 .
 * @action	cancelReplace	Cancels document replacement
 *		 .
*/
function KalturaDocumentService(client){
	this.init(client);
}
KalturaDocumentService.inheritsFrom (KalturaServiceBase);
/**
 * Add new document entry after the specific document file was uploaded and the upload token id exists
 *		 .
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata (optional).
 * @param	uploadTokenId	string		Upload token id (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.addFromUploadedFile = function(callback, documentEntry, uploadTokenId){
	var kparams = new Object();
	this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.queueServiceActionCall("document", "addFromUploadedFile", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy entry into new entry
 *		 .
 * @param	sourceEntryId	string		Document entry id to copy from (optional).
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata (optional, default: null).
 * @param	sourceFlavorParamsId	int		The flavor to be used as the new entry source, source flavor will be used if not specified (optional, default: null).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.addFromEntry = function(callback, sourceEntryId, documentEntry, sourceFlavorParamsId){
	if(!documentEntry)
		documentEntry = null;
	if(!sourceFlavorParamsId)
		sourceFlavorParamsId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "sourceEntryId", sourceEntryId);
	if (documentEntry != null)
		this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.addParam(kparams, "sourceFlavorParamsId", sourceFlavorParamsId);
	this.client.queueServiceActionCall("document", "addFromEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy flavor asset into new entry
 *		 .
 * @param	sourceFlavorAssetId	string		Flavor asset id to be used as the new entry source (optional).
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata (optional, default: null).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.addFromFlavorAsset = function(callback, sourceFlavorAssetId, documentEntry){
	if(!documentEntry)
		documentEntry = null;
	var kparams = new Object();
	this.client.addParam(kparams, "sourceFlavorAssetId", sourceFlavorAssetId);
	if (documentEntry != null)
		this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.queueServiceActionCall("document", "addFromFlavorAsset", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Convert entry
 *		 .
 * @param	entryId	string		Document entry id (optional).
 * @param	conversionProfileId	int		 (optional, default: null).
 * @param	dynamicConversionAttributes	array		 (optional, default: null).
 * @return	bigint.
 */
KalturaDocumentService.prototype.convert = function(callback, entryId, conversionProfileId, dynamicConversionAttributes){
	if(!conversionProfileId)
		conversionProfileId = null;
	if(!dynamicConversionAttributes)
		dynamicConversionAttributes = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	if(dynamicConversionAttributes != null)
	for(var index in dynamicConversionAttributes)
	{
		var obj = dynamicConversionAttributes[index];
		this.client.addParam(kparams, "dynamicConversionAttributes:" + index, toParams(obj));
	}
	this.client.queueServiceActionCall("document", "convert", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get document entry by ID.
 *		 .
 * @param	entryId	string		Document entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("document", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update document entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Document entry id to update (optional).
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata to update (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.update = function(callback, entryId, documentEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.queueServiceActionCall("document", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a document entry.
 *		 .
 * @param	entryId	string		Document entry id to delete (optional).
 * @return	.
 */
KalturaDocumentService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List document entries by filter with paging support.
 *		 .
 * @param	filter	KalturaDocumentEntryFilter		Document entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaDocumentListResponse.
 */
KalturaDocumentService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("document", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Upload a document file to Kaltura, then the file can be used to create a document entry. 
 *		 .
 * @param	fileData	file		The file data (optional).
 * @return	string.
 */
KalturaDocumentService.prototype.upload = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("document", "upload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * This will queue a batch job for converting the document file to swf
 *		 Returns the URL where the new swf will be available 
 *		 .
 * @param	entryId	string		 (optional).
 * @return	string.
 */
KalturaDocumentService.prototype.convertPptToSwf = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document", "convertPptToSwf", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Replace content associated with the given document entry.
 *		 .
 * @param	entryId	string		document entry id to update (optional).
 * @param	resource	KalturaResource		Resource to be used to replace entry doc content (optional).
 * @param	conversionProfileId	int		The conversion profile id to be used on the entry (optional, default: null).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.updateContent = function(callback, entryId, resource, conversionProfileId){
	if(!conversionProfileId)
		conversionProfileId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	this.client.queueServiceActionCall("document", "updateContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Approves document replacement
 *		 .
 * @param	entryId	string		document entry id to replace (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.approveReplace = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document", "approveReplace", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Cancels document replacement
 *		 .
 * @param	entryId	string		Document entry id to cancel (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentService.prototype.cancelReplace = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document", "cancelReplace", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: EmailIngestionProfile.
 * The available service actions:
 * @action	add	EmailIngestionProfile Add action allows you to add a EmailIngestionProfile to Kaltura DB
 *		 .
 * @action	getByEmailAddress	Retrieve a EmailIngestionProfile by email address
 *		 .
 * @action	get	Retrieve a EmailIngestionProfile by id
 *		 .
 * @action	update	Update an existing EmailIngestionProfile
 *		 .
 * @action	delete	Delete an existing EmailIngestionProfile
 *		 .
 * @action	addMediaEntry	add KalturaMediaEntry from email ingestion
 *		 .
*/
function KalturaEmailIngestionProfileService(client){
	this.init(client);
}
KalturaEmailIngestionProfileService.inheritsFrom (KalturaServiceBase);
/**
 * EmailIngestionProfile Add action allows you to add a EmailIngestionProfile to Kaltura DB
 *		 .
 * @param	EmailIP	KalturaEmailIngestionProfile		Mandatory input parameter of type KalturaEmailIngestionProfile (optional).
 * @return	KalturaEmailIngestionProfile.
 */
KalturaEmailIngestionProfileService.prototype.add = function(callback, EmailIP){
	var kparams = new Object();
	this.client.addParam(kparams, "EmailIP", toParams(EmailIP));
	this.client.queueServiceActionCall("emailingestionprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a EmailIngestionProfile by email address
 *		 .
 * @param	emailAddress	string		 (optional).
 * @return	KalturaEmailIngestionProfile.
 */
KalturaEmailIngestionProfileService.prototype.getByEmailAddress = function(callback, emailAddress){
	var kparams = new Object();
	this.client.addParam(kparams, "emailAddress", emailAddress);
	this.client.queueServiceActionCall("emailingestionprofile", "getByEmailAddress", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a EmailIngestionProfile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEmailIngestionProfile.
 */
KalturaEmailIngestionProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("emailingestionprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing EmailIngestionProfile
 *		 .
 * @param	id	int		 (optional).
 * @param	EmailIP	KalturaEmailIngestionProfile		 (optional).
 * @return	KalturaEmailIngestionProfile.
 */
KalturaEmailIngestionProfileService.prototype.update = function(callback, id, EmailIP){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "EmailIP", toParams(EmailIP));
	this.client.queueServiceActionCall("emailingestionprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an existing EmailIngestionProfile
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaEmailIngestionProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("emailingestionprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * add KalturaMediaEntry from email ingestion
 *		 .
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional).
 * @param	uploadTokenId	string		Upload token id (optional).
 * @param	emailProfId	int		 (optional).
 * @param	fromAddress	string		 (optional).
 * @param	emailMsgId	string		 (optional).
 * @return	KalturaMediaEntry.
 */
KalturaEmailIngestionProfileService.prototype.addMediaEntry = function(callback, mediaEntry, uploadTokenId, emailProfId, fromAddress, emailMsgId){
	var kparams = new Object();
	this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.addParam(kparams, "emailProfId", emailProfId);
	this.client.addParam(kparams, "fromAddress", fromAddress);
	this.client.addParam(kparams, "emailMsgId", emailMsgId);
	this.client.queueServiceActionCall("emailingestionprofile", "addMediaEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: fileAsset.
 * The available service actions:
 * @action	add	Add new file asset
 *		 .
 * @action	get	Get file asset by id
 *		 .
 * @action	update	Update file asset by id
 *		 .
 * @action	delete	Delete file asset by id
 *		 .
 * @action	setContent	Set content of file asset
 *	     .
 * @action	list	List file assets by filter and pager
 *		 .
*/
function KalturaFileAssetService(client){
	this.init(client);
}
KalturaFileAssetService.inheritsFrom (KalturaServiceBase);
/**
 * Add new file asset
 *		 .
 * @param	fileAsset	KalturaFileAsset		 (optional).
 * @return	KalturaFileAsset.
 */
KalturaFileAssetService.prototype.add = function(callback, fileAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "fileAsset", toParams(fileAsset));
	this.client.queueServiceActionCall("fileasset", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get file asset by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaFileAsset.
 */
KalturaFileAssetService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("fileasset", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update file asset by id
 *		 .
 * @param	id	int		 (optional).
 * @param	fileAsset	KalturaFileAsset		 (optional).
 * @return	KalturaFileAsset.
 */
KalturaFileAssetService.prototype.update = function(callback, id, fileAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "fileAsset", toParams(fileAsset));
	this.client.queueServiceActionCall("fileasset", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete file asset by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaFileAssetService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("fileasset", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Set content of file asset
 *	     .
 * @param	id	string		 (optional).
 * @param	contentResource	KalturaContentResource		 (optional).
 * @return	KalturaFileAsset.
 */
KalturaFileAssetService.prototype.setContent = function(callback, id, contentResource){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "contentResource", toParams(contentResource));
	this.client.queueServiceActionCall("fileasset", "setContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List file assets by filter and pager
 *		 .
 * @param	filter	KalturaFileAssetFilter		 (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaFileAssetListResponse.
 */
KalturaFileAssetService.prototype.listAction = function(callback, filter, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("fileasset", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: flavorAsset.
 * The available service actions:
 * @action	add	Add flavor asset
 *	     .
 * @action	update	Update flavor asset
 *	     .
 * @action	setContent	Update content of flavor asset
 *	     .
 * @action	get	Get Flavor Asset by ID
 *		 .
 * @action	getByEntryId	Get Flavor Assets for Entry
 *		 .
 * @action	list	List Flavor Assets by filter and pager
 *		 .
 * @action	getWebPlayableByEntryId	Get web playable Flavor Assets for Entry
 *		 .
 * @action	convert	Add and convert new Flavor Asset for Entry with specific Flavor Params
 *		 .
 * @action	reconvert	Reconvert Flavor Asset by ID
 *		 .
 * @action	delete	Delete Flavor Asset by ID
 *		 .
 * @action	getUrl	Get download URL for the asset
 *		 .
 * @action	getRemotePaths	Get remote storage existing paths for the asset
 *		 .
 * @action	getDownloadUrl	Get download URL for the Flavor Asset
 *		 .
 * @action	getFlavorAssetsWithParams	Get Flavor Asset with the relevant Flavor Params (Flavor Params can exist without Flavor Asset & vice versa)
 *		 .
 * @action	export	manually export an asset
 *		 .
 * @action	setAsSource	Set a given flavor as the original flavor
 *		 .
 * @action	deleteLocalContent	delete all local file syncs for this asset
 *		 .
*/
function KalturaFlavorAssetService(client){
	this.init(client);
}
KalturaFlavorAssetService.inheritsFrom (KalturaServiceBase);
/**
 * Add flavor asset
 *	     .
 * @param	entryId	string		 (optional).
 * @param	flavorAsset	KalturaFlavorAsset		 (optional).
 * @return	KalturaFlavorAsset.
 */
KalturaFlavorAssetService.prototype.add = function(callback, entryId, flavorAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "flavorAsset", toParams(flavorAsset));
	this.client.queueServiceActionCall("flavorasset", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update flavor asset
 *	     .
 * @param	id	string		 (optional).
 * @param	flavorAsset	KalturaFlavorAsset		 (optional).
 * @return	KalturaFlavorAsset.
 */
KalturaFlavorAssetService.prototype.update = function(callback, id, flavorAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "flavorAsset", toParams(flavorAsset));
	this.client.queueServiceActionCall("flavorasset", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update content of flavor asset
 *	     .
 * @param	id	string		 (optional).
 * @param	contentResource	KalturaContentResource		 (optional).
 * @return	KalturaFlavorAsset.
 */
KalturaFlavorAssetService.prototype.setContent = function(callback, id, contentResource){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "contentResource", toParams(contentResource));
	this.client.queueServiceActionCall("flavorasset", "setContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Flavor Asset by ID
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaFlavorAsset.
 */
KalturaFlavorAssetService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorasset", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Flavor Assets for Entry
 *		 .
 * @param	entryId	string		 (optional).
 * @return	array.
 */
KalturaFlavorAssetService.prototype.getByEntryId = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("flavorasset", "getByEntryId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Flavor Assets by filter and pager
 *		 .
 * @param	filter	KalturaAssetFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaFlavorAssetListResponse.
 */
KalturaFlavorAssetService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("flavorasset", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get web playable Flavor Assets for Entry
 *		 .
 * @param	entryId	string		 (optional).
 * @return	array.
 */
KalturaFlavorAssetService.prototype.getWebPlayableByEntryId = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("flavorasset", "getWebPlayableByEntryId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add and convert new Flavor Asset for Entry with specific Flavor Params
 *		 .
 * @param	entryId	string		 (optional).
 * @param	flavorParamsId	int		 (optional).
 * @param	priority	int		 (optional).
 * @return	.
 */
KalturaFlavorAssetService.prototype.convert = function(callback, entryId, flavorParamsId, priority){
	if(!priority)
		priority = 0;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "flavorParamsId", flavorParamsId);
	this.client.addParam(kparams, "priority", priority);
	this.client.queueServiceActionCall("flavorasset", "convert", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Reconvert Flavor Asset by ID
 *		 .
 * @param	id	string		Flavor Asset ID (optional).
 * @return	.
 */
KalturaFlavorAssetService.prototype.reconvert = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorasset", "reconvert", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Flavor Asset by ID
 *		 .
 * @param	id	string		 (optional).
 * @return	.
 */
KalturaFlavorAssetService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorasset", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get download URL for the asset
 *		 .
 * @param	id	string		 (optional).
 * @param	storageId	int		 (optional, default: null).
 * @param	forceProxy	bool		 (optional, default: false).
 * @param	options	KalturaFlavorAssetUrlOptions		 (optional, default: null).
 * @return	string.
 */
KalturaFlavorAssetService.prototype.getUrl = function(callback, id, storageId, forceProxy, options){
	if(!storageId)
		storageId = null;
	if(!forceProxy)
		forceProxy = false;
	if(!options)
		options = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "storageId", storageId);
	this.client.addParam(kparams, "forceProxy", forceProxy);
	if (options != null)
		this.client.addParam(kparams, "options", toParams(options));
	this.client.queueServiceActionCall("flavorasset", "getUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get remote storage existing paths for the asset
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaRemotePathListResponse.
 */
KalturaFlavorAssetService.prototype.getRemotePaths = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorasset", "getRemotePaths", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get download URL for the Flavor Asset
 *		 .
 * @param	id	string		 (optional).
 * @param	useCdn	bool		 (optional, default: false).
 * @return	string.
 */
KalturaFlavorAssetService.prototype.getDownloadUrl = function(callback, id, useCdn){
	if(!useCdn)
		useCdn = false;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "useCdn", useCdn);
	this.client.queueServiceActionCall("flavorasset", "getDownloadUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Flavor Asset with the relevant Flavor Params (Flavor Params can exist without Flavor Asset & vice versa)
 *		 .
 * @param	entryId	string		 (optional).
 * @return	array.
 */
KalturaFlavorAssetService.prototype.getFlavorAssetsWithParams = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("flavorasset", "getFlavorAssetsWithParams", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * manually export an asset
 *		 .
 * @param	assetId	string		 (optional).
 * @param	storageProfileId	int		 (optional).
 * @return	KalturaFlavorAsset.
 */
KalturaFlavorAssetService.prototype.exportAction = function(callback, assetId, storageProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "assetId", assetId);
	this.client.addParam(kparams, "storageProfileId", storageProfileId);
	this.client.queueServiceActionCall("flavorasset", "export", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Set a given flavor as the original flavor
 *		 .
 * @param	assetId	string		 (optional).
 * @return	.
 */
KalturaFlavorAssetService.prototype.setAsSource = function(callback, assetId){
	var kparams = new Object();
	this.client.addParam(kparams, "assetId", assetId);
	this.client.queueServiceActionCall("flavorasset", "setAsSource", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * delete all local file syncs for this asset
 *		 .
 * @param	assetId	string		 (optional).
 * @return	.
 */
KalturaFlavorAssetService.prototype.deleteLocalContent = function(callback, assetId){
	var kparams = new Object();
	this.client.addParam(kparams, "assetId", assetId);
	this.client.queueServiceActionCall("flavorasset", "deleteLocalContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: flavorParamsOutput.
 * The available service actions:
 * @action	get	Get flavor params output object by ID
 *		 .
 * @action	list	List flavor params output objects by filter and pager
 *		 .
*/
function KalturaFlavorParamsOutputService(client){
	this.init(client);
}
KalturaFlavorParamsOutputService.inheritsFrom (KalturaServiceBase);
/**
 * Get flavor params output object by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaFlavorParamsOutput.
 */
KalturaFlavorParamsOutputService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorparamsoutput", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List flavor params output objects by filter and pager
 *		 .
 * @param	filter	KalturaFlavorParamsOutputFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaFlavorParamsOutputListResponse.
 */
KalturaFlavorParamsOutputService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("flavorparamsoutput", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: flavorParams.
 * The available service actions:
 * @action	add	Add new Flavor Params
 *		 .
 * @action	get	Get Flavor Params by ID
 *		 .
 * @action	update	Update Flavor Params by ID
 *		 .
 * @action	delete	Delete Flavor Params by ID
 *		 .
 * @action	list	List Flavor Params by filter with paging support (By default - all system default params will be listed too)
 *		 .
 * @action	getByConversionProfileId	Get Flavor Params by Conversion Profile ID
 *		 .
*/
function KalturaFlavorParamsService(client){
	this.init(client);
}
KalturaFlavorParamsService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Flavor Params
 *		 .
 * @param	flavorParams	KalturaFlavorParams		 (optional).
 * @return	KalturaFlavorParams.
 */
KalturaFlavorParamsService.prototype.add = function(callback, flavorParams){
	var kparams = new Object();
	this.client.addParam(kparams, "flavorParams", toParams(flavorParams));
	this.client.queueServiceActionCall("flavorparams", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Flavor Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaFlavorParams.
 */
KalturaFlavorParamsService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorparams", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Flavor Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @param	flavorParams	KalturaFlavorParams		 (optional).
 * @return	KalturaFlavorParams.
 */
KalturaFlavorParamsService.prototype.update = function(callback, id, flavorParams){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "flavorParams", toParams(flavorParams));
	this.client.queueServiceActionCall("flavorparams", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Flavor Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaFlavorParamsService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("flavorparams", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Flavor Params by filter with paging support (By default - all system default params will be listed too)
 *		 .
 * @param	filter	KalturaFlavorParamsFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaFlavorParamsListResponse.
 */
KalturaFlavorParamsService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("flavorparams", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Flavor Params by Conversion Profile ID
 *		 .
 * @param	conversionProfileId	int		 (optional).
 * @return	array.
 */
KalturaFlavorParamsService.prototype.getByConversionProfileId = function(callback, conversionProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	this.client.queueServiceActionCall("flavorparams", "getByConversionProfileId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: groupUser.
 * The available service actions:
 * @action	add	Add new GroupUser
 *		 .
 * @action	delete	delete by userId and groupId
 *		 .
 * @action	list	List all GroupUsers
 *		 .
*/
function KalturaGroupUserService(client){
	this.init(client);
}
KalturaGroupUserService.inheritsFrom (KalturaServiceBase);
/**
 * Add new GroupUser
 *		 .
 * @param	groupUser	KalturaGroupUser		 (optional).
 * @return	KalturaGroupUser.
 */
KalturaGroupUserService.prototype.add = function(callback, groupUser){
	var kparams = new Object();
	this.client.addParam(kparams, "groupUser", toParams(groupUser));
	this.client.queueServiceActionCall("groupuser", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * delete by userId and groupId
 *		 .
 * @param	userId	string		 (optional).
 * @param	groupId	string		 (optional).
 * @return	.
 */
KalturaGroupUserService.prototype.deleteAction = function(callback, userId, groupId){
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "groupId", groupId);
	this.client.queueServiceActionCall("groupuser", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all GroupUsers
 *		 .
 * @param	filter	KalturaGroupUserFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaGroupUserListResponse.
 */
KalturaGroupUserService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("groupuser", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: liveChannelSegment.
 * The available service actions:
 * @action	add	Add new live channel segment
 *		 .
 * @action	get	Get live channel segment by id
 *		 .
 * @action	update	Update live channel segment by id
 *		 .
 * @action	delete	Delete live channel segment by id
 *		 .
 * @action	list	List live channel segments by filter and pager
 *		 .
*/
function KalturaLiveChannelSegmentService(client){
	this.init(client);
}
KalturaLiveChannelSegmentService.inheritsFrom (KalturaServiceBase);
/**
 * Add new live channel segment
 *		 .
 * @param	liveChannelSegment	KalturaLiveChannelSegment		 (optional).
 * @return	KalturaLiveChannelSegment.
 */
KalturaLiveChannelSegmentService.prototype.add = function(callback, liveChannelSegment){
	var kparams = new Object();
	this.client.addParam(kparams, "liveChannelSegment", toParams(liveChannelSegment));
	this.client.queueServiceActionCall("livechannelsegment", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get live channel segment by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaLiveChannelSegment.
 */
KalturaLiveChannelSegmentService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("livechannelsegment", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update live channel segment by id
 *		 .
 * @param	id	int		 (optional).
 * @param	liveChannelSegment	KalturaLiveChannelSegment		 (optional).
 * @return	KalturaLiveChannelSegment.
 */
KalturaLiveChannelSegmentService.prototype.update = function(callback, id, liveChannelSegment){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "liveChannelSegment", toParams(liveChannelSegment));
	this.client.queueServiceActionCall("livechannelsegment", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete live channel segment by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaLiveChannelSegmentService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("livechannelsegment", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List live channel segments by filter and pager
 *		 .
 * @param	filter	KalturaLiveChannelSegmentFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaLiveChannelSegmentListResponse.
 */
KalturaLiveChannelSegmentService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("livechannelsegment", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: liveChannel.
 * The available service actions:
 * @action	add	Adds new live channel.
 *		 .
 * @action	get	Get live channel by ID.
 *		 .
 * @action	update	Update live channel. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a live channel.
 *		 .
 * @action	list	List live channels by filter with paging support.
 *		 .
 * @action	isLive	Delivering the status of a live channel (on-air/offline)
 *		 .
 * @action	appendRecording	Append recorded video to live entry
 *		 .
 * @action	registerMediaServer	Register media server to live entry
 *		 .
 * @action	unregisterMediaServer	Unregister media server from live entry
 *		 .
 * @action	validateRegisteredMediaServers	Validates all registered media servers
 *		 .
*/
function KalturaLiveChannelService(client){
	this.init(client);
}
KalturaLiveChannelService.inheritsFrom (KalturaServiceBase);
/**
 * Adds new live channel.
 *		 .
 * @param	liveChannel	KalturaLiveChannel		Live channel metadata   (optional).
 * @return	KalturaLiveChannel.
 */
KalturaLiveChannelService.prototype.add = function(callback, liveChannel){
	var kparams = new Object();
	this.client.addParam(kparams, "liveChannel", toParams(liveChannel));
	this.client.queueServiceActionCall("livechannel", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get live channel by ID.
 *		 .
 * @param	id	string		Live channel id (optional).
 * @return	KalturaLiveChannel.
 */
KalturaLiveChannelService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("livechannel", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update live channel. Only the properties that were set will be updated.
 *		 .
 * @param	id	string		Live channel id to update (optional).
 * @param	liveChannel	KalturaLiveChannel		Live channel metadata to update (optional).
 * @return	KalturaLiveChannel.
 */
KalturaLiveChannelService.prototype.update = function(callback, id, liveChannel){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "liveChannel", toParams(liveChannel));
	this.client.queueServiceActionCall("livechannel", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a live channel.
 *		 .
 * @param	id	string		Live channel id to delete (optional).
 * @return	.
 */
KalturaLiveChannelService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("livechannel", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List live channels by filter with paging support.
 *		 .
 * @param	filter	KalturaLiveChannelFilter		live channel filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaLiveChannelListResponse.
 */
KalturaLiveChannelService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("livechannel", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delivering the status of a live channel (on-air/offline)
 *		 .
 * @param	id	string		ID of the live channel (optional).
 * @return	bool.
 */
KalturaLiveChannelService.prototype.isLive = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("livechannel", "isLive", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Append recorded video to live entry
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @param	assetId	string		Live asset id (optional).
 * @param	mediaServerIndex	int		 (optional, enum: KalturaMediaServerIndex).
 * @param	resource	KalturaDataCenterContentResource		 (optional).
 * @param	duration	float		in seconds (optional).
 * @param	isLastChunk	bool		Is this the last recorded chunk in the current session (i.e. following a stream stop event) (optional, default: false).
 * @return	KalturaLiveEntry.
 */
KalturaLiveChannelService.prototype.appendRecording = function(callback, entryId, assetId, mediaServerIndex, resource, duration, isLastChunk){
	if(!isLastChunk)
		isLastChunk = false;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "assetId", assetId);
	this.client.addParam(kparams, "mediaServerIndex", mediaServerIndex);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.addParam(kparams, "duration", duration);
	this.client.addParam(kparams, "isLastChunk", isLastChunk);
	this.client.queueServiceActionCall("livechannel", "appendRecording", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Register media server to live entry
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @param	hostname	string		Media server host name (optional).
 * @param	mediaServerIndex	int		Media server index primary / secondary (optional, enum: KalturaMediaServerIndex).
 * @param	applicationName	string		the application to which entry is being broadcast (optional, default: null).
 * @param	liveEntryStatus	int		the new status KalturaLiveEntryStatus::PLAYABLE | KalturaLiveEntryStatus::BROADCASTING (optional, enum: KalturaLiveEntryStatus, default: 1).
 * @return	KalturaLiveEntry.
 */
KalturaLiveChannelService.prototype.registerMediaServer = function(callback, entryId, hostname, mediaServerIndex, applicationName, liveEntryStatus){
	if(!applicationName)
		applicationName = null;
	if(!liveEntryStatus)
		liveEntryStatus = 1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "hostname", hostname);
	this.client.addParam(kparams, "mediaServerIndex", mediaServerIndex);
	this.client.addParam(kparams, "applicationName", applicationName);
	this.client.addParam(kparams, "liveEntryStatus", liveEntryStatus);
	this.client.queueServiceActionCall("livechannel", "registerMediaServer", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Unregister media server from live entry
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @param	hostname	string		Media server host name (optional).
 * @param	mediaServerIndex	int		Media server index primary / secondary (optional, enum: KalturaMediaServerIndex).
 * @return	KalturaLiveEntry.
 */
KalturaLiveChannelService.prototype.unregisterMediaServer = function(callback, entryId, hostname, mediaServerIndex){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "hostname", hostname);
	this.client.addParam(kparams, "mediaServerIndex", mediaServerIndex);
	this.client.queueServiceActionCall("livechannel", "unregisterMediaServer", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Validates all registered media servers
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @return	.
 */
KalturaLiveChannelService.prototype.validateRegisteredMediaServers = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("livechannel", "validateRegisteredMediaServers", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: liveReports.
 * The available service actions:
 * @action	getEvents	.
 * @action	getReport	.
 * @action	exportToCsv	.
 * @action	serveReport	Will serve a requested report
 *		 .
*/
function KalturaLiveReportsService(client){
	this.init(client);
}
KalturaLiveReportsService.inheritsFrom (KalturaServiceBase);
/**
 * .
 * @param	reportType	string		 (optional, enum: KalturaLiveReportType).
 * @param	filter	KalturaLiveReportInputFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	array.
 */
KalturaLiveReportsService.prototype.getEvents = function(callback, reportType, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("livereports", "getEvents", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	reportType	string		 (optional, enum: KalturaLiveReportType).
 * @param	filter	KalturaLiveReportInputFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaLiveStatsListResponse.
 */
KalturaLiveReportsService.prototype.getReport = function(callback, reportType, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("livereports", "getReport", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	reportType	int		 (optional, enum: KalturaLiveReportExportType).
 * @param	params	KalturaLiveReportExportParams		 (optional).
 * @return	KalturaLiveReportExportResponse.
 */
KalturaLiveReportsService.prototype.exportToCsv = function(callback, reportType, params){
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	this.client.addParam(kparams, "params", toParams(params));
	this.client.queueServiceActionCall("livereports", "exportToCsv", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Will serve a requested report
 *		 .
 * @param	id	string		- the requested id (optional).
 * @return	string.
 */
KalturaLiveReportsService.prototype.serveReport = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("livereports", "serveReport", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: liveStats.
 * The available service actions:
 * @action	collect	Will write to the event log a single line representing the event
 *		 KalturaStatsEvent $event
 *		 .
*/
function KalturaLiveStatsService(client){
	this.init(client);
}
KalturaLiveStatsService.inheritsFrom (KalturaServiceBase);
/**
 * Will write to the event log a single line representing the event
 *		 KalturaStatsEvent $event
 *		 .
 * @param	event	KalturaLiveStatsEvent		 (optional).
 * @return	bool.
 */
KalturaLiveStatsService.prototype.collect = function(callback, event){
	var kparams = new Object();
	this.client.addParam(kparams, "event", toParams(event));
	this.client.queueServiceActionCall("livestats", "collect", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: liveStream.
 * The available service actions:
 * @action	add	Adds new live stream entry.
 *		 The entry will be queued for provision.
 *		 .
 * @action	get	Get live stream entry by ID.
 *		 .
 * @action	authenticate	Authenticate live-stream entry against stream token and partner limitations
 *		 .
 * @action	update	Update live stream entry. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a live stream entry.
 *		 .
 * @action	list	List live stream entries by filter with paging support.
 *		 .
 * @action	updateOfflineThumbnailJpeg	Update live stream entry thumbnail using a raw jpeg file
 *		 .
 * @action	updateOfflineThumbnailFromUrl	Update entry thumbnail using url
 *		 .
 * @action	isLive	Delivering the status of a live stream (on-air/offline) if it is possible
 *		 .
 * @action	addLiveStreamPushPublishConfiguration	Add new pushPublish configuration to entry
 *		 .
 * @action	removeLiveStreamPushPublishConfiguration	Remove push publish configuration from entry
 *		 .
 * @action	appendRecording	Append recorded video to live entry
 *		 .
 * @action	registerMediaServer	Register media server to live entry
 *		 .
 * @action	unregisterMediaServer	Unregister media server from live entry
 *		 .
 * @action	validateRegisteredMediaServers	Validates all registered media servers
 *		 .
 * @action	createPeriodicSyncPoints	Creates perioding metadata sync-point events on a live stream
 *		 .
*/
function KalturaLiveStreamService(client){
	this.init(client);
}
KalturaLiveStreamService.inheritsFrom (KalturaServiceBase);
/**
 * Adds new live stream entry.
 *		 The entry will be queued for provision.
 *		 .
 * @param	liveStreamEntry	KalturaLiveStreamEntry		Live stream entry metadata   (optional).
 * @param	sourceType	string		 Live stream source type (optional, enum: KalturaSourceType, default: null).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.add = function(callback, liveStreamEntry, sourceType){
	if(!sourceType)
		sourceType = null;
	var kparams = new Object();
	this.client.addParam(kparams, "liveStreamEntry", toParams(liveStreamEntry));
	this.client.addParam(kparams, "sourceType", sourceType);
	this.client.queueServiceActionCall("livestream", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get live stream entry by ID.
 *		 .
 * @param	entryId	string		Live stream entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("livestream", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Authenticate live-stream entry against stream token and partner limitations
 *		 .
 * @param	entryId	string		Live stream entry id (optional).
 * @param	token	string		Live stream broadcasting token (optional).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.authenticate = function(callback, entryId, token){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "token", token);
	this.client.queueServiceActionCall("livestream", "authenticate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update live stream entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Live stream entry id to update (optional).
 * @param	liveStreamEntry	KalturaLiveStreamEntry		Live stream entry metadata to update (optional).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.update = function(callback, entryId, liveStreamEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "liveStreamEntry", toParams(liveStreamEntry));
	this.client.queueServiceActionCall("livestream", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a live stream entry.
 *		 .
 * @param	entryId	string		Live stream entry id to delete (optional).
 * @return	.
 */
KalturaLiveStreamService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("livestream", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List live stream entries by filter with paging support.
 *		 .
 * @param	filter	KalturaLiveStreamEntryFilter		live stream entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaLiveStreamListResponse.
 */
KalturaLiveStreamService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("livestream", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update live stream entry thumbnail using a raw jpeg file
 *		 .
 * @param	entryId	string		live stream entry id (optional).
 * @param	fileData	file		Jpeg file data (optional).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.updateOfflineThumbnailJpeg = function(callback, entryId, fileData){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("livestream", "updateOfflineThumbnailJpeg", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update entry thumbnail using url
 *		 .
 * @param	entryId	string		live stream entry id (optional).
 * @param	url	string		file url (optional).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.updateOfflineThumbnailFromUrl = function(callback, entryId, url){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("livestream", "updateOfflineThumbnailFromUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delivering the status of a live stream (on-air/offline) if it is possible
 *		 .
 * @param	id	string		ID of the live stream (optional).
 * @param	protocol	string		protocol of the stream to test. (optional, enum: KalturaPlaybackProtocol).
 * @return	bool.
 */
KalturaLiveStreamService.prototype.isLive = function(callback, id, protocol){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "protocol", protocol);
	this.client.queueServiceActionCall("livestream", "isLive", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add new pushPublish configuration to entry
 *		 .
 * @param	entryId	string		 (optional).
 * @param	protocol	string		 (optional, enum: KalturaPlaybackProtocol).
 * @param	url	string		 (optional, default: null).
 * @param	liveStreamConfiguration	KalturaLiveStreamConfiguration		 (optional, default: null).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.addLiveStreamPushPublishConfiguration = function(callback, entryId, protocol, url, liveStreamConfiguration){
	if(!url)
		url = null;
	if(!liveStreamConfiguration)
		liveStreamConfiguration = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "protocol", protocol);
	this.client.addParam(kparams, "url", url);
	if (liveStreamConfiguration != null)
		this.client.addParam(kparams, "liveStreamConfiguration", toParams(liveStreamConfiguration));
	this.client.queueServiceActionCall("livestream", "addLiveStreamPushPublishConfiguration", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Remove push publish configuration from entry
 *		 .
 * @param	entryId	string		 (optional).
 * @param	protocol	string		 (optional, enum: KalturaPlaybackProtocol).
 * @return	KalturaLiveStreamEntry.
 */
KalturaLiveStreamService.prototype.removeLiveStreamPushPublishConfiguration = function(callback, entryId, protocol){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "protocol", protocol);
	this.client.queueServiceActionCall("livestream", "removeLiveStreamPushPublishConfiguration", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Append recorded video to live entry
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @param	assetId	string		Live asset id (optional).
 * @param	mediaServerIndex	int		 (optional, enum: KalturaMediaServerIndex).
 * @param	resource	KalturaDataCenterContentResource		 (optional).
 * @param	duration	float		in seconds (optional).
 * @param	isLastChunk	bool		Is this the last recorded chunk in the current session (i.e. following a stream stop event) (optional, default: false).
 * @return	KalturaLiveEntry.
 */
KalturaLiveStreamService.prototype.appendRecording = function(callback, entryId, assetId, mediaServerIndex, resource, duration, isLastChunk){
	if(!isLastChunk)
		isLastChunk = false;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "assetId", assetId);
	this.client.addParam(kparams, "mediaServerIndex", mediaServerIndex);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.addParam(kparams, "duration", duration);
	this.client.addParam(kparams, "isLastChunk", isLastChunk);
	this.client.queueServiceActionCall("livestream", "appendRecording", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Register media server to live entry
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @param	hostname	string		Media server host name (optional).
 * @param	mediaServerIndex	int		Media server index primary / secondary (optional, enum: KalturaMediaServerIndex).
 * @param	applicationName	string		the application to which entry is being broadcast (optional, default: null).
 * @param	liveEntryStatus	int		the new status KalturaLiveEntryStatus::PLAYABLE | KalturaLiveEntryStatus::BROADCASTING (optional, enum: KalturaLiveEntryStatus, default: 1).
 * @return	KalturaLiveEntry.
 */
KalturaLiveStreamService.prototype.registerMediaServer = function(callback, entryId, hostname, mediaServerIndex, applicationName, liveEntryStatus){
	if(!applicationName)
		applicationName = null;
	if(!liveEntryStatus)
		liveEntryStatus = 1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "hostname", hostname);
	this.client.addParam(kparams, "mediaServerIndex", mediaServerIndex);
	this.client.addParam(kparams, "applicationName", applicationName);
	this.client.addParam(kparams, "liveEntryStatus", liveEntryStatus);
	this.client.queueServiceActionCall("livestream", "registerMediaServer", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Unregister media server from live entry
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @param	hostname	string		Media server host name (optional).
 * @param	mediaServerIndex	int		Media server index primary / secondary (optional, enum: KalturaMediaServerIndex).
 * @return	KalturaLiveEntry.
 */
KalturaLiveStreamService.prototype.unregisterMediaServer = function(callback, entryId, hostname, mediaServerIndex){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "hostname", hostname);
	this.client.addParam(kparams, "mediaServerIndex", mediaServerIndex);
	this.client.queueServiceActionCall("livestream", "unregisterMediaServer", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Validates all registered media servers
 *		 .
 * @param	entryId	string		Live entry id (optional).
 * @return	.
 */
KalturaLiveStreamService.prototype.validateRegisteredMediaServers = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("livestream", "validateRegisteredMediaServers", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Creates perioding metadata sync-point events on a live stream
 *		 .
 * @param	entryId	string		Kaltura live-stream entry id (optional).
 * @param	interval	int		Events interval in seconds  (optional).
 * @param	duration	int		Duration in seconds (optional).
 * @return	.
 */
KalturaLiveStreamService.prototype.createPeriodicSyncPoints = function(callback, entryId, interval, duration){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "interval", interval);
	this.client.addParam(kparams, "duration", duration);
	this.client.queueServiceActionCall("livestream", "createPeriodicSyncPoints", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: mediaInfo.
 * The available service actions:
 * @action	list	List media info objects by filter and pager
 *		 .
*/
function KalturaMediaInfoService(client){
	this.init(client);
}
KalturaMediaInfoService.inheritsFrom (KalturaServiceBase);
/**
 * List media info objects by filter and pager
 *		 .
 * @param	filter	KalturaMediaInfoFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaMediaInfoListResponse.
 */
KalturaMediaInfoService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("mediainfo", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: media.
 * The available service actions:
 * @action	add	Add entry
 *	     .
 * @action	addContent	Add content to media entry which is not yet associated with content (therefore is in status NO_CONTENT).
 *	     If the requirement is to replace the entry's associated content, use action updateContent.
 *	     .
 * @action	addFromUrl	Adds new media entry by importing an HTTP or FTP URL.
 *		 The entry will be queued for import and then for conversion.
 *		 .
 * @action	addFromSearchResult	Adds new media entry by importing the media file from a search provider.
 *		 This action should be used with the search service result.
 *		 .
 * @action	addFromUploadedFile	Add new entry after the specific media file was uploaded and the upload token id exists
 *		 .
 * @action	addFromRecordedWebcam	Add new entry after the file was recored on the server and the token id exists
 *		 .
 * @action	addFromEntry	Copy entry into new entry
 *		 .
 * @action	addFromFlavorAsset	Copy flavor asset into new entry
 *		 .
 * @action	convert	Convert entry
 *		 .
 * @action	get	Get media entry by ID.
 *		 .
 * @action	getMrss	Get MRSS by entry id
 *	     XML will return as an escaped string
 *	     .
 * @action	update	Update media entry. Only the properties that were set will be updated.
 *		 .
 * @action	updateContent	Replace content associated with the media entry.
 *		 .
 * @action	delete	Delete a media entry.
 *		 .
 * @action	approveReplace	Approves media replacement
 *		 .
 * @action	cancelReplace	Cancels media replacement
 *		 .
 * @action	list	List media entries by filter with paging support.
 *		 .
 * @action	count	Count media entries by filter.
 *		 .
 * @action	upload	Upload a media file to Kaltura, then the file can be used to create a media entry.
 *		 .
 * @action	updateThumbnail	Update media entry thumbnail by a specified time offset (In seconds)
 *		 If flavor params id not specified, source flavor will be used by default
 *		 .
 * @action	updateThumbnailFromSourceEntry	Update media entry thumbnail from a different entry by a specified time offset (In seconds)
 *		 If flavor params id not specified, source flavor will be used by default
 *		 .
 * @action	updateThumbnailJpeg	Update media entry thumbnail using a raw jpeg file
 *		 .
 * @action	updateThumbnailFromUrl	Update entry thumbnail using url
 *		 .
 * @action	requestConversion	Request a new conversion job, this can be used to convert the media entry to a different format
 *		 .
 * @action	flag	Flag inappropriate media entry for moderation
 *		 .
 * @action	reject	Reject the media entry and mark the pending flags (if any) as moderated (this will make the entry non playable)
 *		 .
 * @action	approve	Approve the media entry and mark the pending flags (if any) as moderated (this will make the entry playable)
 *		 .
 * @action	listFlags	List all pending flags for the media entry
 *		 .
 * @action	anonymousRank	Anonymously rank a media entry, no validation is done on duplicate rankings
 *		 .
 * @action	bulkUploadAdd	Add new bulk upload batch job
 *		 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
 *		 If no conversion profile was specified, partner's default will be used
 *		 .
*/
function KalturaMediaService(client){
	this.init(client);
}
KalturaMediaService.inheritsFrom (KalturaServiceBase);
/**
 * Add entry
 *	     .
 * @param	entry	KalturaMediaEntry		 (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.add = function(callback, entry){
	var kparams = new Object();
	this.client.addParam(kparams, "entry", toParams(entry));
	this.client.queueServiceActionCall("media", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add content to media entry which is not yet associated with content (therefore is in status NO_CONTENT).
 *	     If the requirement is to replace the entry's associated content, use action updateContent.
 *	     .
 * @param	entryId	string		 (optional).
 * @param	resource	KalturaResource		 (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addContent = function(callback, entryId, resource){
	if(!resource)
		resource = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	if (resource != null)
		this.client.addParam(kparams, "resource", toParams(resource));
	this.client.queueServiceActionCall("media", "addContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Adds new media entry by importing an HTTP or FTP URL.
 *		 The entry will be queued for import and then for conversion.
 *		 .
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional).
 * @param	url	string		An HTTP or FTP URL (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addFromUrl = function(callback, mediaEntry, url){
	var kparams = new Object();
	this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("media", "addFromUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Adds new media entry by importing the media file from a search provider.
 *		 This action should be used with the search service result.
 *		 .
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional, default: null).
 * @param	searchResult	KalturaSearchResult		Result object from search service (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addFromSearchResult = function(callback, mediaEntry, searchResult){
	if(!mediaEntry)
		mediaEntry = null;
	if(!searchResult)
		searchResult = null;
	var kparams = new Object();
	if (mediaEntry != null)
		this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	if (searchResult != null)
		this.client.addParam(kparams, "searchResult", toParams(searchResult));
	this.client.queueServiceActionCall("media", "addFromSearchResult", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add new entry after the specific media file was uploaded and the upload token id exists
 *		 .
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional).
 * @param	uploadTokenId	string		Upload token id (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addFromUploadedFile = function(callback, mediaEntry, uploadTokenId){
	var kparams = new Object();
	this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.queueServiceActionCall("media", "addFromUploadedFile", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add new entry after the file was recored on the server and the token id exists
 *		 .
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional).
 * @param	webcamTokenId	string		Token id for the recored webcam file (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addFromRecordedWebcam = function(callback, mediaEntry, webcamTokenId){
	var kparams = new Object();
	this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.addParam(kparams, "webcamTokenId", webcamTokenId);
	this.client.queueServiceActionCall("media", "addFromRecordedWebcam", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy entry into new entry
 *		 .
 * @param	sourceEntryId	string		Media entry id to copy from (optional).
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional, default: null).
 * @param	sourceFlavorParamsId	int		The flavor to be used as the new entry source, source flavor will be used if not specified (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addFromEntry = function(callback, sourceEntryId, mediaEntry, sourceFlavorParamsId){
	if(!mediaEntry)
		mediaEntry = null;
	if(!sourceFlavorParamsId)
		sourceFlavorParamsId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "sourceEntryId", sourceEntryId);
	if (mediaEntry != null)
		this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.addParam(kparams, "sourceFlavorParamsId", sourceFlavorParamsId);
	this.client.queueServiceActionCall("media", "addFromEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy flavor asset into new entry
 *		 .
 * @param	sourceFlavorAssetId	string		Flavor asset id to be used as the new entry source (optional).
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.addFromFlavorAsset = function(callback, sourceFlavorAssetId, mediaEntry){
	if(!mediaEntry)
		mediaEntry = null;
	var kparams = new Object();
	this.client.addParam(kparams, "sourceFlavorAssetId", sourceFlavorAssetId);
	if (mediaEntry != null)
		this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.queueServiceActionCall("media", "addFromFlavorAsset", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Convert entry
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	conversionProfileId	int		 (optional, default: null).
 * @param	dynamicConversionAttributes	array		 (optional, default: null).
 * @return	bigint.
 */
KalturaMediaService.prototype.convert = function(callback, entryId, conversionProfileId, dynamicConversionAttributes){
	if(!conversionProfileId)
		conversionProfileId = null;
	if(!dynamicConversionAttributes)
		dynamicConversionAttributes = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	if(dynamicConversionAttributes != null)
	for(var index in dynamicConversionAttributes)
	{
		var obj = dynamicConversionAttributes[index];
		this.client.addParam(kparams, "dynamicConversionAttributes:" + index, toParams(obj));
	}
	this.client.queueServiceActionCall("media", "convert", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get media entry by ID.
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("media", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get MRSS by entry id
 *	     XML will return as an escaped string
 *	     .
 * @param	entryId	string		Entry id (optional).
 * @param	extendingItemsArray	array		 (optional, default: null).
 * @param	features	string		 (optional, default: null).
 * @return	string.
 */
KalturaMediaService.prototype.getMrss = function(callback, entryId, extendingItemsArray, features){
	if(!extendingItemsArray)
		extendingItemsArray = null;
	if(!features)
		features = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	if(extendingItemsArray != null)
	for(var index in extendingItemsArray)
	{
		var obj = extendingItemsArray[index];
		this.client.addParam(kparams, "extendingItemsArray:" + index, toParams(obj));
	}
	this.client.addParam(kparams, "features", features);
	this.client.queueServiceActionCall("media", "getMrss", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update media entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Media entry id to update (optional).
 * @param	mediaEntry	KalturaMediaEntry		Media entry metadata to update (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.update = function(callback, entryId, mediaEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "mediaEntry", toParams(mediaEntry));
	this.client.queueServiceActionCall("media", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Replace content associated with the media entry.
 *		 .
 * @param	entryId	string		Media entry id to update (optional).
 * @param	resource	KalturaResource		Resource to be used to replace entry media content (optional).
 * @param	conversionProfileId	int		The conversion profile id to be used on the entry (optional, default: null).
 * @param	advancedOptions	KalturaEntryReplacementOptions		Additional update content options (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.updateContent = function(callback, entryId, resource, conversionProfileId, advancedOptions){
	if(!conversionProfileId)
		conversionProfileId = null;
	if(!advancedOptions)
		advancedOptions = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	if (advancedOptions != null)
		this.client.addParam(kparams, "advancedOptions", toParams(advancedOptions));
	this.client.queueServiceActionCall("media", "updateContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a media entry.
 *		 .
 * @param	entryId	string		Media entry id to delete (optional).
 * @return	.
 */
KalturaMediaService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("media", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Approves media replacement
 *		 .
 * @param	entryId	string		Media entry id to replace (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.approveReplace = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("media", "approveReplace", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Cancels media replacement
 *		 .
 * @param	entryId	string		Media entry id to cancel (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.cancelReplace = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("media", "cancelReplace", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List media entries by filter with paging support.
 *		 .
 * @param	filter	KalturaMediaEntryFilter		Media entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaMediaListResponse.
 */
KalturaMediaService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("media", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Count media entries by filter.
 *		 .
 * @param	filter	KalturaMediaEntryFilter		Media entry filter (optional, default: null).
 * @return	int.
 */
KalturaMediaService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("media", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Upload a media file to Kaltura, then the file can be used to create a media entry.
 *		 .
 * @param	fileData	file		The file data (optional).
 * @return	string.
 */
KalturaMediaService.prototype.upload = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("media", "upload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update media entry thumbnail by a specified time offset (In seconds)
 *		 If flavor params id not specified, source flavor will be used by default
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	timeOffset	int		Time offset (in seconds) (optional).
 * @param	flavorParamsId	int		The flavor params id to be used (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.updateThumbnail = function(callback, entryId, timeOffset, flavorParamsId){
	if(!flavorParamsId)
		flavorParamsId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "timeOffset", timeOffset);
	this.client.addParam(kparams, "flavorParamsId", flavorParamsId);
	this.client.queueServiceActionCall("media", "updateThumbnail", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update media entry thumbnail from a different entry by a specified time offset (In seconds)
 *		 If flavor params id not specified, source flavor will be used by default
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	sourceEntryId	string		Media entry id (optional).
 * @param	timeOffset	int		Time offset (in seconds) (optional).
 * @param	flavorParamsId	int		The flavor params id to be used (optional, default: null).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.updateThumbnailFromSourceEntry = function(callback, entryId, sourceEntryId, timeOffset, flavorParamsId){
	if(!flavorParamsId)
		flavorParamsId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "sourceEntryId", sourceEntryId);
	this.client.addParam(kparams, "timeOffset", timeOffset);
	this.client.addParam(kparams, "flavorParamsId", flavorParamsId);
	this.client.queueServiceActionCall("media", "updateThumbnailFromSourceEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update media entry thumbnail using a raw jpeg file
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	fileData	file		Jpeg file data (optional).
 * @return	KalturaMediaEntry.
 */
KalturaMediaService.prototype.updateThumbnailJpeg = function(callback, entryId, fileData){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("media", "updateThumbnailJpeg", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update entry thumbnail using url
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	url	string		file url (optional).
 * @return	KalturaBaseEntry.
 */
KalturaMediaService.prototype.updateThumbnailFromUrl = function(callback, entryId, url){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("media", "updateThumbnailFromUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Request a new conversion job, this can be used to convert the media entry to a different format
 *		 .
 * @param	entryId	string		Media entry id (optional).
 * @param	fileFormat	string		Format to convert (optional).
 * @return	int.
 */
KalturaMediaService.prototype.requestConversion = function(callback, entryId, fileFormat){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "fileFormat", fileFormat);
	this.client.queueServiceActionCall("media", "requestConversion", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Flag inappropriate media entry for moderation
 *		 .
 * @param	moderationFlag	KalturaModerationFlag		 (optional).
 * @return	.
 */
KalturaMediaService.prototype.flag = function(callback, moderationFlag){
	var kparams = new Object();
	this.client.addParam(kparams, "moderationFlag", toParams(moderationFlag));
	this.client.queueServiceActionCall("media", "flag", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Reject the media entry and mark the pending flags (if any) as moderated (this will make the entry non playable)
 *		 .
 * @param	entryId	string		 (optional).
 * @return	.
 */
KalturaMediaService.prototype.reject = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("media", "reject", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Approve the media entry and mark the pending flags (if any) as moderated (this will make the entry playable)
 *		 .
 * @param	entryId	string		 (optional).
 * @return	.
 */
KalturaMediaService.prototype.approve = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("media", "approve", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all pending flags for the media entry
 *		 .
 * @param	entryId	string		 (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaModerationFlagListResponse.
 */
KalturaMediaService.prototype.listFlags = function(callback, entryId, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("media", "listFlags", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Anonymously rank a media entry, no validation is done on duplicate rankings
 *		 .
 * @param	entryId	string		 (optional).
 * @param	rank	int		 (optional).
 * @return	.
 */
KalturaMediaService.prototype.anonymousRank = function(callback, entryId, rank){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "rank", rank);
	this.client.queueServiceActionCall("media", "anonymousRank", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add new bulk upload batch job
 *		 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
 *		 If no conversion profile was specified, partner's default will be used
 *		 .
 * @param	fileData	file		 (optional).
 * @param	bulkUploadData	KalturaBulkUploadJobData		 (optional, default: null).
 * @param	bulkUploadEntryData	KalturaBulkUploadEntryData		 (optional, default: null).
 * @return	KalturaBulkUpload.
 */
KalturaMediaService.prototype.bulkUploadAdd = function(callback, fileData, bulkUploadData, bulkUploadEntryData){
	if(!bulkUploadData)
		bulkUploadData = null;
	if(!bulkUploadEntryData)
		bulkUploadEntryData = null;
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	if (bulkUploadData != null)
		this.client.addParam(kparams, "bulkUploadData", toParams(bulkUploadData));
	if (bulkUploadEntryData != null)
		this.client.addParam(kparams, "bulkUploadEntryData", toParams(bulkUploadEntryData));
	this.client.queueServiceActionCall("media", "bulkUploadAdd", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: mixing.
 * The available service actions:
 * @action	add	Adds a new mix.
 *		 If the dataContent is null, a default timeline will be created.
 *		 .
 * @action	get	Get mix entry by id.
 *		 .
 * @action	update	Update mix entry. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a mix entry.
 *		 .
 * @action	list	List entries by filter with paging support.
 *		 Return parameter is an array of mix entries.
 *		 .
 * @action	count	Count mix entries by filter.
 *		 .
 * @action	clone	Clones an existing mix.
 *		 .
 * @action	appendMediaEntry	Appends a media entry to a the end of the mix timeline, this will save the mix timeline as a new version.
 *		 .
 * @action	getMixesByMediaId	Get the mixes in which the media entry is included
 *		 .
 * @action	getReadyMediaEntries	Get all ready media entries that exist in the given mix id
 *		 .
 * @action	anonymousRank	Anonymously rank a mix entry, no validation is done on duplicate rankings
 *		 .
*/
function KalturaMixingService(client){
	this.init(client);
}
KalturaMixingService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a new mix.
 *		 If the dataContent is null, a default timeline will be created.
 *		 .
 * @param	mixEntry	KalturaMixEntry		Mix entry metadata (optional).
 * @return	KalturaMixEntry.
 */
KalturaMixingService.prototype.add = function(callback, mixEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "mixEntry", toParams(mixEntry));
	this.client.queueServiceActionCall("mixing", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get mix entry by id.
 *		 .
 * @param	entryId	string		Mix entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaMixEntry.
 */
KalturaMixingService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("mixing", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update mix entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Mix entry id to update (optional).
 * @param	mixEntry	KalturaMixEntry		Mix entry metadata to update (optional).
 * @return	KalturaMixEntry.
 */
KalturaMixingService.prototype.update = function(callback, entryId, mixEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "mixEntry", toParams(mixEntry));
	this.client.queueServiceActionCall("mixing", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a mix entry.
 *		 .
 * @param	entryId	string		Mix entry id to delete (optional).
 * @return	.
 */
KalturaMixingService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("mixing", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List entries by filter with paging support.
 *		 Return parameter is an array of mix entries.
 *		 .
 * @param	filter	KalturaMixEntryFilter		Mix entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaMixListResponse.
 */
KalturaMixingService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("mixing", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Count mix entries by filter.
 *		 .
 * @param	filter	KalturaMediaEntryFilter		Media entry filter (optional, default: null).
 * @return	int.
 */
KalturaMixingService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("mixing", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Clones an existing mix.
 *		 .
 * @param	entryId	string		Mix entry id to clone (optional).
 * @return	KalturaMixEntry.
 */
KalturaMixingService.prototype.cloneAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("mixing", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Appends a media entry to a the end of the mix timeline, this will save the mix timeline as a new version.
 *		 .
 * @param	mixEntryId	string		Mix entry to append to its timeline (optional).
 * @param	mediaEntryId	string		Media entry to append to the timeline (optional).
 * @return	KalturaMixEntry.
 */
KalturaMixingService.prototype.appendMediaEntry = function(callback, mixEntryId, mediaEntryId){
	var kparams = new Object();
	this.client.addParam(kparams, "mixEntryId", mixEntryId);
	this.client.addParam(kparams, "mediaEntryId", mediaEntryId);
	this.client.queueServiceActionCall("mixing", "appendMediaEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get the mixes in which the media entry is included
 *		 .
 * @param	mediaEntryId	string		 (optional).
 * @return	array.
 */
KalturaMixingService.prototype.getMixesByMediaId = function(callback, mediaEntryId){
	var kparams = new Object();
	this.client.addParam(kparams, "mediaEntryId", mediaEntryId);
	this.client.queueServiceActionCall("mixing", "getMixesByMediaId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get all ready media entries that exist in the given mix id
 *		 .
 * @param	mixId	string		 (optional).
 * @param	version	int		Desired version to get the data from (optional, default: -1).
 * @return	array.
 */
KalturaMixingService.prototype.getReadyMediaEntries = function(callback, mixId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "mixId", mixId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("mixing", "getReadyMediaEntries", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Anonymously rank a mix entry, no validation is done on duplicate rankings
 *		 .
 * @param	entryId	string		 (optional).
 * @param	rank	int		 (optional).
 * @return	.
 */
KalturaMixingService.prototype.anonymousRank = function(callback, entryId, rank){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "rank", rank);
	this.client.queueServiceActionCall("mixing", "anonymousRank", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: notification.
 * The available service actions:
 * @action	getClientNotification	Return the notifications for a specific entry id and type
 *		 .
*/
function KalturaNotificationService(client){
	this.init(client);
}
KalturaNotificationService.inheritsFrom (KalturaServiceBase);
/**
 * Return the notifications for a specific entry id and type
 *		 .
 * @param	entryId	string		 (optional).
 * @param	type	int		 (optional, enum: KalturaNotificationType).
 * @return	KalturaClientNotification.
 */
KalturaNotificationService.prototype.getClientNotification = function(callback, entryId, type){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "type", type);
	this.client.queueServiceActionCall("notification", "getClientNotification", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: partner.
 * The available service actions:
 * @action	register	Create a new Partner object
 *		 .
 * @action	update	Update details and settings of an existing partner
 *		 .
 * @action	get	Retrieve partner object by Id
 *		 .
 * @action	getSecrets	Retrieve partner secret and admin secret
 *		 .
 * @action	getInfo	Retrieve all info attributed to the partner
 *		 This action expects no parameters. It returns information for the current KS partnerId.
 *		 .
 * @action	getUsage	Get usage statistics for a partner
 *		 Calculation is done according to partner's package
 *		 Additional data returned is a graph points of streaming usage in a timeframe
 *		 The resolution can be "days" or "months"
 *		 .
 * @action	getStatistics	Get usage statistics for a partner
 *		 Calculation is done according to partner's package
 *		 .
 * @action	listPartnersForUser	Retrieve a list of partner objects which the current user is allowed to access.
 *		 .
 * @action	list	List partners by filter with paging support
 *		 Current implementation will only list the sub partners of the partner initiating the api call (using the current KS).
 *		 This action is only partially implemented to support listing sub partners of a VAR partner.
 *		 .
 * @action	listFeatureStatus	List partner's current processes' statuses
 *		 .
 * @action	count	Count partner's existing sub-publishers (count includes the partner itself).
 *		 .
*/
function KalturaPartnerService(client){
	this.init(client);
}
KalturaPartnerService.inheritsFrom (KalturaServiceBase);
/**
 * Create a new Partner object
 *		 .
 * @param	partner	KalturaPartner		 (optional).
 * @param	cmsPassword	string		 (optional).
 * @param	templatePartnerId	int		 (optional, default: null).
 * @param	silent	bool		 (optional, default: false).
 * @return	KalturaPartner.
 */
KalturaPartnerService.prototype.register = function(callback, partner, cmsPassword, templatePartnerId, silent){
	if(!cmsPassword)
		cmsPassword = "";
	if(!templatePartnerId)
		templatePartnerId = null;
	if(!silent)
		silent = false;
	var kparams = new Object();
	this.client.addParam(kparams, "partner", toParams(partner));
	this.client.addParam(kparams, "cmsPassword", cmsPassword);
	this.client.addParam(kparams, "templatePartnerId", templatePartnerId);
	this.client.addParam(kparams, "silent", silent);
	this.client.queueServiceActionCall("partner", "register", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update details and settings of an existing partner
 *		 .
 * @param	partner	KalturaPartner		 (optional).
 * @param	allowEmpty	bool		 (optional, default: false).
 * @return	KalturaPartner.
 */
KalturaPartnerService.prototype.update = function(callback, partner, allowEmpty){
	if(!allowEmpty)
		allowEmpty = false;
	var kparams = new Object();
	this.client.addParam(kparams, "partner", toParams(partner));
	this.client.addParam(kparams, "allowEmpty", allowEmpty);
	this.client.queueServiceActionCall("partner", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve partner object by Id
 *		 .
 * @param	id	int		 (optional, default: null).
 * @return	KalturaPartner.
 */
KalturaPartnerService.prototype.get = function(callback, id){
	if(!id)
		id = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("partner", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve partner secret and admin secret
 *		 .
 * @param	partnerId	int		 (optional).
 * @param	adminEmail	string		 (optional).
 * @param	cmsPassword	string		 (optional).
 * @return	KalturaPartner.
 */
KalturaPartnerService.prototype.getSecrets = function(callback, partnerId, adminEmail, cmsPassword){
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "adminEmail", adminEmail);
	this.client.addParam(kparams, "cmsPassword", cmsPassword);
	this.client.queueServiceActionCall("partner", "getSecrets", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve all info attributed to the partner
 *		 This action expects no parameters. It returns information for the current KS partnerId.
 *		 .
 * @return	KalturaPartner.
 */
KalturaPartnerService.prototype.getInfo = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("partner", "getInfo", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get usage statistics for a partner
 *		 Calculation is done according to partner's package
 *		 Additional data returned is a graph points of streaming usage in a timeframe
 *		 The resolution can be "days" or "months"
 *		 .
 * @param	year	int		 (optional).
 * @param	month	int		 (optional, default: 1).
 * @param	resolution	string		 (optional, enum: KalturaReportInterval, default: null).
 * @return	KalturaPartnerUsage.
 */
KalturaPartnerService.prototype.getUsage = function(callback, year, month, resolution){
	if(!year)
		year = "";
	if(!month)
		month = 1;
	if(!resolution)
		resolution = null;
	var kparams = new Object();
	this.client.addParam(kparams, "year", year);
	this.client.addParam(kparams, "month", month);
	this.client.addParam(kparams, "resolution", resolution);
	this.client.queueServiceActionCall("partner", "getUsage", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get usage statistics for a partner
 *		 Calculation is done according to partner's package
 *		 .
 * @return	KalturaPartnerStatistics.
 */
KalturaPartnerService.prototype.getStatistics = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("partner", "getStatistics", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a list of partner objects which the current user is allowed to access.
 *		 .
 * @param	partnerFilter	KalturaPartnerFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaPartnerListResponse.
 */
KalturaPartnerService.prototype.listPartnersForUser = function(callback, partnerFilter, pager){
	if(!partnerFilter)
		partnerFilter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (partnerFilter != null)
		this.client.addParam(kparams, "partnerFilter", toParams(partnerFilter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("partner", "listPartnersForUser", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List partners by filter with paging support
 *		 Current implementation will only list the sub partners of the partner initiating the api call (using the current KS).
 *		 This action is only partially implemented to support listing sub partners of a VAR partner.
 *		 .
 * @param	filter	KalturaPartnerFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaPartnerListResponse.
 */
KalturaPartnerService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("partner", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List partner's current processes' statuses
 *		 .
 * @return	KalturaFeatureStatusListResponse.
 */
KalturaPartnerService.prototype.listFeatureStatus = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("partner", "listFeatureStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Count partner's existing sub-publishers (count includes the partner itself).
 *		 .
 * @param	filter	KalturaPartnerFilter		 (optional, default: null).
 * @return	int.
 */
KalturaPartnerService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("partner", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: permissionItem.
 * The available service actions:
 * @action	add	Adds a new permission item object to the account.
 *		 This action is available only to Kaltura system administrators.
 *		 .
 * @action	get	Retrieves a permission item object using its ID.
 *		 .
 * @action	update	Updates an existing permission item object.
 *		 This action is available only to Kaltura system administrators.
 *		 .
 * @action	delete	Deletes an existing permission item object.
 *		 This action is available only to Kaltura system administrators.
 *		 .
 * @action	list	Lists permission item objects that are associated with an account.
 *		 .
*/
function KalturaPermissionItemService(client){
	this.init(client);
}
KalturaPermissionItemService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a new permission item object to the account.
 *		 This action is available only to Kaltura system administrators.
 *		 .
 * @param	permissionItem	KalturaPermissionItem		The new permission item (optional).
 * @return	KalturaPermissionItem.
 */
KalturaPermissionItemService.prototype.add = function(callback, permissionItem){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionItem", toParams(permissionItem));
	this.client.queueServiceActionCall("permissionitem", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieves a permission item object using its ID.
 *		 .
 * @param	permissionItemId	int		The permission item's unique identifier (optional).
 * @return	KalturaPermissionItem.
 */
KalturaPermissionItemService.prototype.get = function(callback, permissionItemId){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionItemId", permissionItemId);
	this.client.queueServiceActionCall("permissionitem", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Updates an existing permission item object.
 *		 This action is available only to Kaltura system administrators.
 *		 .
 * @param	permissionItemId	int		The permission item's unique identifier (optional).
 * @param	permissionItem	KalturaPermissionItem		Id The permission item's unique identifier (optional).
 * @return	KalturaPermissionItem.
 */
KalturaPermissionItemService.prototype.update = function(callback, permissionItemId, permissionItem){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionItemId", permissionItemId);
	this.client.addParam(kparams, "permissionItem", toParams(permissionItem));
	this.client.queueServiceActionCall("permissionitem", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Deletes an existing permission item object.
 *		 This action is available only to Kaltura system administrators.
 *		 .
 * @param	permissionItemId	int		The permission item's unique identifier (optional).
 * @return	KalturaPermissionItem.
 */
KalturaPermissionItemService.prototype.deleteAction = function(callback, permissionItemId){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionItemId", permissionItemId);
	this.client.queueServiceActionCall("permissionitem", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Lists permission item objects that are associated with an account.
 *		 .
 * @param	filter	KalturaPermissionItemFilter		A filter used to exclude specific types of permission items (optional, default: null).
 * @param	pager	KalturaFilterPager		A limit for the number of records to display on a page (optional, default: null).
 * @return	KalturaPermissionItemListResponse.
 */
KalturaPermissionItemService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("permissionitem", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: permission.
 * The available service actions:
 * @action	add	Adds a new permission object to the account.
 *		 .
 * @action	get	Retrieves a permission object using its ID.
 *		 .
 * @action	update	Updates an existing permission object.
 *		 .
 * @action	delete	Deletes an existing permission object.
 *		 .
 * @action	list	Lists permission objects that are associated with an account.
 *		 Blocked permissions are listed unless you use a filter to exclude them.
 *		 Blocked permissions are listed unless you use a filter to exclude them.
 *		 .
 * @action	getCurrentPermissions	Retrieves a list of permissions that apply to the current KS.
 *		 .
*/
function KalturaPermissionService(client){
	this.init(client);
}
KalturaPermissionService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a new permission object to the account.
 *		 .
 * @param	permission	KalturaPermission		The new permission (optional).
 * @return	KalturaPermission.
 */
KalturaPermissionService.prototype.add = function(callback, permission){
	var kparams = new Object();
	this.client.addParam(kparams, "permission", toParams(permission));
	this.client.queueServiceActionCall("permission", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieves a permission object using its ID.
 *		 .
 * @param	permissionName	string		The name assigned to the permission (optional).
 * @return	KalturaPermission.
 */
KalturaPermissionService.prototype.get = function(callback, permissionName){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionName", permissionName);
	this.client.queueServiceActionCall("permission", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Updates an existing permission object.
 *		 .
 * @param	permissionName	string		The name assigned to the permission (optional).
 * @param	permission	KalturaPermission		Name The name assigned to the permission (optional).
 * @return	KalturaPermission.
 */
KalturaPermissionService.prototype.update = function(callback, permissionName, permission){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionName", permissionName);
	this.client.addParam(kparams, "permission", toParams(permission));
	this.client.queueServiceActionCall("permission", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Deletes an existing permission object.
 *		 .
 * @param	permissionName	string		The name assigned to the permission (optional).
 * @return	KalturaPermission.
 */
KalturaPermissionService.prototype.deleteAction = function(callback, permissionName){
	var kparams = new Object();
	this.client.addParam(kparams, "permissionName", permissionName);
	this.client.queueServiceActionCall("permission", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Lists permission objects that are associated with an account.
 *		 Blocked permissions are listed unless you use a filter to exclude them.
 *		 Blocked permissions are listed unless you use a filter to exclude them.
 *		 .
 * @param	filter	KalturaPermissionFilter		A filter used to exclude specific types of permissions (optional, default: null).
 * @param	pager	KalturaFilterPager		A limit for the number of records to display on a page (optional, default: null).
 * @return	KalturaPermissionListResponse.
 */
KalturaPermissionService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("permission", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieves a list of permissions that apply to the current KS.
 *		 .
 * @return	string.
 */
KalturaPermissionService.prototype.getCurrentPermissions = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("permission", "getCurrentPermissions", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: playlist.
 * The available service actions:
 * @action	add	Add new playlist
 *		 Note that all entries used in a playlist will become public and may appear in KalturaNetwork
 *		 .
 * @action	get	Retrieve a playlist
 *		 .
 * @action	update	Update existing playlist
 *		 Note - you cannot change playlist type. updated playlist must be of the same type.
 *		 .
 * @action	delete	Delete existing playlist
 *		 .
 * @action	clone	Clone an existing playlist
 *		 .
 * @action	list	List available playlists
 *		 .
 * @action	execute	Retrieve playlist for playing purpose
 *		 .
 * @action	executeFromContent	Retrieve playlist for playing purpose, based on content
 *		 .
 * @action	executeFromFilters	Revrieve playlist for playing purpose, based on media entry filters
 *		 .
 * @action	getStatsFromContent	Retrieve playlist statistics
 *		 .
*/
function KalturaPlaylistService(client){
	this.init(client);
}
KalturaPlaylistService.inheritsFrom (KalturaServiceBase);
/**
 * Add new playlist
 *		 Note that all entries used in a playlist will become public and may appear in KalturaNetwork
 *		 .
 * @param	playlist	KalturaPlaylist		 (optional).
 * @param	updateStats	bool		indicates that the playlist statistics attributes should be updated synchronously now (optional, default: false).
 * @return	KalturaPlaylist.
 */
KalturaPlaylistService.prototype.add = function(callback, playlist, updateStats){
	if(!updateStats)
		updateStats = false;
	var kparams = new Object();
	this.client.addParam(kparams, "playlist", toParams(playlist));
	this.client.addParam(kparams, "updateStats", updateStats);
	this.client.queueServiceActionCall("playlist", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a playlist
 *		 .
 * @param	id	string		 (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaPlaylist.
 */
KalturaPlaylistService.prototype.get = function(callback, id, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("playlist", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update existing playlist
 *		 Note - you cannot change playlist type. updated playlist must be of the same type.
 *		 .
 * @param	id	string		 (optional).
 * @param	playlist	KalturaPlaylist		 (optional).
 * @param	updateStats	bool		 (optional, default: false).
 * @return	KalturaPlaylist.
 */
KalturaPlaylistService.prototype.update = function(callback, id, playlist, updateStats){
	if(!updateStats)
		updateStats = false;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "playlist", toParams(playlist));
	this.client.addParam(kparams, "updateStats", updateStats);
	this.client.queueServiceActionCall("playlist", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete existing playlist
 *		 .
 * @param	id	string		 (optional).
 * @return	.
 */
KalturaPlaylistService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("playlist", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Clone an existing playlist
 *		 .
 * @param	id	string		 Id of the playlist to clone (optional).
 * @param	newPlaylist	KalturaPlaylist		Parameters defined here will override the ones in the cloned playlist (optional, default: null).
 * @return	KalturaPlaylist.
 */
KalturaPlaylistService.prototype.cloneAction = function(callback, id, newPlaylist){
	if(!newPlaylist)
		newPlaylist = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	if (newPlaylist != null)
		this.client.addParam(kparams, "newPlaylist", toParams(newPlaylist));
	this.client.queueServiceActionCall("playlist", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List available playlists
 *		 .
 * @param	filter	KalturaPlaylistFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaPlaylistListResponse.
 */
KalturaPlaylistService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("playlist", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve playlist for playing purpose
 *		 .
 * @param	id	string		 (optional).
 * @param	detailed	string		 (optional).
 * @param	playlistContext	KalturaContext		 (optional, default: null).
 * @param	filter	KalturaMediaEntryFilterForPlaylist		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	array.
 */
KalturaPlaylistService.prototype.execute = function(callback, id, detailed, playlistContext, filter, pager){
	if(!detailed)
		detailed = "";
	if(!playlistContext)
		playlistContext = null;
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "detailed", detailed);
	if (playlistContext != null)
		this.client.addParam(kparams, "playlistContext", toParams(playlistContext));
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("playlist", "execute", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve playlist for playing purpose, based on content
 *		 .
 * @param	playlistType	int		 (optional, enum: KalturaPlaylistType).
 * @param	playlistContent	string		 (optional).
 * @param	detailed	string		 (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	array.
 */
KalturaPlaylistService.prototype.executeFromContent = function(callback, playlistType, playlistContent, detailed, pager){
	if(!detailed)
		detailed = "";
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "playlistType", playlistType);
	this.client.addParam(kparams, "playlistContent", playlistContent);
	this.client.addParam(kparams, "detailed", detailed);
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("playlist", "executeFromContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Revrieve playlist for playing purpose, based on media entry filters
 *		 .
 * @param	filters	array		 (optional).
 * @param	totalResults	int		 (optional).
 * @param	detailed	string		 (optional, default: 1).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	array.
 */
KalturaPlaylistService.prototype.executeFromFilters = function(callback, filters, totalResults, detailed, pager){
	if(!detailed)
		detailed = 1;
	if(!pager)
		pager = null;
	var kparams = new Object();
for(var index in filters)
{
	var obj = filters[index];
	this.client.addParam(kparams, "filters:" + index, toParams(obj));
}
	this.client.addParam(kparams, "totalResults", totalResults);
	this.client.addParam(kparams, "detailed", detailed);
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("playlist", "executeFromFilters", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve playlist statistics
 *		 .
 * @param	playlistType	int		 (optional, enum: KalturaPlaylistType).
 * @param	playlistContent	string		 (optional).
 * @return	KalturaPlaylist.
 */
KalturaPlaylistService.prototype.getStatsFromContent = function(callback, playlistType, playlistContent){
	var kparams = new Object();
	this.client.addParam(kparams, "playlistType", playlistType);
	this.client.addParam(kparams, "playlistContent", playlistContent);
	this.client.queueServiceActionCall("playlist", "getStatsFromContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: report.
 * The available service actions:
 * @action	getGraphs	report getGraphs action allows to get a graph data for a specific report. 
 *		 .
 * @action	getTotal	report getTotal action allows to get a graph data for a specific report. 
 *		 .
 * @action	getBaseTotal	report getBaseTotal action allows to get a the total base for storage reports  
 *		 .
 * @action	getTable	report getTable action allows to get a graph data for a specific report. 
 *		 .
 * @action	getUrlForReportAsCsv	will create a Csv file for the given report and return the URL to access it
 *		 .
 * @action	serve	Will serve a requested report
 *		 .
 * @action	execute	.
*/
function KalturaReportService(client){
	this.init(client);
}
KalturaReportService.inheritsFrom (KalturaServiceBase);
/**
 * report getGraphs action allows to get a graph data for a specific report. 
 *		 .
 * @param	reportType	string		  (optional, enum: KalturaReportType).
 * @param	reportInputFilter	KalturaReportInputFilter		 (optional).
 * @param	dimension	string		 (optional, default: null).
 * @param	objectIds	string		- one ID or more (separated by ',') of specific objects to query (optional, default: null).
 * @return	array.
 */
KalturaReportService.prototype.getGraphs = function(callback, reportType, reportInputFilter, dimension, objectIds){
	if(!dimension)
		dimension = null;
	if(!objectIds)
		objectIds = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	this.client.addParam(kparams, "reportInputFilter", toParams(reportInputFilter));
	this.client.addParam(kparams, "dimension", dimension);
	this.client.addParam(kparams, "objectIds", objectIds);
	this.client.queueServiceActionCall("report", "getGraphs", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * report getTotal action allows to get a graph data for a specific report. 
 *		 .
 * @param	reportType	string		  (optional, enum: KalturaReportType).
 * @param	reportInputFilter	KalturaReportInputFilter		 (optional).
 * @param	objectIds	string		- one ID or more (separated by ',') of specific objects to query (optional, default: null).
 * @return	KalturaReportTotal.
 */
KalturaReportService.prototype.getTotal = function(callback, reportType, reportInputFilter, objectIds){
	if(!objectIds)
		objectIds = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	this.client.addParam(kparams, "reportInputFilter", toParams(reportInputFilter));
	this.client.addParam(kparams, "objectIds", objectIds);
	this.client.queueServiceActionCall("report", "getTotal", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * report getBaseTotal action allows to get a the total base for storage reports  
 *		 .
 * @param	reportType	string		  (optional, enum: KalturaReportType).
 * @param	reportInputFilter	KalturaReportInputFilter		 (optional).
 * @param	objectIds	string		- one ID or more (separated by ',') of specific objects to query (optional, default: null).
 * @return	array.
 */
KalturaReportService.prototype.getBaseTotal = function(callback, reportType, reportInputFilter, objectIds){
	if(!objectIds)
		objectIds = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	this.client.addParam(kparams, "reportInputFilter", toParams(reportInputFilter));
	this.client.addParam(kparams, "objectIds", objectIds);
	this.client.queueServiceActionCall("report", "getBaseTotal", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * report getTable action allows to get a graph data for a specific report. 
 *		 .
 * @param	reportType	string		  (optional, enum: KalturaReportType).
 * @param	reportInputFilter	KalturaReportInputFilter		 (optional).
 * @param	pager	KalturaFilterPager		 (optional).
 * @param	order	string		 (optional, default: null).
 * @param	objectIds	string		- one ID or more (separated by ',') of specific objects to query (optional, default: null).
 * @return	KalturaReportTable.
 */
KalturaReportService.prototype.getTable = function(callback, reportType, reportInputFilter, pager, order, objectIds){
	if(!order)
		order = null;
	if(!objectIds)
		objectIds = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportType", reportType);
	this.client.addParam(kparams, "reportInputFilter", toParams(reportInputFilter));
	this.client.addParam(kparams, "pager", toParams(pager));
	this.client.addParam(kparams, "order", order);
	this.client.addParam(kparams, "objectIds", objectIds);
	this.client.queueServiceActionCall("report", "getTable", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * will create a Csv file for the given report and return the URL to access it
 *		 .
 * @param	reportTitle	string		The title of the report to display at top of CSV  (optional).
 * @param	reportText	string		The text of the filter of the report (optional).
 * @param	headers	string		The headers of the columns - a map between the enumerations on the server side and the their display text   (optional).
 * @param	reportType	string		  (optional, enum: KalturaReportType).
 * @param	reportInputFilter	KalturaReportInputFilter		 (optional).
 * @param	dimension	string			   (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @param	order	string		 (optional, default: null).
 * @param	objectIds	string		- one ID or more (separated by ',') of specific objects to query (optional, default: null).
 * @return	string.
 */
KalturaReportService.prototype.getUrlForReportAsCsv = function(callback, reportTitle, reportText, headers, reportType, reportInputFilter, dimension, pager, order, objectIds){
	if(!dimension)
		dimension = null;
	if(!pager)
		pager = null;
	if(!order)
		order = null;
	if(!objectIds)
		objectIds = null;
	var kparams = new Object();
	this.client.addParam(kparams, "reportTitle", reportTitle);
	this.client.addParam(kparams, "reportText", reportText);
	this.client.addParam(kparams, "headers", headers);
	this.client.addParam(kparams, "reportType", reportType);
	this.client.addParam(kparams, "reportInputFilter", toParams(reportInputFilter));
	this.client.addParam(kparams, "dimension", dimension);
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.addParam(kparams, "order", order);
	this.client.addParam(kparams, "objectIds", objectIds);
	this.client.queueServiceActionCall("report", "getUrlForReportAsCsv", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Will serve a requested report
 *		 .
 * @param	id	string		- the requested id (optional).
 * @return	string.
 */
KalturaReportService.prototype.serve = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("report", "serve", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @param	params	array		 (optional, default: null).
 * @return	KalturaReportResponse.
 */
KalturaReportService.prototype.execute = function(callback, id, params){
	if(!params)
		params = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	if(params != null)
	for(var index in params)
	{
		var obj = params[index];
		this.client.addParam(kparams, "params:" + index, toParams(obj));
	}
	this.client.queueServiceActionCall("report", "execute", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: responseProfile.
 * The available service actions:
 * @action	add	Add new response profile
 *		 .
 * @action	get	Get response profile by id
 *		 .
 * @action	update	Update response profile by id
 *		 .
 * @action	updateStatus	Update response profile status by id
 *		 .
 * @action	delete	Delete response profile by id
 *		 .
 * @action	list	List response profiles by filter and pager
 *		 .
 * @action	recalculate	Recalculate response profile cached objects
 *		 .
 * @action	clone	Clone an existing response profile
 *		 .
*/
function KalturaResponseProfileService(client){
	this.init(client);
}
KalturaResponseProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Add new response profile
 *		 .
 * @param	addResponseProfile	KalturaResponseProfile		 (optional).
 * @return	KalturaResponseProfile.
 */
KalturaResponseProfileService.prototype.add = function(callback, addResponseProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "addResponseProfile", toParams(addResponseProfile));
	this.client.queueServiceActionCall("responseprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get response profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaResponseProfile.
 */
KalturaResponseProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("responseprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update response profile by id
 *		 .
 * @param	id	int		 (optional).
 * @param	updateResponseProfile	KalturaResponseProfile		 (optional).
 * @return	KalturaResponseProfile.
 */
KalturaResponseProfileService.prototype.update = function(callback, id, updateResponseProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "updateResponseProfile", toParams(updateResponseProfile));
	this.client.queueServiceActionCall("responseprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update response profile status by id
 *		 .
 * @param	id	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaResponseProfileStatus).
 * @return	KalturaResponseProfile.
 */
KalturaResponseProfileService.prototype.updateStatus = function(callback, id, status){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "status", status);
	this.client.queueServiceActionCall("responseprofile", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete response profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaResponseProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("responseprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List response profiles by filter and pager
 *		 .
 * @param	filter	KalturaResponseProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaResponseProfileListResponse.
 */
KalturaResponseProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("responseprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Recalculate response profile cached objects
 *		 .
 * @param	options	KalturaResponseProfileCacheRecalculateOptions		 (optional).
 * @return	KalturaResponseProfileCacheRecalculateResults.
 */
KalturaResponseProfileService.prototype.recalculate = function(callback, options){
	var kparams = new Object();
	this.client.addParam(kparams, "options", toParams(options));
	this.client.queueServiceActionCall("responseprofile", "recalculate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Clone an existing response profile
 *		 .
 * @param	id	int		 (optional).
 * @param	profile	KalturaResponseProfile		 (optional).
 * @return	KalturaResponseProfile.
 */
KalturaResponseProfileService.prototype.cloneAction = function(callback, id, profile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "profile", toParams(profile));
	this.client.queueServiceActionCall("responseprofile", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: schema.
 * The available service actions:
*/
function KalturaSchemaService(client){
	this.init(client);
}
KalturaSchemaService.inheritsFrom (KalturaServiceBase);

/**
 *Class definition for the Kaltura service: search.
 * The available service actions:
 * @action	search	Search for media in one of the supported media providers
 *		 .
 * @action	getMediaInfo	Retrieve extra information about media found in search action
 *		 Some providers return only part of the fields needed to create entry from, use this action to get the rest of the fields.
 *		 .
 * @action	searchUrl	Search for media given a specific URL
 *		 Kaltura supports a searchURL action on some of the media providers.
 *		 This action will return a KalturaSearchResult object based on a given URL (assuming the media provider is supported)
 *		 .
 * @action	externalLogin	.
*/
function KalturaSearchService(client){
	this.init(client);
}
KalturaSearchService.inheritsFrom (KalturaServiceBase);
/**
 * Search for media in one of the supported media providers
 *		 .
 * @param	search	KalturaSearch		A KalturaSearch object contains the search keywords, media provider and media type (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaSearchResultResponse.
 */
KalturaSearchService.prototype.search = function(callback, search, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "search", toParams(search));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("search", "search", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve extra information about media found in search action
 *		 Some providers return only part of the fields needed to create entry from, use this action to get the rest of the fields.
 *		 .
 * @param	searchResult	KalturaSearchResult		KalturaSearchResult object extends KalturaSearch and has all fields required for media:add (optional).
 * @return	KalturaSearchResult.
 */
KalturaSearchService.prototype.getMediaInfo = function(callback, searchResult){
	var kparams = new Object();
	this.client.addParam(kparams, "searchResult", toParams(searchResult));
	this.client.queueServiceActionCall("search", "getMediaInfo", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Search for media given a specific URL
 *		 Kaltura supports a searchURL action on some of the media providers.
 *		 This action will return a KalturaSearchResult object based on a given URL (assuming the media provider is supported)
 *		 .
 * @param	mediaType	int		 (optional, enum: KalturaMediaType).
 * @param	url	string		 (optional).
 * @return	KalturaSearchResult.
 */
KalturaSearchService.prototype.searchUrl = function(callback, mediaType, url){
	var kparams = new Object();
	this.client.addParam(kparams, "mediaType", mediaType);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("search", "searchUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	searchSource	int		 (optional, enum: KalturaSearchProviderType).
 * @param	userName	string		 (optional).
 * @param	password	string		 (optional).
 * @return	KalturaSearchAuthData.
 */
KalturaSearchService.prototype.externalLogin = function(callback, searchSource, userName, password){
	var kparams = new Object();
	this.client.addParam(kparams, "searchSource", searchSource);
	this.client.addParam(kparams, "userName", userName);
	this.client.addParam(kparams, "password", password);
	this.client.queueServiceActionCall("search", "externalLogin", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: serverNode.
 * The available service actions:
 * @action	add	Adds a server node to the Kaltura DB.
 *		 .
 * @action	get	Get server node by id
 *		 .
 * @action	update	Update server node by id 
 *		 .
 * @action	delete	delete server node by id
 *		 .
 * @action	disable	Disable server node by id
 *		 .
 * @action	enable	Enable server node by id
 *		 .
 * @action	list	.
 * @action	reportStatus	Update server node status
 *		 .
*/
function KalturaServerNodeService(client){
	this.init(client);
}
KalturaServerNodeService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a server node to the Kaltura DB.
 *		 .
 * @param	serverNode	KalturaServerNode		 (optional).
 * @return	KalturaServerNode.
 */
KalturaServerNodeService.prototype.add = function(callback, serverNode){
	var kparams = new Object();
	this.client.addParam(kparams, "serverNode", toParams(serverNode));
	this.client.queueServiceActionCall("servernode", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get server node by id
 *		 .
 * @param	serverNodeId	int		 (optional).
 * @return	KalturaServerNode.
 */
KalturaServerNodeService.prototype.get = function(callback, serverNodeId){
	var kparams = new Object();
	this.client.addParam(kparams, "serverNodeId", serverNodeId);
	this.client.queueServiceActionCall("servernode", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update server node by id 
 *		 .
 * @param	serverNodeId	int		 (optional).
 * @param	serverNode	KalturaServerNode		Id (optional).
 * @return	KalturaServerNode.
 */
KalturaServerNodeService.prototype.update = function(callback, serverNodeId, serverNode){
	var kparams = new Object();
	this.client.addParam(kparams, "serverNodeId", serverNodeId);
	this.client.addParam(kparams, "serverNode", toParams(serverNode));
	this.client.queueServiceActionCall("servernode", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * delete server node by id
 *		 .
 * @param	serverNodeId	string		 (optional).
 * @return	.
 */
KalturaServerNodeService.prototype.deleteAction = function(callback, serverNodeId){
	var kparams = new Object();
	this.client.addParam(kparams, "serverNodeId", serverNodeId);
	this.client.queueServiceActionCall("servernode", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Disable server node by id
 *		 .
 * @param	serverNodeId	string		 (optional).
 * @return	KalturaServerNode.
 */
KalturaServerNodeService.prototype.disable = function(callback, serverNodeId){
	var kparams = new Object();
	this.client.addParam(kparams, "serverNodeId", serverNodeId);
	this.client.queueServiceActionCall("servernode", "disable", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Enable server node by id
 *		 .
 * @param	serverNodeId	string		 (optional).
 * @return	KalturaServerNode.
 */
KalturaServerNodeService.prototype.enable = function(callback, serverNodeId){
	var kparams = new Object();
	this.client.addParam(kparams, "serverNodeId", serverNodeId);
	this.client.queueServiceActionCall("servernode", "enable", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaServerNodeFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaServerNodeListResponse.
 */
KalturaServerNodeService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("servernode", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update server node status
 *		 .
 * @param	hostName	string		 (optional).
 * @param	serverNode	KalturaServerNode		 (optional, default: null).
 * @return	KalturaServerNode.
 */
KalturaServerNodeService.prototype.reportStatus = function(callback, hostName, serverNode){
	if(!serverNode)
		serverNode = null;
	var kparams = new Object();
	this.client.addParam(kparams, "hostName", hostName);
	if (serverNode != null)
		this.client.addParam(kparams, "serverNode", toParams(serverNode));
	this.client.queueServiceActionCall("servernode", "reportStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: session.
 * The available service actions:
 * @action	start	Start a session with Kaltura's server.
 *		 The result KS is the session key that you should pass to all services that requires a ticket.
 *		 .
 * @action	end	End a session with the Kaltura server, making the current KS invalid.
 *		 .
 * @action	impersonate	Start an impersonated session with Kaltura's server.
 *		 The result KS is the session key that you should pass to all services that requires a ticket.
 *		 .
 * @action	impersonateByKs	Start an impersonated session with Kaltura's server.
 *		 The result KS info contains the session key that you should pass to all services that requires a ticket.
 *		 Type, expiry and privileges won't be changed if they're not set
 *		 .
 * @action	get	Parse session key and return its info
 *		 .
 * @action	startWidgetSession	Start a session for Kaltura's flash widgets
 *		 .
*/
function KalturaSessionService(client){
	this.init(client);
}
KalturaSessionService.inheritsFrom (KalturaServiceBase);
/**
 * Start a session with Kaltura's server.
 *		 The result KS is the session key that you should pass to all services that requires a ticket.
 *		 .
 * @param	secret	string		Remember to provide the correct secret according to the sessionType you want (optional).
 * @param	userId	string		 (optional).
 * @param	type	int		Regular session or Admin session (optional, enum: KalturaSessionType).
 * @param	partnerId	int		 (optional, default: null).
 * @param	expiry	int		KS expiry time in seconds (optional, default: 86400).
 * @param	privileges	string		 (optional, default: null).
 * @return	string.
 */
KalturaSessionService.prototype.start = function(callback, secret, userId, type, partnerId, expiry, privileges){
	if(!userId)
		userId = "";
	if(!type)
		type = 0;
	if(!partnerId)
		partnerId = null;
	if(!expiry)
		expiry = 86400;
	if(!privileges)
		privileges = null;
	var kparams = new Object();
	this.client.addParam(kparams, "secret", secret);
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "type", type);
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.addParam(kparams, "privileges", privileges);
	this.client.queueServiceActionCall("session", "start", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * End a session with the Kaltura server, making the current KS invalid.
 *		 .
 * @return	.
 */
KalturaSessionService.prototype.end = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("session", "end", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Start an impersonated session with Kaltura's server.
 *		 The result KS is the session key that you should pass to all services that requires a ticket.
 *		 .
 * @param	secret	string		- should be the secret (admin or user) of the original partnerId (not impersonatedPartnerId). (optional).
 * @param	impersonatedPartnerId	int		 (optional).
 * @param	userId	string		- impersonated userId (optional).
 * @param	type	int		 (optional, enum: KalturaSessionType).
 * @param	partnerId	int		 (optional, default: null).
 * @param	expiry	int		KS expiry time in seconds (optional, default: 86400).
 * @param	privileges	string		 (optional, default: null).
 * @return	string.
 */
KalturaSessionService.prototype.impersonate = function(callback, secret, impersonatedPartnerId, userId, type, partnerId, expiry, privileges){
	if(!userId)
		userId = "";
	if(!type)
		type = 0;
	if(!partnerId)
		partnerId = null;
	if(!expiry)
		expiry = 86400;
	if(!privileges)
		privileges = null;
	var kparams = new Object();
	this.client.addParam(kparams, "secret", secret);
	this.client.addParam(kparams, "impersonatedPartnerId", impersonatedPartnerId);
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "type", type);
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.addParam(kparams, "privileges", privileges);
	this.client.queueServiceActionCall("session", "impersonate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Start an impersonated session with Kaltura's server.
 *		 The result KS info contains the session key that you should pass to all services that requires a ticket.
 *		 Type, expiry and privileges won't be changed if they're not set
 *		 .
 * @param	session	string		The old KS of the impersonated partner (optional).
 * @param	type	int		Type of the new KS  (optional, enum: KalturaSessionType, default: null).
 * @param	expiry	int		Expiry time in seconds of the new KS (optional, default: null).
 * @param	privileges	string		Privileges of the new KS (optional, default: null).
 * @return	KalturaSessionInfo.
 */
KalturaSessionService.prototype.impersonateByKs = function(callback, session, type, expiry, privileges){
	if(!type)
		type = null;
	if(!expiry)
		expiry = null;
	if(!privileges)
		privileges = null;
	var kparams = new Object();
	this.client.addParam(kparams, "session", session);
	this.client.addParam(kparams, "type", type);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.addParam(kparams, "privileges", privileges);
	this.client.queueServiceActionCall("session", "impersonateByKs", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Parse session key and return its info
 *		 .
 * @param	session	string		The KS to be parsed, keep it empty to use current session. (optional, default: null).
 * @return	KalturaSessionInfo.
 */
KalturaSessionService.prototype.get = function(callback, session){
	if(!session)
		session = null;
	var kparams = new Object();
	this.client.addParam(kparams, "session", session);
	this.client.queueServiceActionCall("session", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Start a session for Kaltura's flash widgets
 *		 .
 * @param	widgetId	string		 (optional).
 * @param	expiry	int		 (optional, default: 86400).
 * @return	KalturaStartWidgetSessionResponse.
 */
KalturaSessionService.prototype.startWidgetSession = function(callback, widgetId, expiry){
	if(!expiry)
		expiry = 86400;
	var kparams = new Object();
	this.client.addParam(kparams, "widgetId", widgetId);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.queueServiceActionCall("session", "startWidgetSession", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: stats.
 * The available service actions:
 * @action	collect	Will write to the event log a single line representing the event
 *		 client version - will help interprete the line structure. different client versions might have slightly different data/data formats in the line
 *	event_id - number is the row number in yuval's excel
 *	datetime - same format as MySql's datetime - can change and should reflect the time zone
 *	session id - can be some big random number or guid
 *	partner id
 *	entry id
 *	unique viewer
 *	widget id
 *	ui_conf id
 *	uid - the puser id as set by the ppartner
 *	current point - in milliseconds
 *	duration - milliseconds
 *	user ip
 *	process duration - in milliseconds
 *	control id
 *	seek
 *	new point
 *	referrer
 *		
 *		
 *		 KalturaStatsEvent $event
 *		 .
 * @action	kmcCollect	Will collect the kmcEvent sent form the KMC client
 *		 // this will actually be an empty function because all events will be sent using GET and will anyway be logged in the apache log
 *		 .
 * @action	reportKceError	.
 * @action	reportError	Use this action to report errors to the kaltura server.
 *		 .
*/
function KalturaStatsService(client){
	this.init(client);
}
KalturaStatsService.inheritsFrom (KalturaServiceBase);
/**
 * Will write to the event log a single line representing the event
 *		 client version - will help interprete the line structure. different client versions might have slightly different data/data formats in the line
 *	event_id - number is the row number in yuval's excel
 *	datetime - same format as MySql's datetime - can change and should reflect the time zone
 *	session id - can be some big random number or guid
 *	partner id
 *	entry id
 *	unique viewer
 *	widget id
 *	ui_conf id
 *	uid - the puser id as set by the ppartner
 *	current point - in milliseconds
 *	duration - milliseconds
 *	user ip
 *	process duration - in milliseconds
 *	control id
 *	seek
 *	new point
 *	referrer
 *		
 *		
 *		 KalturaStatsEvent $event
 *		 .
 * @param	event	KalturaStatsEvent		 (optional).
 * @return	bool.
 */
KalturaStatsService.prototype.collect = function(callback, event){
	var kparams = new Object();
	this.client.addParam(kparams, "event", toParams(event));
	this.client.queueServiceActionCall("stats", "collect", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Will collect the kmcEvent sent form the KMC client
 *		 // this will actually be an empty function because all events will be sent using GET and will anyway be logged in the apache log
 *		 .
 * @param	kmcEvent	KalturaStatsKmcEvent		 (optional).
 * @return	.
 */
KalturaStatsService.prototype.kmcCollect = function(callback, kmcEvent){
	var kparams = new Object();
	this.client.addParam(kparams, "kmcEvent", toParams(kmcEvent));
	this.client.queueServiceActionCall("stats", "kmcCollect", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	kalturaCEError	KalturaCEError		 (optional).
 * @return	KalturaCEError.
 */
KalturaStatsService.prototype.reportKceError = function(callback, kalturaCEError){
	var kparams = new Object();
	this.client.addParam(kparams, "kalturaCEError", toParams(kalturaCEError));
	this.client.queueServiceActionCall("stats", "reportKceError", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Use this action to report errors to the kaltura server.
 *		 .
 * @param	errorCode	string		 (optional).
 * @param	errorMessage	string		 (optional).
 * @return	.
 */
KalturaStatsService.prototype.reportError = function(callback, errorCode, errorMessage){
	var kparams = new Object();
	this.client.addParam(kparams, "errorCode", errorCode);
	this.client.addParam(kparams, "errorMessage", errorMessage);
	this.client.queueServiceActionCall("stats", "reportError", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: storageProfile.
 * The available service actions:
 * @action	add	Adds a storage profile to the Kaltura DB.
 *		 .
 * @action	updateStatus	.
 * @action	get	Get storage profile by id
 *		 .
 * @action	update	Update storage profile by id 
 *		 .
 * @action	list	.
*/
function KalturaStorageProfileService(client){
	this.init(client);
}
KalturaStorageProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a storage profile to the Kaltura DB.
 *		 .
 * @param	storageProfile	KalturaStorageProfile		 (optional).
 * @return	KalturaStorageProfile.
 */
KalturaStorageProfileService.prototype.add = function(callback, storageProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "storageProfile", toParams(storageProfile));
	this.client.queueServiceActionCall("storageprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	storageId	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaStorageProfileStatus).
 * @return	.
 */
KalturaStorageProfileService.prototype.updateStatus = function(callback, storageId, status){
	var kparams = new Object();
	this.client.addParam(kparams, "storageId", storageId);
	this.client.addParam(kparams, "status", status);
	this.client.queueServiceActionCall("storageprofile", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get storage profile by id
 *		 .
 * @param	storageProfileId	int		 (optional).
 * @return	KalturaStorageProfile.
 */
KalturaStorageProfileService.prototype.get = function(callback, storageProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "storageProfileId", storageProfileId);
	this.client.queueServiceActionCall("storageprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update storage profile by id 
 *		 .
 * @param	storageProfileId	int		 (optional).
 * @param	storageProfile	KalturaStorageProfile		Id (optional).
 * @return	KalturaStorageProfile.
 */
KalturaStorageProfileService.prototype.update = function(callback, storageProfileId, storageProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "storageProfileId", storageProfileId);
	this.client.addParam(kparams, "storageProfile", toParams(storageProfile));
	this.client.queueServiceActionCall("storageprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaStorageProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaStorageProfileListResponse.
 */
KalturaStorageProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("storageprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: syndicationFeed.
 * The available service actions:
 * @action	add	Add new Syndication Feed
 *		 .
 * @action	get	Get Syndication Feed by ID
 *		 .
 * @action	update	Update Syndication Feed by ID
 *		 .
 * @action	delete	Delete Syndication Feed by ID
 *		 .
 * @action	list	List Syndication Feeds by filter with paging support
 *		 .
 * @action	getEntryCount	get entry count for a syndication feed
 *		 .
 * @action	requestConversion	request conversion for all entries that doesnt have the required flavor param
 *		 returns a comma-separated ids of conversion jobs
 *		 .
*/
function KalturaSyndicationFeedService(client){
	this.init(client);
}
KalturaSyndicationFeedService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Syndication Feed
 *		 .
 * @param	syndicationFeed	KalturaBaseSyndicationFeed		 (optional).
 * @return	KalturaBaseSyndicationFeed.
 */
KalturaSyndicationFeedService.prototype.add = function(callback, syndicationFeed){
	var kparams = new Object();
	this.client.addParam(kparams, "syndicationFeed", toParams(syndicationFeed));
	this.client.queueServiceActionCall("syndicationfeed", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Syndication Feed by ID
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaBaseSyndicationFeed.
 */
KalturaSyndicationFeedService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("syndicationfeed", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Syndication Feed by ID
 *		 .
 * @param	id	string		 (optional).
 * @param	syndicationFeed	KalturaBaseSyndicationFeed		 (optional).
 * @return	KalturaBaseSyndicationFeed.
 */
KalturaSyndicationFeedService.prototype.update = function(callback, id, syndicationFeed){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "syndicationFeed", toParams(syndicationFeed));
	this.client.queueServiceActionCall("syndicationfeed", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Syndication Feed by ID
 *		 .
 * @param	id	string		 (optional).
 * @return	.
 */
KalturaSyndicationFeedService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("syndicationfeed", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Syndication Feeds by filter with paging support
 *		 .
 * @param	filter	KalturaBaseSyndicationFeedFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaBaseSyndicationFeedListResponse.
 */
KalturaSyndicationFeedService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("syndicationfeed", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * get entry count for a syndication feed
 *		 .
 * @param	feedId	string		 (optional).
 * @return	KalturaSyndicationFeedEntryCount.
 */
KalturaSyndicationFeedService.prototype.getEntryCount = function(callback, feedId){
	var kparams = new Object();
	this.client.addParam(kparams, "feedId", feedId);
	this.client.queueServiceActionCall("syndicationfeed", "getEntryCount", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * request conversion for all entries that doesnt have the required flavor param
 *		 returns a comma-separated ids of conversion jobs
 *		 .
 * @param	feedId	string		 (optional).
 * @return	string.
 */
KalturaSyndicationFeedService.prototype.requestConversion = function(callback, feedId){
	var kparams = new Object();
	this.client.addParam(kparams, "feedId", feedId);
	this.client.queueServiceActionCall("syndicationfeed", "requestConversion", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: system.
 * The available service actions:
 * @action	ping	.
 * @action	pingDatabase	.
 * @action	getTime	.
 * @action	getVersion	.
*/
function KalturaSystemService(client){
	this.init(client);
}
KalturaSystemService.inheritsFrom (KalturaServiceBase);
/**
 * .
 * @return	bool.
 */
KalturaSystemService.prototype.ping = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("system", "ping", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	bool.
 */
KalturaSystemService.prototype.pingDatabase = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("system", "pingDatabase", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	int.
 */
KalturaSystemService.prototype.getTime = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("system", "getTime", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	string.
 */
KalturaSystemService.prototype.getVersion = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("system", "getVersion", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: thumbAsset.
 * The available service actions:
 * @action	add	Add thumbnail asset
 *	     .
 * @action	setContent	Update content of thumbnail asset
 *	     .
 * @action	update	Update thumbnail asset
 *	     .
 * @action	setAsDefault	Tags the thumbnail as DEFAULT_THUMB and removes that tag from all other thumbnail assets of the entry.
 *		 Create a new file sync link on the entry thumbnail that points to the thumbnail asset file sync.
 *		 .
 * @action	generateByEntryId	.
 * @action	generate	.
 * @action	regenerate	.
 * @action	get	.
 * @action	getByEntryId	.
 * @action	list	List Thumbnail Assets by filter and pager
 *		 .
 * @action	addFromUrl	.
 * @action	addFromImage	.
 * @action	delete	.
 * @action	getUrl	Get download URL for the asset
 *		 .
 * @action	getRemotePaths	Get remote storage existing paths for the asset
 *		 .
*/
function KalturaThumbAssetService(client){
	this.init(client);
}
KalturaThumbAssetService.inheritsFrom (KalturaServiceBase);
/**
 * Add thumbnail asset
 *	     .
 * @param	entryId	string		 (optional).
 * @param	thumbAsset	KalturaThumbAsset		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.add = function(callback, entryId, thumbAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "thumbAsset", toParams(thumbAsset));
	this.client.queueServiceActionCall("thumbasset", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update content of thumbnail asset
 *	     .
 * @param	id	string		 (optional).
 * @param	contentResource	KalturaContentResource		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.setContent = function(callback, id, contentResource){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "contentResource", toParams(contentResource));
	this.client.queueServiceActionCall("thumbasset", "setContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update thumbnail asset
 *	     .
 * @param	id	string		 (optional).
 * @param	thumbAsset	KalturaThumbAsset		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.update = function(callback, id, thumbAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "thumbAsset", toParams(thumbAsset));
	this.client.queueServiceActionCall("thumbasset", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Tags the thumbnail as DEFAULT_THUMB and removes that tag from all other thumbnail assets of the entry.
 *		 Create a new file sync link on the entry thumbnail that points to the thumbnail asset file sync.
 *		 .
 * @param	thumbAssetId	string		 (optional).
 * @return	.
 */
KalturaThumbAssetService.prototype.setAsDefault = function(callback, thumbAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "thumbAssetId", thumbAssetId);
	this.client.queueServiceActionCall("thumbasset", "setAsDefault", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @param	destThumbParamsId	int		indicate the id of the ThumbParams to be generate this thumbnail by (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.generateByEntryId = function(callback, entryId, destThumbParamsId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "destThumbParamsId", destThumbParamsId);
	this.client.queueServiceActionCall("thumbasset", "generateByEntryId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @param	thumbParams	KalturaThumbParams		 (optional).
 * @param	sourceAssetId	string		id of the source asset (flavor or thumbnail) to be used as source for the thumbnail generation (optional, default: null).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.generate = function(callback, entryId, thumbParams, sourceAssetId){
	if(!sourceAssetId)
		sourceAssetId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "thumbParams", toParams(thumbParams));
	this.client.addParam(kparams, "sourceAssetId", sourceAssetId);
	this.client.queueServiceActionCall("thumbasset", "generate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	thumbAssetId	string		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.regenerate = function(callback, thumbAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "thumbAssetId", thumbAssetId);
	this.client.queueServiceActionCall("thumbasset", "regenerate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	thumbAssetId	string		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.get = function(callback, thumbAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "thumbAssetId", thumbAssetId);
	this.client.queueServiceActionCall("thumbasset", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @return	array.
 */
KalturaThumbAssetService.prototype.getByEntryId = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("thumbasset", "getByEntryId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Thumbnail Assets by filter and pager
 *		 .
 * @param	filter	KalturaAssetFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaThumbAssetListResponse.
 */
KalturaThumbAssetService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("thumbasset", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @param	url	string		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.addFromUrl = function(callback, entryId, url){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("thumbasset", "addFromUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @param	fileData	file		 (optional).
 * @return	KalturaThumbAsset.
 */
KalturaThumbAssetService.prototype.addFromImage = function(callback, entryId, fileData){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("thumbasset", "addFromImage", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	thumbAssetId	string		 (optional).
 * @return	.
 */
KalturaThumbAssetService.prototype.deleteAction = function(callback, thumbAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "thumbAssetId", thumbAssetId);
	this.client.queueServiceActionCall("thumbasset", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get download URL for the asset
 *		 .
 * @param	id	string		 (optional).
 * @param	storageId	int		 (optional, default: null).
 * @param	thumbParams	KalturaThumbParams		 (optional, default: null).
 * @return	string.
 */
KalturaThumbAssetService.prototype.getUrl = function(callback, id, storageId, thumbParams){
	if(!storageId)
		storageId = null;
	if(!thumbParams)
		thumbParams = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "storageId", storageId);
	if (thumbParams != null)
		this.client.addParam(kparams, "thumbParams", toParams(thumbParams));
	this.client.queueServiceActionCall("thumbasset", "getUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get remote storage existing paths for the asset
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaRemotePathListResponse.
 */
KalturaThumbAssetService.prototype.getRemotePaths = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("thumbasset", "getRemotePaths", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: thumbParamsOutput.
 * The available service actions:
 * @action	get	Get thumb params output object by ID
 *		 .
 * @action	list	List thumb params output objects by filter and pager
 *		 .
*/
function KalturaThumbParamsOutputService(client){
	this.init(client);
}
KalturaThumbParamsOutputService.inheritsFrom (KalturaServiceBase);
/**
 * Get thumb params output object by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaThumbParamsOutput.
 */
KalturaThumbParamsOutputService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("thumbparamsoutput", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List thumb params output objects by filter and pager
 *		 .
 * @param	filter	KalturaThumbParamsOutputFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaThumbParamsOutputListResponse.
 */
KalturaThumbParamsOutputService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("thumbparamsoutput", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: thumbParams.
 * The available service actions:
 * @action	add	Add new Thumb Params
 *		 .
 * @action	get	Get Thumb Params by ID
 *		 .
 * @action	update	Update Thumb Params by ID
 *		 .
 * @action	delete	Delete Thumb Params by ID
 *		 .
 * @action	list	List Thumb Params by filter with paging support (By default - all system default params will be listed too)
 *		 .
 * @action	getByConversionProfileId	Get Thumb Params by Conversion Profile ID
 *		 .
*/
function KalturaThumbParamsService(client){
	this.init(client);
}
KalturaThumbParamsService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Thumb Params
 *		 .
 * @param	thumbParams	KalturaThumbParams		 (optional).
 * @return	KalturaThumbParams.
 */
KalturaThumbParamsService.prototype.add = function(callback, thumbParams){
	var kparams = new Object();
	this.client.addParam(kparams, "thumbParams", toParams(thumbParams));
	this.client.queueServiceActionCall("thumbparams", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Thumb Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaThumbParams.
 */
KalturaThumbParamsService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("thumbparams", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Thumb Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @param	thumbParams	KalturaThumbParams		 (optional).
 * @return	KalturaThumbParams.
 */
KalturaThumbParamsService.prototype.update = function(callback, id, thumbParams){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "thumbParams", toParams(thumbParams));
	this.client.queueServiceActionCall("thumbparams", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Thumb Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaThumbParamsService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("thumbparams", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Thumb Params by filter with paging support (By default - all system default params will be listed too)
 *		 .
 * @param	filter	KalturaThumbParamsFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaThumbParamsListResponse.
 */
KalturaThumbParamsService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("thumbparams", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Thumb Params by Conversion Profile ID
 *		 .
 * @param	conversionProfileId	int		 (optional).
 * @return	array.
 */
KalturaThumbParamsService.prototype.getByConversionProfileId = function(callback, conversionProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	this.client.queueServiceActionCall("thumbparams", "getByConversionProfileId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: uiConf.
 * The available service actions:
 * @action	add	UIConf Add action allows you to add a UIConf to Kaltura DB
 *		 .
 * @action	update	Update an existing UIConf
 *		 .
 * @action	get	Retrieve a UIConf by id
 *		 .
 * @action	delete	Delete an existing UIConf
 *		 .
 * @action	clone	Clone an existing UIConf
 *		 .
 * @action	listTemplates	retrieve a list of available template UIConfs
 *		 .
 * @action	list	Retrieve a list of available UIConfs
 *		 .
 * @action	getAvailableTypes	Retrieve a list of all available versions by object type
 *		 .
*/
function KalturaUiConfService(client){
	this.init(client);
}
KalturaUiConfService.inheritsFrom (KalturaServiceBase);
/**
 * UIConf Add action allows you to add a UIConf to Kaltura DB
 *		 .
 * @param	uiConf	KalturaUiConf		Mandatory input parameter of type KalturaUiConf (optional).
 * @return	KalturaUiConf.
 */
KalturaUiConfService.prototype.add = function(callback, uiConf){
	var kparams = new Object();
	this.client.addParam(kparams, "uiConf", toParams(uiConf));
	this.client.queueServiceActionCall("uiconf", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing UIConf
 *		 .
 * @param	id	int		 (optional).
 * @param	uiConf	KalturaUiConf		 (optional).
 * @return	KalturaUiConf.
 */
KalturaUiConfService.prototype.update = function(callback, id, uiConf){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "uiConf", toParams(uiConf));
	this.client.queueServiceActionCall("uiconf", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a UIConf by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaUiConf.
 */
KalturaUiConfService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("uiconf", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an existing UIConf
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaUiConfService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("uiconf", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Clone an existing UIConf
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaUiConf.
 */
KalturaUiConfService.prototype.cloneAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("uiconf", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * retrieve a list of available template UIConfs
 *		 .
 * @param	filter	KalturaUiConfFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaUiConfListResponse.
 */
KalturaUiConfService.prototype.listTemplates = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("uiconf", "listTemplates", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a list of available UIConfs
 *		 .
 * @param	filter	KalturaUiConfFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaUiConfListResponse.
 */
KalturaUiConfService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("uiconf", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a list of all available versions by object type
 *		 .
 * @return	array.
 */
KalturaUiConfService.prototype.getAvailableTypes = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("uiconf", "getAvailableTypes", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: upload.
 * The available service actions:
 * @action	upload	.
 * @action	getUploadedFileTokenByFileName	.
*/
function KalturaUploadService(client){
	this.init(client);
}
KalturaUploadService.inheritsFrom (KalturaServiceBase);
/**
 * .
 * @param	fileData	file		The file data (optional).
 * @return	string.
 */
KalturaUploadService.prototype.upload = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("upload", "upload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	fileName	string		 (optional).
 * @return	KalturaUploadResponse.
 */
KalturaUploadService.prototype.getUploadedFileTokenByFileName = function(callback, fileName){
	var kparams = new Object();
	this.client.addParam(kparams, "fileName", fileName);
	this.client.queueServiceActionCall("upload", "getUploadedFileTokenByFileName", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: uploadToken.
 * The available service actions:
 * @action	add	Adds new upload token to upload a file
 *		 .
 * @action	get	Get upload token by id
 *		 .
 * @action	upload	Upload a file using the upload token id, returns an error on failure (an exception will be thrown when using one of the Kaltura clients) 
 *		 .
 * @action	delete	Deletes the upload token by upload token id
 *		 .
 * @action	list	List upload token by filter with pager support. 
 *		 When using a user session the service will be restricted to users objects only.
 *		 .
*/
function KalturaUploadTokenService(client){
	this.init(client);
}
KalturaUploadTokenService.inheritsFrom (KalturaServiceBase);
/**
 * Adds new upload token to upload a file
 *		 .
 * @param	uploadToken	KalturaUploadToken		 (optional, default: null).
 * @return	KalturaUploadToken.
 */
KalturaUploadTokenService.prototype.add = function(callback, uploadToken){
	if(!uploadToken)
		uploadToken = null;
	var kparams = new Object();
	if (uploadToken != null)
		this.client.addParam(kparams, "uploadToken", toParams(uploadToken));
	this.client.queueServiceActionCall("uploadtoken", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get upload token by id
 *		 .
 * @param	uploadTokenId	string		 (optional).
 * @return	KalturaUploadToken.
 */
KalturaUploadTokenService.prototype.get = function(callback, uploadTokenId){
	var kparams = new Object();
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.queueServiceActionCall("uploadtoken", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Upload a file using the upload token id, returns an error on failure (an exception will be thrown when using one of the Kaltura clients) 
 *		 .
 * @param	uploadTokenId	string		 (optional).
 * @param	fileData	file		 (optional).
 * @param	resume	bool		 (optional, default: false).
 * @param	finalChunk	bool		 (optional, default: true).
 * @param	resumeAt	float		 (optional, default: -1).
 * @return	KalturaUploadToken.
 */
KalturaUploadTokenService.prototype.upload = function(callback, uploadTokenId, fileData, resume, finalChunk, resumeAt){
	if(!resume)
		resume = false;
	if(!finalChunk)
		finalChunk = true;
	if(!resumeAt)
		resumeAt = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.addParam(kparams, "resume", resume);
	this.client.addParam(kparams, "finalChunk", finalChunk);
	this.client.addParam(kparams, "resumeAt", resumeAt);
	this.client.queueServiceActionCall("uploadtoken", "upload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Deletes the upload token by upload token id
 *		 .
 * @param	uploadTokenId	string		 (optional).
 * @return	.
 */
KalturaUploadTokenService.prototype.deleteAction = function(callback, uploadTokenId){
	var kparams = new Object();
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.queueServiceActionCall("uploadtoken", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List upload token by filter with pager support. 
 *		 When using a user session the service will be restricted to users objects only.
 *		 .
 * @param	filter	KalturaUploadTokenFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaUploadTokenListResponse.
 */
KalturaUploadTokenService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("uploadtoken", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: userEntry.
 * The available service actions:
 * @action	add	Adds a user_entry to the Kaltura DB.
 *		 .
 * @action	update	.
 * @action	delete	.
 * @action	list	.
 * @action	get	.
 * @action	submitQuiz	Submits the quiz so that it's status will be submitted and calculates the score for the quiz
 *		 .
*/
function KalturaUserEntryService(client){
	this.init(client);
}
KalturaUserEntryService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a user_entry to the Kaltura DB.
 *		 .
 * @param	userEntry	KalturaUserEntry		 (optional).
 * @return	KalturaUserEntry.
 */
KalturaUserEntryService.prototype.add = function(callback, userEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "userEntry", toParams(userEntry));
	this.client.queueServiceActionCall("userentry", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @param	userEntry	KalturaUserEntry		 (optional).
 * @return	.
 */
KalturaUserEntryService.prototype.update = function(callback, id, userEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "userEntry", toParams(userEntry));
	this.client.queueServiceActionCall("userentry", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @return	KalturaUserEntry.
 */
KalturaUserEntryService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("userentry", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaUserEntryFilter		 (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaUserEntryListResponse.
 */
KalturaUserEntryService.prototype.listAction = function(callback, filter, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("userentry", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	string		 (optional).
 * @return	KalturaUserEntry.
 */
KalturaUserEntryService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("userentry", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Submits the quiz so that it's status will be submitted and calculates the score for the quiz
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaQuizUserEntry.
 */
KalturaUserEntryService.prototype.submitQuiz = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("userentry", "submitQuiz", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: userRole.
 * The available service actions:
 * @action	add	Adds a new user role object to the account.
 *		 .
 * @action	get	Retrieves a user role object using its ID.
 *		 .
 * @action	update	Updates an existing user role object.
 *		 .
 * @action	delete	Deletes an existing user role object.
 *		 .
 * @action	list	Lists user role objects that are associated with an account.
 *		 Blocked user roles are listed unless you use a filter to exclude them.
 *		 Deleted user roles are not listed unless you use a filter to include them.
 *		 .
 * @action	clone	Creates a new user role object that is a duplicate of an existing role.
 *		 .
*/
function KalturaUserRoleService(client){
	this.init(client);
}
KalturaUserRoleService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a new user role object to the account.
 *		 .
 * @param	userRole	KalturaUserRole		A new role (optional).
 * @return	KalturaUserRole.
 */
KalturaUserRoleService.prototype.add = function(callback, userRole){
	var kparams = new Object();
	this.client.addParam(kparams, "userRole", toParams(userRole));
	this.client.queueServiceActionCall("userrole", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieves a user role object using its ID.
 *		 .
 * @param	userRoleId	int		The user role's unique identifier (optional).
 * @return	KalturaUserRole.
 */
KalturaUserRoleService.prototype.get = function(callback, userRoleId){
	var kparams = new Object();
	this.client.addParam(kparams, "userRoleId", userRoleId);
	this.client.queueServiceActionCall("userrole", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Updates an existing user role object.
 *		 .
 * @param	userRoleId	int		The user role's unique identifier (optional).
 * @param	userRole	KalturaUserRole		Id The user role's unique identifier (optional).
 * @return	KalturaUserRole.
 */
KalturaUserRoleService.prototype.update = function(callback, userRoleId, userRole){
	var kparams = new Object();
	this.client.addParam(kparams, "userRoleId", userRoleId);
	this.client.addParam(kparams, "userRole", toParams(userRole));
	this.client.queueServiceActionCall("userrole", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Deletes an existing user role object.
 *		 .
 * @param	userRoleId	int		The user role's unique identifier (optional).
 * @return	KalturaUserRole.
 */
KalturaUserRoleService.prototype.deleteAction = function(callback, userRoleId){
	var kparams = new Object();
	this.client.addParam(kparams, "userRoleId", userRoleId);
	this.client.queueServiceActionCall("userrole", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Lists user role objects that are associated with an account.
 *		 Blocked user roles are listed unless you use a filter to exclude them.
 *		 Deleted user roles are not listed unless you use a filter to include them.
 *		 .
 * @param	filter	KalturaUserRoleFilter		A filter used to exclude specific types of user roles (optional, default: null).
 * @param	pager	KalturaFilterPager		A limit for the number of records to display on a page (optional, default: null).
 * @return	KalturaUserRoleListResponse.
 */
KalturaUserRoleService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("userrole", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Creates a new user role object that is a duplicate of an existing role.
 *		 .
 * @param	userRoleId	int		The user role's unique identifier (optional).
 * @return	KalturaUserRole.
 */
KalturaUserRoleService.prototype.cloneAction = function(callback, userRoleId){
	var kparams = new Object();
	this.client.addParam(kparams, "userRoleId", userRoleId);
	this.client.queueServiceActionCall("userrole", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: user.
 * The available service actions:
 * @action	add	Adds a new user to an existing account in the Kaltura database.
 *		 Input param $id is the unique identifier in the partner's system.
 *		 .
 * @action	update	Updates an existing user object.
 *		 You can also use this action to update the userId.
 *		 .
 * @action	get	Retrieves a user object for a specified user ID.
 *		 .
 * @action	getByLoginId	Retrieves a user object for a user's login ID and partner ID.
 *		 A login ID is the email address used by a user to log into the system.
 *		 .
 * @action	delete	Deletes a user from a partner account.
 *		 .
 * @action	list	Lists user objects that are associated with an account.
 *		 Blocked users are listed unless you use a filter to exclude them.
 *		 Deleted users are not listed unless you use a filter to include them.
 *		 .
 * @action	notifyBan	Notifies that a user is banned from an account.
 *		 .
 * @action	login	Logs a user into a partner account with a partner ID, a partner user ID (puser), and a user password.
 *		 .
 * @action	loginByLoginId	Logs a user into a partner account with a user login ID and a user password.
 *		 .
 * @action	updateLoginData	Updates a user's login data: email, password, name.
 *		 .
 * @action	resetPassword	Reset user's password and send the user an email to generate a new one.
 *		 .
 * @action	setInitialPassword	Set initial users password
 *		 .
 * @action	enableLogin	Enables a user to log into a partner account using an email address and a password
 *		 .
 * @action	disableLogin	Disables a user's ability to log into a partner account using an email address and a password.
 *		 You may use either a userId or a loginId parameter for this action.
 *		 .
 * @action	index	Index an entry by id.
 *		 .
 * @action	addFromBulkUpload	.
 * @action	checkLoginDataExists	Action which checks whther user login 
 *	     .
*/
function KalturaUserService(client){
	this.init(client);
}
KalturaUserService.inheritsFrom (KalturaServiceBase);
/**
 * Adds a new user to an existing account in the Kaltura database.
 *		 Input param $id is the unique identifier in the partner's system.
 *		 .
 * @param	user	KalturaUser		The new user (optional).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.add = function(callback, user){
	var kparams = new Object();
	this.client.addParam(kparams, "user", toParams(user));
	this.client.queueServiceActionCall("user", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Updates an existing user object.
 *		 You can also use this action to update the userId.
 *		 .
 * @param	userId	string		The user's unique identifier in the partner's system (optional).
 * @param	user	KalturaUser		Id The user's unique identifier in the partner's system (optional).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.update = function(callback, userId, user){
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "user", toParams(user));
	this.client.queueServiceActionCall("user", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieves a user object for a specified user ID.
 *		 .
 * @param	userId	string		The user's unique identifier in the partner's system (optional, default: null).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.get = function(callback, userId){
	if(!userId)
		userId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("user", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieves a user object for a user's login ID and partner ID.
 *		 A login ID is the email address used by a user to log into the system.
 *		 .
 * @param	loginId	string		The user's email address that identifies the user for login (optional).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.getByLoginId = function(callback, loginId){
	var kparams = new Object();
	this.client.addParam(kparams, "loginId", loginId);
	this.client.queueServiceActionCall("user", "getByLoginId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Deletes a user from a partner account.
 *		 .
 * @param	userId	string		The user's unique identifier in the partner's system (optional).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.deleteAction = function(callback, userId){
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("user", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Lists user objects that are associated with an account.
 *		 Blocked users are listed unless you use a filter to exclude them.
 *		 Deleted users are not listed unless you use a filter to include them.
 *		 .
 * @param	filter	KalturaUserFilter		A filter used to exclude specific types of users (optional, default: null).
 * @param	pager	KalturaFilterPager		A limit for the number of records to display on a page (optional, default: null).
 * @return	KalturaUserListResponse.
 */
KalturaUserService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("user", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Notifies that a user is banned from an account.
 *		 .
 * @param	userId	string		The user's unique identifier in the partner's system (optional).
 * @return	.
 */
KalturaUserService.prototype.notifyBan = function(callback, userId){
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("user", "notifyBan", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Logs a user into a partner account with a partner ID, a partner user ID (puser), and a user password.
 *		 .
 * @param	partnerId	int		The identifier of the partner account (optional).
 * @param	userId	string		The user's unique identifier in the partner's system (optional).
 * @param	password	string		The user's password (optional).
 * @param	expiry	int		The requested time (in seconds) before the generated KS expires (By default, a KS expires after 24 hours). (optional, default: 86400).
 * @param	privileges	string		Special privileges (optional, default: *).
 * @return	string.
 */
KalturaUserService.prototype.login = function(callback, partnerId, userId, password, expiry, privileges){
	if(!expiry)
		expiry = 86400;
	if(!privileges)
		privileges = "*";
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "password", password);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.addParam(kparams, "privileges", privileges);
	this.client.queueServiceActionCall("user", "login", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Logs a user into a partner account with a user login ID and a user password.
 *		 .
 * @param	loginId	string		The user's email address that identifies the user for login (optional).
 * @param	password	string		The user's password (optional).
 * @param	partnerId	int		The identifier of the partner account (optional, default: null).
 * @param	expiry	int		The requested time (in seconds) before the generated KS expires (By default, a KS expires after 24 hours). (optional, default: 86400).
 * @param	privileges	string		Special privileges (optional, default: *).
 * @return	string.
 */
KalturaUserService.prototype.loginByLoginId = function(callback, loginId, password, partnerId, expiry, privileges){
	if(!partnerId)
		partnerId = null;
	if(!expiry)
		expiry = 86400;
	if(!privileges)
		privileges = "*";
	var kparams = new Object();
	this.client.addParam(kparams, "loginId", loginId);
	this.client.addParam(kparams, "password", password);
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "expiry", expiry);
	this.client.addParam(kparams, "privileges", privileges);
	this.client.queueServiceActionCall("user", "loginByLoginId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Updates a user's login data: email, password, name.
 *		 .
 * @param	oldLoginId	string		The user's current email address that identified the user for login (optional).
 * @param	password	string		The user's current email address that identified the user for login (optional).
 * @param	newLoginId	string		Optional, The user's email address that will identify the user for login (optional).
 * @param	newPassword	string		Optional, The user's new password (optional).
 * @param	newFirstName	string		Optional, The user's new first name (optional, default: null).
 * @param	newLastName	string		Optional, The user's new last name (optional, default: null).
 * @return	.
 */
KalturaUserService.prototype.updateLoginData = function(callback, oldLoginId, password, newLoginId, newPassword, newFirstName, newLastName){
	if(!newLoginId)
		newLoginId = "";
	if(!newPassword)
		newPassword = "";
	if(!newFirstName)
		newFirstName = null;
	if(!newLastName)
		newLastName = null;
	var kparams = new Object();
	this.client.addParam(kparams, "oldLoginId", oldLoginId);
	this.client.addParam(kparams, "password", password);
	this.client.addParam(kparams, "newLoginId", newLoginId);
	this.client.addParam(kparams, "newPassword", newPassword);
	this.client.addParam(kparams, "newFirstName", newFirstName);
	this.client.addParam(kparams, "newLastName", newLastName);
	this.client.queueServiceActionCall("user", "updateLoginData", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Reset user's password and send the user an email to generate a new one.
 *		 .
 * @param	email	string		The user's email address (login email) (optional).
 * @return	.
 */
KalturaUserService.prototype.resetPassword = function(callback, email){
	var kparams = new Object();
	this.client.addParam(kparams, "email", email);
	this.client.queueServiceActionCall("user", "resetPassword", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Set initial users password
 *		 .
 * @param	hashKey	string		The hash key used to identify the user (retrieved by email) (optional).
 * @param	newPassword	string		The new password to set for the user (optional).
 * @return	.
 */
KalturaUserService.prototype.setInitialPassword = function(callback, hashKey, newPassword){
	var kparams = new Object();
	this.client.addParam(kparams, "hashKey", hashKey);
	this.client.addParam(kparams, "newPassword", newPassword);
	this.client.queueServiceActionCall("user", "setInitialPassword", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Enables a user to log into a partner account using an email address and a password
 *		 .
 * @param	userId	string		The user's unique identifier in the partner's system (optional).
 * @param	loginId	string		The user's email address that identifies the user for login (optional).
 * @param	password	string		The user's password (optional, default: null).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.enableLogin = function(callback, userId, loginId, password){
	if(!password)
		password = null;
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "loginId", loginId);
	this.client.addParam(kparams, "password", password);
	this.client.queueServiceActionCall("user", "enableLogin", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Disables a user's ability to log into a partner account using an email address and a password.
 *		 You may use either a userId or a loginId parameter for this action.
 *		 .
 * @param	userId	string		The user's unique identifier in the partner's system (optional, default: null).
 * @param	loginId	string		The user's email address that identifies the user for login (optional, default: null).
 * @return	KalturaUser.
 */
KalturaUserService.prototype.disableLogin = function(callback, userId, loginId){
	if(!userId)
		userId = null;
	if(!loginId)
		loginId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "loginId", loginId);
	this.client.queueServiceActionCall("user", "disableLogin", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Index an entry by id.
 *		 .
 * @param	id	string		 (optional).
 * @param	shouldUpdate	bool		 (optional, default: true).
 * @return	string.
 */
KalturaUserService.prototype.index = function(callback, id, shouldUpdate){
	if(!shouldUpdate)
		shouldUpdate = true;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "shouldUpdate", shouldUpdate);
	this.client.queueServiceActionCall("user", "index", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	fileData	file		 (optional).
 * @param	bulkUploadData	KalturaBulkUploadJobData		 (optional, default: null).
 * @param	bulkUploadUserData	KalturaBulkUploadUserData		 (optional, default: null).
 * @return	KalturaBulkUpload.
 */
KalturaUserService.prototype.addFromBulkUpload = function(callback, fileData, bulkUploadData, bulkUploadUserData){
	if(!bulkUploadData)
		bulkUploadData = null;
	if(!bulkUploadUserData)
		bulkUploadUserData = null;
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	if (bulkUploadData != null)
		this.client.addParam(kparams, "bulkUploadData", toParams(bulkUploadData));
	if (bulkUploadUserData != null)
		this.client.addParam(kparams, "bulkUploadUserData", toParams(bulkUploadUserData));
	this.client.queueServiceActionCall("user", "addFromBulkUpload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Action which checks whther user login 
 *	     .
 * @param	filter	KalturaUserLoginDataFilter		 (optional).
 * @return	bool.
 */
KalturaUserService.prototype.checkLoginDataExists = function(callback, filter){
	var kparams = new Object();
	this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("user", "checkLoginDataExists", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: widget.
 * The available service actions:
 * @action	add	Add new widget, can be attached to entry or kshow
 *		 SourceWidget is ignored.
 *		 .
 * @action	update	Update exisiting widget
 *	 	 .
 * @action	get	Get widget by id
 *		 .
 * @action	clone	Add widget based on existing widget.
 *		 Must provide valid sourceWidgetId
 *		 .
 * @action	list	Retrieve a list of available widget depends on the filter given
 *		 .
*/
function KalturaWidgetService(client){
	this.init(client);
}
KalturaWidgetService.inheritsFrom (KalturaServiceBase);
/**
 * Add new widget, can be attached to entry or kshow
 *		 SourceWidget is ignored.
 *		 .
 * @param	widget	KalturaWidget		 (optional).
 * @return	KalturaWidget.
 */
KalturaWidgetService.prototype.add = function(callback, widget){
	var kparams = new Object();
	this.client.addParam(kparams, "widget", toParams(widget));
	this.client.queueServiceActionCall("widget", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update exisiting widget
 *	 	 .
 * @param	id	string		 (optional).
 * @param	widget	KalturaWidget		 (optional).
 * @return	KalturaWidget.
 */
KalturaWidgetService.prototype.update = function(callback, id, widget){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "widget", toParams(widget));
	this.client.queueServiceActionCall("widget", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get widget by id
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaWidget.
 */
KalturaWidgetService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("widget", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add widget based on existing widget.
 *		 Must provide valid sourceWidgetId
 *		 .
 * @param	widget	KalturaWidget		 (optional).
 * @return	KalturaWidget.
 */
KalturaWidgetService.prototype.cloneAction = function(callback, widget){
	var kparams = new Object();
	this.client.addParam(kparams, "widget", toParams(widget));
	this.client.queueServiceActionCall("widget", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a list of available widget depends on the filter given
 *		 .
 * @param	filter	KalturaWidgetFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaWidgetListResponse.
 */
KalturaWidgetService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("widget", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: xInternal.
 * The available service actions:
 * @action	xAddBulkDownload	Creates new download job for multiple entry ids (comma separated), an email will be sent when the job is done
 *		 This sevice support the following entries: 
 *		 - MediaEntry
 *		 - Video will be converted using the flavor params id
 *		 - Audio will be downloaded as MP3
 *		 - Image will be downloaded as Jpeg
 *		 - MixEntry will be flattened using the flavor params id
 *		 - Other entry types are not supported
 *		 Returns the admin email that the email message will be sent to 
 *		 .
*/
function KalturaXInternalService(client){
	this.init(client);
}
KalturaXInternalService.inheritsFrom (KalturaServiceBase);
/**
 * Creates new download job for multiple entry ids (comma separated), an email will be sent when the job is done
 *		 This sevice support the following entries: 
 *		 - MediaEntry
 *		 - Video will be converted using the flavor params id
 *		 - Audio will be downloaded as MP3
 *		 - Image will be downloaded as Jpeg
 *		 - MixEntry will be flattened using the flavor params id
 *		 - Other entry types are not supported
 *		 Returns the admin email that the email message will be sent to 
 *		 .
 * @param	entryIds	string		Comma separated list of entry ids (optional).
 * @param	flavorParamsId	string		 (optional).
 * @return	string.
 */
KalturaXInternalService.prototype.xAddBulkDownload = function(callback, entryIds, flavorParamsId){
	if(!flavorParamsId)
		flavorParamsId = "";
	var kparams = new Object();
	this.client.addParam(kparams, "entryIds", entryIds);
	this.client.addParam(kparams, "flavorParamsId", flavorParamsId);
	this.client.queueServiceActionCall("xinternal", "xAddBulkDownload", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: metadata.
 * The available service actions:
 * @action	add	Allows you to add a metadata object and metadata content associated with Kaltura object
 *		 .
 * @action	addFromFile	Allows you to add a metadata object and metadata file associated with Kaltura object
 *		 .
 * @action	addFromUrl	Allows you to add a metadata xml data from remote URL
 *		 .
 * @action	addFromBulk	Allows you to add a metadata xml data from remote URL.
 *		 Enables different permissions than addFromUrl action.
 *		 .
 * @action	get	Retrieve a metadata object by id
 *		 .
 * @action	update	Update an existing metadata object with new XML content
 *		 .
 * @action	updateFromFile	Update an existing metadata object with new XML file
 *		 .
 * @action	list	List metadata objects by filter and pager
 *		 .
 * @action	delete	Delete an existing metadata
 *		 .
 * @action	invalidate	Mark existing metadata as invalid
 *		 Used by batch metadata transform
 *		 .
 * @action	index	Index metadata by id, will also index the related object
 *		 .
 * @action	updateFromXSL	Action transforms current metadata object XML using a provided XSL.
 *		 .
*/
function KalturaMetadataService(client){
	this.init(client);
}
KalturaMetadataService.inheritsFrom (KalturaServiceBase);
/**
 * Allows you to add a metadata object and metadata content associated with Kaltura object
 *		 .
 * @param	metadataProfileId	int		 (optional).
 * @param	objectType	string		 (optional, enum: KalturaMetadataObjectType).
 * @param	objectId	string		 (optional).
 * @param	xmlData	string		XML metadata (optional).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.add = function(callback, metadataProfileId, objectType, objectId, xmlData){
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfileId", metadataProfileId);
	this.client.addParam(kparams, "objectType", objectType);
	this.client.addParam(kparams, "objectId", objectId);
	this.client.addParam(kparams, "xmlData", xmlData);
	this.client.queueServiceActionCall("metadata_metadata", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add a metadata object and metadata file associated with Kaltura object
 *		 .
 * @param	metadataProfileId	int		 (optional).
 * @param	objectType	string		 (optional, enum: KalturaMetadataObjectType).
 * @param	objectId	string		 (optional).
 * @param	xmlFile	file		XML metadata (optional).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.addFromFile = function(callback, metadataProfileId, objectType, objectId, xmlFile){
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfileId", metadataProfileId);
	this.client.addParam(kparams, "objectType", objectType);
	this.client.addParam(kparams, "objectId", objectId);
	kfiles = new Object();
	this.client.addParam(kfiles, "xmlFile", xmlFile);
	this.client.queueServiceActionCall("metadata_metadata", "addFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add a metadata xml data from remote URL
 *		 .
 * @param	metadataProfileId	int		 (optional).
 * @param	objectType	string		 (optional, enum: KalturaMetadataObjectType).
 * @param	objectId	string		 (optional).
 * @param	url	string		XML metadata remote url (optional).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.addFromUrl = function(callback, metadataProfileId, objectType, objectId, url){
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfileId", metadataProfileId);
	this.client.addParam(kparams, "objectType", objectType);
	this.client.addParam(kparams, "objectId", objectId);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("metadata_metadata", "addFromUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add a metadata xml data from remote URL.
 *		 Enables different permissions than addFromUrl action.
 *		 .
 * @param	metadataProfileId	int		 (optional).
 * @param	objectType	string		 (optional, enum: KalturaMetadataObjectType).
 * @param	objectId	string		 (optional).
 * @param	url	string		XML metadata remote url (optional).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.addFromBulk = function(callback, metadataProfileId, objectType, objectId, url){
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfileId", metadataProfileId);
	this.client.addParam(kparams, "objectType", objectType);
	this.client.addParam(kparams, "objectId", objectId);
	this.client.addParam(kparams, "url", url);
	this.client.queueServiceActionCall("metadata_metadata", "addFromBulk", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a metadata object by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("metadata_metadata", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object with new XML content
 *		 .
 * @param	id	int		 (optional).
 * @param	xmlData	string		XML metadata (optional, default: null).
 * @param	version	int		Enable update only if the metadata object version did not change by other process (optional, default: null).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.update = function(callback, id, xmlData, version){
	if(!xmlData)
		xmlData = null;
	if(!version)
		version = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "xmlData", xmlData);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("metadata_metadata", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object with new XML file
 *		 .
 * @param	id	int		 (optional).
 * @param	xmlFile	file		XML metadata (optional, default: null).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.updateFromFile = function(callback, id, xmlFile){
	if(!xmlFile)
		xmlFile = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "xmlFile", xmlFile);
	this.client.queueServiceActionCall("metadata_metadata", "updateFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List metadata objects by filter and pager
 *		 .
 * @param	filter	KalturaMetadataFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaMetadataListResponse.
 */
KalturaMetadataService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("metadata_metadata", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an existing metadata
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaMetadataService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("metadata_metadata", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Mark existing metadata as invalid
 *		 Used by batch metadata transform
 *		 .
 * @param	id	int		 (optional).
 * @param	version	int		Enable update only if the metadata object version did not change by other process (optional, default: null).
 * @return	.
 */
KalturaMetadataService.prototype.invalidate = function(callback, id, version){
	if(!version)
		version = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("metadata_metadata", "invalidate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Index metadata by id, will also index the related object
 *		 .
 * @param	id	string		 (optional).
 * @param	shouldUpdate	bool		 (optional).
 * @return	int.
 */
KalturaMetadataService.prototype.index = function(callback, id, shouldUpdate){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "shouldUpdate", shouldUpdate);
	this.client.queueServiceActionCall("metadata_metadata", "index", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Action transforms current metadata object XML using a provided XSL.
 *		 .
 * @param	id	int		 (optional).
 * @param	xslFile	file		 (optional).
 * @return	KalturaMetadata.
 */
KalturaMetadataService.prototype.updateFromXSL = function(callback, id, xslFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "xslFile", xslFile);
	this.client.queueServiceActionCall("metadata_metadata", "updateFromXSL", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: metadataProfile.
 * The available service actions:
 * @action	add	Allows you to add a metadata profile object and metadata profile content associated with Kaltura object type
 *		 .
 * @action	addFromFile	Allows you to add a metadata profile object and metadata profile file associated with Kaltura object type
 *		 .
 * @action	get	Retrieve a metadata profile object by id
 *		 .
 * @action	update	Update an existing metadata object
 *		 .
 * @action	list	List metadata profile objects by filter and pager
 *		 .
 * @action	listFields	List metadata profile fields by metadata profile id
 *		 .
 * @action	delete	Delete an existing metadata profile
 *		 .
 * @action	revert	Update an existing metadata object definition file
 *		 .
 * @action	updateDefinitionFromFile	Update an existing metadata object definition file
 *		 .
 * @action	updateViewsFromFile	Update an existing metadata object views file
 *		 .
 * @action	updateTransformationFromFile	Update an existing metadata object xslt file
 *		 .
*/
function KalturaMetadataProfileService(client){
	this.init(client);
}
KalturaMetadataProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Allows you to add a metadata profile object and metadata profile content associated with Kaltura object type
 *		 .
 * @param	metadataProfile	KalturaMetadataProfile		 (optional).
 * @param	xsdData	string		XSD metadata definition (optional).
 * @param	viewsData	string		UI views definition (optional, default: null).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.add = function(callback, metadataProfile, xsdData, viewsData){
	if(!viewsData)
		viewsData = null;
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfile", toParams(metadataProfile));
	this.client.addParam(kparams, "xsdData", xsdData);
	this.client.addParam(kparams, "viewsData", viewsData);
	this.client.queueServiceActionCall("metadata_metadataprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add a metadata profile object and metadata profile file associated with Kaltura object type
 *		 .
 * @param	metadataProfile	KalturaMetadataProfile		 (optional).
 * @param	xsdFile	file		XSD metadata definition (optional).
 * @param	viewsFile	file		UI views definition (optional, default: null).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.addFromFile = function(callback, metadataProfile, xsdFile, viewsFile){
	if(!viewsFile)
		viewsFile = null;
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfile", toParams(metadataProfile));
	kfiles = new Object();
	this.client.addParam(kfiles, "xsdFile", xsdFile);
	this.client.addParam(kfiles, "viewsFile", viewsFile);
	this.client.queueServiceActionCall("metadata_metadataprofile", "addFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a metadata profile object by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("metadata_metadataprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object
 *		 .
 * @param	id	int		 (optional).
 * @param	metadataProfile	KalturaMetadataProfile		 (optional).
 * @param	xsdData	string		XSD metadata definition (optional, default: null).
 * @param	viewsData	string		UI views definition (optional, default: null).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.update = function(callback, id, metadataProfile, xsdData, viewsData){
	if(!xsdData)
		xsdData = null;
	if(!viewsData)
		viewsData = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "metadataProfile", toParams(metadataProfile));
	this.client.addParam(kparams, "xsdData", xsdData);
	this.client.addParam(kparams, "viewsData", viewsData);
	this.client.queueServiceActionCall("metadata_metadataprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List metadata profile objects by filter and pager
 *		 .
 * @param	filter	KalturaMetadataProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaMetadataProfileListResponse.
 */
KalturaMetadataProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("metadata_metadataprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List metadata profile fields by metadata profile id
 *		 .
 * @param	metadataProfileId	int		 (optional).
 * @return	KalturaMetadataProfileFieldListResponse.
 */
KalturaMetadataProfileService.prototype.listFields = function(callback, metadataProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "metadataProfileId", metadataProfileId);
	this.client.queueServiceActionCall("metadata_metadataprofile", "listFields", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an existing metadata profile
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaMetadataProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("metadata_metadataprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object definition file
 *		 .
 * @param	id	int		 (optional).
 * @param	toVersion	int		 (optional).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.revert = function(callback, id, toVersion){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "toVersion", toVersion);
	this.client.queueServiceActionCall("metadata_metadataprofile", "revert", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object definition file
 *		 .
 * @param	id	int		 (optional).
 * @param	xsdFile	file		XSD metadata definition (optional).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.updateDefinitionFromFile = function(callback, id, xsdFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "xsdFile", xsdFile);
	this.client.queueServiceActionCall("metadata_metadataprofile", "updateDefinitionFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object views file
 *		 .
 * @param	id	int		 (optional).
 * @param	viewsFile	file		UI views file (optional).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.updateViewsFromFile = function(callback, id, viewsFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "viewsFile", viewsFile);
	this.client.queueServiceActionCall("metadata_metadataprofile", "updateViewsFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing metadata object xslt file
 *		 .
 * @param	id	int		 (optional).
 * @param	xsltFile	file		XSLT file, will be executed on every metadata add/update (optional).
 * @return	KalturaMetadataProfile.
 */
KalturaMetadataProfileService.prototype.updateTransformationFromFile = function(callback, id, xsltFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "xsltFile", xsltFile);
	this.client.queueServiceActionCall("metadata_metadataprofile", "updateTransformationFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: documents.
 * The available service actions:
 * @action	addFromUploadedFile	Add new document entry after the specific document file was uploaded and the upload token id exists
 *		 .
 * @action	addFromEntry	Copy entry into new entry
 *		 .
 * @action	addFromFlavorAsset	Copy flavor asset into new entry
 *		 .
 * @action	convert	Convert entry
 *		 .
 * @action	get	Get document entry by ID.
 *		 .
 * @action	update	Update document entry. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a document entry.
 *		 .
 * @action	list	List document entries by filter with paging support.
 *		 .
 * @action	upload	Upload a document file to Kaltura, then the file can be used to create a document entry. 
 *		 .
 * @action	convertPptToSwf	This will queue a batch job for converting the document file to swf
 *		 Returns the URL where the new swf will be available 
 *		 .
 * @action	updateContent	Replace content associated with the given document entry.
 *		 .
 * @action	approveReplace	Approves document replacement
 *		 .
 * @action	cancelReplace	Cancels document replacement
 *		 .
*/
function KalturaDocumentsService(client){
	this.init(client);
}
KalturaDocumentsService.inheritsFrom (KalturaServiceBase);
/**
 * Add new document entry after the specific document file was uploaded and the upload token id exists
 *		 .
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata (optional).
 * @param	uploadTokenId	string		Upload token id (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.addFromUploadedFile = function(callback, documentEntry, uploadTokenId){
	var kparams = new Object();
	this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.addParam(kparams, "uploadTokenId", uploadTokenId);
	this.client.queueServiceActionCall("document_documents", "addFromUploadedFile", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy entry into new entry
 *		 .
 * @param	sourceEntryId	string		Document entry id to copy from (optional).
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata (optional, default: null).
 * @param	sourceFlavorParamsId	int		The flavor to be used as the new entry source, source flavor will be used if not specified (optional, default: null).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.addFromEntry = function(callback, sourceEntryId, documentEntry, sourceFlavorParamsId){
	if(!documentEntry)
		documentEntry = null;
	if(!sourceFlavorParamsId)
		sourceFlavorParamsId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "sourceEntryId", sourceEntryId);
	if (documentEntry != null)
		this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.addParam(kparams, "sourceFlavorParamsId", sourceFlavorParamsId);
	this.client.queueServiceActionCall("document_documents", "addFromEntry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Copy flavor asset into new entry
 *		 .
 * @param	sourceFlavorAssetId	string		Flavor asset id to be used as the new entry source (optional).
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata (optional, default: null).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.addFromFlavorAsset = function(callback, sourceFlavorAssetId, documentEntry){
	if(!documentEntry)
		documentEntry = null;
	var kparams = new Object();
	this.client.addParam(kparams, "sourceFlavorAssetId", sourceFlavorAssetId);
	if (documentEntry != null)
		this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.queueServiceActionCall("document_documents", "addFromFlavorAsset", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Convert entry
 *		 .
 * @param	entryId	string		Document entry id (optional).
 * @param	conversionProfileId	int		 (optional, default: null).
 * @param	dynamicConversionAttributes	array		 (optional, default: null).
 * @return	bigint.
 */
KalturaDocumentsService.prototype.convert = function(callback, entryId, conversionProfileId, dynamicConversionAttributes){
	if(!conversionProfileId)
		conversionProfileId = null;
	if(!dynamicConversionAttributes)
		dynamicConversionAttributes = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	if(dynamicConversionAttributes != null)
	for(var index in dynamicConversionAttributes)
	{
		var obj = dynamicConversionAttributes[index];
		this.client.addParam(kparams, "dynamicConversionAttributes:" + index, toParams(obj));
	}
	this.client.queueServiceActionCall("document_documents", "convert", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get document entry by ID.
 *		 .
 * @param	entryId	string		Document entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("document_documents", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update document entry. Only the properties that were set will be updated.
 *		 .
 * @param	entryId	string		Document entry id to update (optional).
 * @param	documentEntry	KalturaDocumentEntry		Document entry metadata to update (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.update = function(callback, entryId, documentEntry){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "documentEntry", toParams(documentEntry));
	this.client.queueServiceActionCall("document_documents", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a document entry.
 *		 .
 * @param	entryId	string		Document entry id to delete (optional).
 * @return	.
 */
KalturaDocumentsService.prototype.deleteAction = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document_documents", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List document entries by filter with paging support.
 *		 .
 * @param	filter	KalturaDocumentEntryFilter		Document entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaDocumentListResponse.
 */
KalturaDocumentsService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("document_documents", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Upload a document file to Kaltura, then the file can be used to create a document entry. 
 *		 .
 * @param	fileData	file		The file data (optional).
 * @return	string.
 */
KalturaDocumentsService.prototype.upload = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("document_documents", "upload", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * This will queue a batch job for converting the document file to swf
 *		 Returns the URL where the new swf will be available 
 *		 .
 * @param	entryId	string		 (optional).
 * @return	string.
 */
KalturaDocumentsService.prototype.convertPptToSwf = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document_documents", "convertPptToSwf", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Replace content associated with the given document entry.
 *		 .
 * @param	entryId	string		document entry id to update (optional).
 * @param	resource	KalturaResource		Resource to be used to replace entry doc content (optional).
 * @param	conversionProfileId	int		The conversion profile id to be used on the entry (optional, default: null).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.updateContent = function(callback, entryId, resource, conversionProfileId){
	if(!conversionProfileId)
		conversionProfileId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "resource", toParams(resource));
	this.client.addParam(kparams, "conversionProfileId", conversionProfileId);
	this.client.queueServiceActionCall("document_documents", "updateContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Approves document replacement
 *		 .
 * @param	entryId	string		document entry id to replace (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.approveReplace = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document_documents", "approveReplace", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Cancels document replacement
 *		 .
 * @param	entryId	string		Document entry id to cancel (optional).
 * @return	KalturaDocumentEntry.
 */
KalturaDocumentsService.prototype.cancelReplace = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("document_documents", "cancelReplace", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: systemPartner.
 * The available service actions:
 * @action	get	Retrieve all info about partner
 *		 This service gets partner id as parameter and accessable to the admin console partner only
 *		 .
 * @action	getUsage	.
 * @action	list	.
 * @action	updateStatus	.
 * @action	getAdminSession	.
 * @action	updateConfiguration	.
 * @action	getConfiguration	.
 * @action	getPackages	.
 * @action	getPackagesClassOfService	.
 * @action	getPackagesVertical	.
 * @action	getPlayerEmbedCodeTypes	.
 * @action	getPlayerDeliveryTypes	.
 * @action	resetUserPassword	.
 * @action	listUserLoginData	.
*/
function KalturaSystemPartnerService(client){
	this.init(client);
}
KalturaSystemPartnerService.inheritsFrom (KalturaServiceBase);
/**
 * Retrieve all info about partner
 *		 This service gets partner id as parameter and accessable to the admin console partner only
 *		 .
 * @param	partnerId	int		X (optional).
 * @return	KalturaPartner.
 */
KalturaSystemPartnerService.prototype.get = function(callback, partnerId){
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.queueServiceActionCall("systempartner_systempartner", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	partnerFilter	KalturaPartnerFilter		 (optional, default: null).
 * @param	usageFilter	KalturaSystemPartnerUsageFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaSystemPartnerUsageListResponse.
 */
KalturaSystemPartnerService.prototype.getUsage = function(callback, partnerFilter, usageFilter, pager){
	if(!partnerFilter)
		partnerFilter = null;
	if(!usageFilter)
		usageFilter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (partnerFilter != null)
		this.client.addParam(kparams, "partnerFilter", toParams(partnerFilter));
	if (usageFilter != null)
		this.client.addParam(kparams, "usageFilter", toParams(usageFilter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("systempartner_systempartner", "getUsage", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaPartnerFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaPartnerListResponse.
 */
KalturaSystemPartnerService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("systempartner_systempartner", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	partnerId	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaPartnerStatus).
 * @param	reason	string		 (optional).
 * @return	.
 */
KalturaSystemPartnerService.prototype.updateStatus = function(callback, partnerId, status, reason){
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "status", status);
	this.client.addParam(kparams, "reason", reason);
	this.client.queueServiceActionCall("systempartner_systempartner", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	partnerId	int		 (optional).
 * @param	userId	string		 (optional, default: null).
 * @return	string.
 */
KalturaSystemPartnerService.prototype.getAdminSession = function(callback, partnerId, userId){
	if(!userId)
		userId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("systempartner_systempartner", "getAdminSession", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	partnerId	int		 (optional).
 * @param	configuration	KalturaSystemPartnerConfiguration		 (optional).
 * @return	.
 */
KalturaSystemPartnerService.prototype.updateConfiguration = function(callback, partnerId, configuration){
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "configuration", toParams(configuration));
	this.client.queueServiceActionCall("systempartner_systempartner", "updateConfiguration", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	partnerId	int		 (optional).
 * @return	KalturaSystemPartnerConfiguration.
 */
KalturaSystemPartnerService.prototype.getConfiguration = function(callback, partnerId){
	var kparams = new Object();
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.queueServiceActionCall("systempartner_systempartner", "getConfiguration", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	array.
 */
KalturaSystemPartnerService.prototype.getPackages = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("systempartner_systempartner", "getPackages", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	array.
 */
KalturaSystemPartnerService.prototype.getPackagesClassOfService = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("systempartner_systempartner", "getPackagesClassOfService", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	array.
 */
KalturaSystemPartnerService.prototype.getPackagesVertical = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("systempartner_systempartner", "getPackagesVertical", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	array.
 */
KalturaSystemPartnerService.prototype.getPlayerEmbedCodeTypes = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("systempartner_systempartner", "getPlayerEmbedCodeTypes", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	array.
 */
KalturaSystemPartnerService.prototype.getPlayerDeliveryTypes = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("systempartner_systempartner", "getPlayerDeliveryTypes", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	userId	string		 (optional).
 * @param	partnerId	int		 (optional).
 * @param	newPassword	string		 (optional).
 * @return	.
 */
KalturaSystemPartnerService.prototype.resetUserPassword = function(callback, userId, partnerId, newPassword){
	var kparams = new Object();
	this.client.addParam(kparams, "userId", userId);
	this.client.addParam(kparams, "partnerId", partnerId);
	this.client.addParam(kparams, "newPassword", newPassword);
	this.client.queueServiceActionCall("systempartner_systempartner", "resetUserPassword", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaUserLoginDataFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaUserLoginDataListResponse.
 */
KalturaSystemPartnerService.prototype.listUserLoginData = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("systempartner_systempartner", "listUserLoginData", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: entryAdmin.
 * The available service actions:
 * @action	get	Get base entry by ID with no filters.
 *		 .
 * @action	getByFlavorId	Get base entry by flavor ID with no filters.
 *		 .
 * @action	getTracks	Get base entry by ID with no filters.
 *		 .
*/
function KalturaEntryAdminService(client){
	this.init(client);
}
KalturaEntryAdminService.inheritsFrom (KalturaServiceBase);
/**
 * Get base entry by ID with no filters.
 *		 .
 * @param	entryId	string		Entry id (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaBaseEntry.
 */
KalturaEntryAdminService.prototype.get = function(callback, entryId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("adminconsole_entryadmin", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get base entry by flavor ID with no filters.
 *		 .
 * @param	flavorId	string		 (optional).
 * @param	version	int		Desired version of the data (optional, default: -1).
 * @return	KalturaBaseEntry.
 */
KalturaEntryAdminService.prototype.getByFlavorId = function(callback, flavorId, version){
	if(!version)
		version = -1;
	var kparams = new Object();
	this.client.addParam(kparams, "flavorId", flavorId);
	this.client.addParam(kparams, "version", version);
	this.client.queueServiceActionCall("adminconsole_entryadmin", "getByFlavorId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get base entry by ID with no filters.
 *		 .
 * @param	entryId	string		Entry id (optional).
 * @return	KalturaTrackEntryListResponse.
 */
KalturaEntryAdminService.prototype.getTracks = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("adminconsole_entryadmin", "getTracks", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: uiConfAdmin.
 * The available service actions:
 * @action	add	Adds new UIConf with no partner limitation
 *		 .
 * @action	update	Update an existing UIConf with no partner limitation
 *		 .
 * @action	get	Retrieve a UIConf by id with no partner limitation
 *		 .
 * @action	delete	Delete an existing UIConf with no partner limitation
 *		 .
 * @action	list	Retrieve a list of available UIConfs  with no partner limitation
 *		 .
*/
function KalturaUiConfAdminService(client){
	this.init(client);
}
KalturaUiConfAdminService.inheritsFrom (KalturaServiceBase);
/**
 * Adds new UIConf with no partner limitation
 *		 .
 * @param	uiConf	KalturaUiConfAdmin		 (optional).
 * @return	KalturaUiConfAdmin.
 */
KalturaUiConfAdminService.prototype.add = function(callback, uiConf){
	var kparams = new Object();
	this.client.addParam(kparams, "uiConf", toParams(uiConf));
	this.client.queueServiceActionCall("adminconsole_uiconfadmin", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing UIConf with no partner limitation
 *		 .
 * @param	id	int		 (optional).
 * @param	uiConf	KalturaUiConfAdmin		 (optional).
 * @return	KalturaUiConfAdmin.
 */
KalturaUiConfAdminService.prototype.update = function(callback, id, uiConf){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "uiConf", toParams(uiConf));
	this.client.queueServiceActionCall("adminconsole_uiconfadmin", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a UIConf by id with no partner limitation
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaUiConfAdmin.
 */
KalturaUiConfAdminService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("adminconsole_uiconfadmin", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an existing UIConf with no partner limitation
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaUiConfAdminService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("adminconsole_uiconfadmin", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a list of available UIConfs  with no partner limitation
 *		 .
 * @param	filter	KalturaUiConfFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaUiConfAdminListResponse.
 */
KalturaUiConfAdminService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("adminconsole_uiconfadmin", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: reportAdmin.
 * The available service actions:
 * @action	add	.
 * @action	get	.
 * @action	list	.
 * @action	update	.
 * @action	delete	.
 * @action	executeDebug	.
 * @action	getParameters	.
 * @action	getCsvUrl	.
*/
function KalturaReportAdminService(client){
	this.init(client);
}
KalturaReportAdminService.inheritsFrom (KalturaServiceBase);
/**
 * .
 * @param	report	KalturaReport		 (optional).
 * @return	KalturaReport.
 */
KalturaReportAdminService.prototype.add = function(callback, report){
	var kparams = new Object();
	this.client.addParam(kparams, "report", toParams(report));
	this.client.queueServiceActionCall("adminconsole_reportadmin", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @return	KalturaReport.
 */
KalturaReportAdminService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("adminconsole_reportadmin", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaReportFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaReportListResponse.
 */
KalturaReportAdminService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("adminconsole_reportadmin", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @param	report	KalturaReport		 (optional).
 * @return	KalturaReport.
 */
KalturaReportAdminService.prototype.update = function(callback, id, report){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "report", toParams(report));
	this.client.queueServiceActionCall("adminconsole_reportadmin", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaReportAdminService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("adminconsole_reportadmin", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @param	params	array		 (optional, default: null).
 * @return	KalturaReportResponse.
 */
KalturaReportAdminService.prototype.executeDebug = function(callback, id, params){
	if(!params)
		params = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	if(params != null)
	for(var index in params)
	{
		var obj = params[index];
		this.client.addParam(kparams, "params:" + index, toParams(obj));
	}
	this.client.queueServiceActionCall("adminconsole_reportadmin", "executeDebug", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @return	array.
 */
KalturaReportAdminService.prototype.getParameters = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("adminconsole_reportadmin", "getParameters", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		 (optional).
 * @param	reportPartnerId	int		 (optional).
 * @return	string.
 */
KalturaReportAdminService.prototype.getCsvUrl = function(callback, id, reportPartnerId){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "reportPartnerId", reportPartnerId);
	this.client.queueServiceActionCall("adminconsole_reportadmin", "getCsvUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: kalturaInternalToolsSystemHelper.
 * The available service actions:
 * @action	fromSecureString	KS from Secure String
 *		 .
 * @action	iptocountry	from ip to country
 *		 .
 * @action	getRemoteAddress	.
*/
function KalturaKalturaInternalToolsSystemHelperService(client){
	this.init(client);
}
KalturaKalturaInternalToolsSystemHelperService.inheritsFrom (KalturaServiceBase);
/**
 * KS from Secure String
 *		 .
 * @param	str	string		 (optional).
 * @return	KalturaInternalToolsSession.
 */
KalturaKalturaInternalToolsSystemHelperService.prototype.fromSecureString = function(callback, str){
	var kparams = new Object();
	this.client.addParam(kparams, "str", str);
	this.client.queueServiceActionCall("kalturainternaltools_kalturainternaltoolssystemhelper", "fromSecureString", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * from ip to country
 *		 .
 * @param	remote_addr	string		 (optional).
 * @return	string.
 */
KalturaKalturaInternalToolsSystemHelperService.prototype.iptocountry = function(callback, remote_addr){
	var kparams = new Object();
	this.client.addParam(kparams, "remote_addr", remote_addr);
	this.client.queueServiceActionCall("kalturainternaltools_kalturainternaltoolssystemhelper", "iptocountry", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @return	string.
 */
KalturaKalturaInternalToolsSystemHelperService.prototype.getRemoteAddress = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("kalturainternaltools_kalturainternaltoolssystemhelper", "getRemoteAddress", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: virusScanProfile.
 * The available service actions:
 * @action	list	List virus scan profile objects by filter and pager
 *		 .
 * @action	add	Allows you to add an virus scan profile object and virus scan profile content associated with Kaltura object
 *		 .
 * @action	get	Retrieve an virus scan profile object by id
 *		 .
 * @action	update	Update exisitng virus scan profile, it is possible to update the virus scan profile id too
 *		 .
 * @action	delete	Mark the virus scan profile as deleted
 *		 .
 * @action	scan	Scan flavor asset according to virus scan profile
 *		 .
*/
function KalturaVirusScanProfileService(client){
	this.init(client);
}
KalturaVirusScanProfileService.inheritsFrom (KalturaServiceBase);
/**
 * List virus scan profile objects by filter and pager
 *		 .
 * @param	filter	KalturaVirusScanProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaVirusScanProfileListResponse.
 */
KalturaVirusScanProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("virusscan_virusscanprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add an virus scan profile object and virus scan profile content associated with Kaltura object
 *		 .
 * @param	virusScanProfile	KalturaVirusScanProfile		 (optional).
 * @return	KalturaVirusScanProfile.
 */
KalturaVirusScanProfileService.prototype.add = function(callback, virusScanProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "virusScanProfile", toParams(virusScanProfile));
	this.client.queueServiceActionCall("virusscan_virusscanprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve an virus scan profile object by id
 *		 .
 * @param	virusScanProfileId	int		 (optional).
 * @return	KalturaVirusScanProfile.
 */
KalturaVirusScanProfileService.prototype.get = function(callback, virusScanProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "virusScanProfileId", virusScanProfileId);
	this.client.queueServiceActionCall("virusscan_virusscanprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update exisitng virus scan profile, it is possible to update the virus scan profile id too
 *		 .
 * @param	virusScanProfileId	int		 (optional).
 * @param	virusScanProfile	KalturaVirusScanProfile		Id (optional).
 * @return	KalturaVirusScanProfile.
 */
KalturaVirusScanProfileService.prototype.update = function(callback, virusScanProfileId, virusScanProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "virusScanProfileId", virusScanProfileId);
	this.client.addParam(kparams, "virusScanProfile", toParams(virusScanProfile));
	this.client.queueServiceActionCall("virusscan_virusscanprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Mark the virus scan profile as deleted
 *		 .
 * @param	virusScanProfileId	int		 (optional).
 * @return	KalturaVirusScanProfile.
 */
KalturaVirusScanProfileService.prototype.deleteAction = function(callback, virusScanProfileId){
	var kparams = new Object();
	this.client.addParam(kparams, "virusScanProfileId", virusScanProfileId);
	this.client.queueServiceActionCall("virusscan_virusscanprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Scan flavor asset according to virus scan profile
 *		 .
 * @param	flavorAssetId	string		 (optional).
 * @param	virusScanProfileId	int		 (optional, default: null).
 * @return	int.
 */
KalturaVirusScanProfileService.prototype.scan = function(callback, flavorAssetId, virusScanProfileId){
	if(!virusScanProfileId)
		virusScanProfileId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "flavorAssetId", flavorAssetId);
	this.client.addParam(kparams, "virusScanProfileId", virusScanProfileId);
	this.client.queueServiceActionCall("virusscan_virusscanprofile", "scan", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: distributionProfile.
 * The available service actions:
 * @action	add	Add new Distribution Profile
 *		 .
 * @action	get	Get Distribution Profile by id
 *		 .
 * @action	update	Update Distribution Profile by id
 *		 .
 * @action	updateStatus	Update Distribution Profile status by id
 *		 .
 * @action	delete	Delete Distribution Profile by id
 *		 .
 * @action	list	List all distribution providers
 *		 .
 * @action	listByPartner	.
*/
function KalturaDistributionProfileService(client){
	this.init(client);
}
KalturaDistributionProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Distribution Profile
 *		 .
 * @param	distributionProfile	KalturaDistributionProfile		 (optional).
 * @return	KalturaDistributionProfile.
 */
KalturaDistributionProfileService.prototype.add = function(callback, distributionProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "distributionProfile", toParams(distributionProfile));
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Distribution Profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaDistributionProfile.
 */
KalturaDistributionProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Distribution Profile by id
 *		 .
 * @param	id	int		 (optional).
 * @param	distributionProfile	KalturaDistributionProfile		 (optional).
 * @return	KalturaDistributionProfile.
 */
KalturaDistributionProfileService.prototype.update = function(callback, id, distributionProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "distributionProfile", toParams(distributionProfile));
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Distribution Profile status by id
 *		 .
 * @param	id	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaDistributionProfileStatus).
 * @return	KalturaDistributionProfile.
 */
KalturaDistributionProfileService.prototype.updateStatus = function(callback, id, status){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "status", status);
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Distribution Profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaDistributionProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all distribution providers
 *		 .
 * @param	filter	KalturaDistributionProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaDistributionProfileListResponse.
 */
KalturaDistributionProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaPartnerFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaDistributionProfileListResponse.
 */
KalturaDistributionProfileService.prototype.listByPartner = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("contentdistribution_distributionprofile", "listByPartner", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: entryDistribution.
 * The available service actions:
 * @action	add	Add new Entry Distribution
 *		 .
 * @action	get	Get Entry Distribution by id
 *		 .
 * @action	validate	Validates Entry Distribution by id for submission
 *		 .
 * @action	update	Update Entry Distribution by id
 *		 .
 * @action	delete	Delete Entry Distribution by id
 *		 .
 * @action	list	List all distribution providers
 *		 .
 * @action	submitAdd	Submits Entry Distribution to the remote destination
 *		 .
 * @action	submitUpdate	Submits Entry Distribution changes to the remote destination
 *		 .
 * @action	submitFetchReport	Submits Entry Distribution report request
 *		 .
 * @action	submitDelete	Deletes Entry Distribution from the remote destination
 *		 .
 * @action	retrySubmit	Retries last submit action
 *		 .
*/
function KalturaEntryDistributionService(client){
	this.init(client);
}
KalturaEntryDistributionService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Entry Distribution
 *		 .
 * @param	entryDistribution	KalturaEntryDistribution		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.add = function(callback, entryDistribution){
	var kparams = new Object();
	this.client.addParam(kparams, "entryDistribution", toParams(entryDistribution));
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Entry Distribution by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Validates Entry Distribution by id for submission
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.validate = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "validate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Entry Distribution by id
 *		 .
 * @param	id	int		 (optional).
 * @param	entryDistribution	KalturaEntryDistribution		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.update = function(callback, id, entryDistribution){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "entryDistribution", toParams(entryDistribution));
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Entry Distribution by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaEntryDistributionService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all distribution providers
 *		 .
 * @param	filter	KalturaEntryDistributionFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaEntryDistributionListResponse.
 */
KalturaEntryDistributionService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Submits Entry Distribution to the remote destination
 *		 .
 * @param	id	int		 (optional).
 * @param	submitWhenReady	bool		 (optional, default: false).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.submitAdd = function(callback, id, submitWhenReady){
	if(!submitWhenReady)
		submitWhenReady = false;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "submitWhenReady", submitWhenReady);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "submitAdd", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Submits Entry Distribution changes to the remote destination
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.submitUpdate = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "submitUpdate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Submits Entry Distribution report request
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.submitFetchReport = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "submitFetchReport", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Deletes Entry Distribution from the remote destination
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.submitDelete = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "submitDelete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retries last submit action
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEntryDistribution.
 */
KalturaEntryDistributionService.prototype.retrySubmit = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_entrydistribution", "retrySubmit", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: distributionProvider.
 * The available service actions:
 * @action	list	List all distribution providers
 *		 .
*/
function KalturaDistributionProviderService(client){
	this.init(client);
}
KalturaDistributionProviderService.inheritsFrom (KalturaServiceBase);
/**
 * List all distribution providers
 *		 .
 * @param	filter	KalturaDistributionProviderFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaDistributionProviderListResponse.
 */
KalturaDistributionProviderService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("contentdistribution_distributionprovider", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: genericDistributionProvider.
 * The available service actions:
 * @action	add	Add new Generic Distribution Provider
 *		 .
 * @action	get	Get Generic Distribution Provider by id
 *		 .
 * @action	update	Update Generic Distribution Provider by id
 *		 .
 * @action	delete	Delete Generic Distribution Provider by id
 *		 .
 * @action	list	List all distribution providers
 *		 .
*/
function KalturaGenericDistributionProviderService(client){
	this.init(client);
}
KalturaGenericDistributionProviderService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Generic Distribution Provider
 *		 .
 * @param	genericDistributionProvider	KalturaGenericDistributionProvider		 (optional).
 * @return	KalturaGenericDistributionProvider.
 */
KalturaGenericDistributionProviderService.prototype.add = function(callback, genericDistributionProvider){
	var kparams = new Object();
	this.client.addParam(kparams, "genericDistributionProvider", toParams(genericDistributionProvider));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovider", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Generic Distribution Provider by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaGenericDistributionProvider.
 */
KalturaGenericDistributionProviderService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovider", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Generic Distribution Provider by id
 *		 .
 * @param	id	int		 (optional).
 * @param	genericDistributionProvider	KalturaGenericDistributionProvider		 (optional).
 * @return	KalturaGenericDistributionProvider.
 */
KalturaGenericDistributionProviderService.prototype.update = function(callback, id, genericDistributionProvider){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "genericDistributionProvider", toParams(genericDistributionProvider));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovider", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Generic Distribution Provider by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaGenericDistributionProviderService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovider", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all distribution providers
 *		 .
 * @param	filter	KalturaGenericDistributionProviderFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaGenericDistributionProviderListResponse.
 */
KalturaGenericDistributionProviderService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovider", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: genericDistributionProviderAction.
 * The available service actions:
 * @action	add	Add new Generic Distribution Provider Action
 *		 .
 * @action	addMrssTransform	Add MRSS transform file to generic distribution provider action
 *		 .
 * @action	addMrssTransformFromFile	Add MRSS transform file to generic distribution provider action
 *		 .
 * @action	addMrssValidate	Add MRSS validate file to generic distribution provider action
 *		 .
 * @action	addMrssValidateFromFile	Add MRSS validate file to generic distribution provider action
 *		 .
 * @action	addResultsTransform	Add results transform file to generic distribution provider action
 *		 .
 * @action	addResultsTransformFromFile	Add MRSS transform file to generic distribution provider action
 *		 .
 * @action	get	Get Generic Distribution Provider Action by id
 *		 .
 * @action	getByProviderId	Get Generic Distribution Provider Action by provider id
 *		 .
 * @action	updateByProviderId	Update Generic Distribution Provider Action by provider id
 *		 .
 * @action	update	Update Generic Distribution Provider Action by id
 *		 .
 * @action	delete	Delete Generic Distribution Provider Action by id
 *		 .
 * @action	deleteByProviderId	Delete Generic Distribution Provider Action by provider id
 *		 .
 * @action	list	List all distribution providers
 *		 .
*/
function KalturaGenericDistributionProviderActionService(client){
	this.init(client);
}
KalturaGenericDistributionProviderActionService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Generic Distribution Provider Action
 *		 .
 * @param	genericDistributionProviderAction	KalturaGenericDistributionProviderAction		 (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.add = function(callback, genericDistributionProviderAction){
	var kparams = new Object();
	this.client.addParam(kparams, "genericDistributionProviderAction", toParams(genericDistributionProviderAction));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add MRSS transform file to generic distribution provider action
 *		 .
 * @param	id	int		the id of the generic distribution provider action (optional).
 * @param	xslData	string		XSL MRSS transformation data (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.addMrssTransform = function(callback, id, xslData){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "xslData", xslData);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "addMrssTransform", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add MRSS transform file to generic distribution provider action
 *		 .
 * @param	id	int		the id of the generic distribution provider action (optional).
 * @param	xslFile	file		XSL MRSS transformation file (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.addMrssTransformFromFile = function(callback, id, xslFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "xslFile", xslFile);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "addMrssTransformFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add MRSS validate file to generic distribution provider action
 *		 .
 * @param	id	int		the id of the generic distribution provider action (optional).
 * @param	xsdData	string		XSD MRSS validatation data (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.addMrssValidate = function(callback, id, xsdData){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "xsdData", xsdData);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "addMrssValidate", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add MRSS validate file to generic distribution provider action
 *		 .
 * @param	id	int		the id of the generic distribution provider action (optional).
 * @param	xsdFile	file		XSD MRSS validatation file (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.addMrssValidateFromFile = function(callback, id, xsdFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "xsdFile", xsdFile);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "addMrssValidateFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add results transform file to generic distribution provider action
 *		 .
 * @param	id	int		the id of the generic distribution provider action (optional).
 * @param	transformData	string		transformation data xsl, xPath or regex (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.addResultsTransform = function(callback, id, transformData){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "transformData", transformData);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "addResultsTransform", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Add MRSS transform file to generic distribution provider action
 *		 .
 * @param	id	int		the id of the generic distribution provider action (optional).
 * @param	transformFile	file		transformation file xsl, xPath or regex (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.addResultsTransformFromFile = function(callback, id, transformFile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	kfiles = new Object();
	this.client.addParam(kfiles, "transformFile", transformFile);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "addResultsTransformFromFile", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Generic Distribution Provider Action by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Generic Distribution Provider Action by provider id
 *		 .
 * @param	genericDistributionProviderId	int		 (optional).
 * @param	actionType	int		 (optional, enum: KalturaDistributionAction).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.getByProviderId = function(callback, genericDistributionProviderId, actionType){
	var kparams = new Object();
	this.client.addParam(kparams, "genericDistributionProviderId", genericDistributionProviderId);
	this.client.addParam(kparams, "actionType", actionType);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "getByProviderId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Generic Distribution Provider Action by provider id
 *		 .
 * @param	genericDistributionProviderId	int		 (optional).
 * @param	actionType	int		 (optional, enum: KalturaDistributionAction).
 * @param	genericDistributionProviderAction	KalturaGenericDistributionProviderAction		 (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.updateByProviderId = function(callback, genericDistributionProviderId, actionType, genericDistributionProviderAction){
	var kparams = new Object();
	this.client.addParam(kparams, "genericDistributionProviderId", genericDistributionProviderId);
	this.client.addParam(kparams, "actionType", actionType);
	this.client.addParam(kparams, "genericDistributionProviderAction", toParams(genericDistributionProviderAction));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "updateByProviderId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Generic Distribution Provider Action by id
 *		 .
 * @param	id	int		 (optional).
 * @param	genericDistributionProviderAction	KalturaGenericDistributionProviderAction		 (optional).
 * @return	KalturaGenericDistributionProviderAction.
 */
KalturaGenericDistributionProviderActionService.prototype.update = function(callback, id, genericDistributionProviderAction){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "genericDistributionProviderAction", toParams(genericDistributionProviderAction));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Generic Distribution Provider Action by id
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaGenericDistributionProviderActionService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Generic Distribution Provider Action by provider id
 *		 .
 * @param	genericDistributionProviderId	int		 (optional).
 * @param	actionType	int		 (optional, enum: KalturaDistributionAction).
 * @return	.
 */
KalturaGenericDistributionProviderActionService.prototype.deleteByProviderId = function(callback, genericDistributionProviderId, actionType){
	var kparams = new Object();
	this.client.addParam(kparams, "genericDistributionProviderId", genericDistributionProviderId);
	this.client.addParam(kparams, "actionType", actionType);
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "deleteByProviderId", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List all distribution providers
 *		 .
 * @param	filter	KalturaGenericDistributionProviderActionFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaGenericDistributionProviderActionListResponse.
 */
KalturaGenericDistributionProviderActionService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("contentdistribution_genericdistributionprovideraction", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: cuePoint.
 * The available service actions:
 * @action	add	Allows you to add an cue point object associated with an entry
 *		 .
 * @action	addFromBulk	Allows you to add multiple cue points objects by uploading XML that contains multiple cue point definitions
 *		 .
 * @action	get	Retrieve an CuePoint object by id
 *		 .
 * @action	list	List cue point objects by filter and pager
 *		 .
 * @action	count	count cue point objects by filter
 *		 .
 * @action	update	Update cue point by id 
 *		 .
 * @action	delete	delete cue point by id, and delete all children cue points
 *		 .
*/
function KalturaCuePointService(client){
	this.init(client);
}
KalturaCuePointService.inheritsFrom (KalturaServiceBase);
/**
 * Allows you to add an cue point object associated with an entry
 *		 .
 * @param	cuePoint	KalturaCuePoint		 (optional).
 * @return	KalturaCuePoint.
 */
KalturaCuePointService.prototype.add = function(callback, cuePoint){
	var kparams = new Object();
	this.client.addParam(kparams, "cuePoint", toParams(cuePoint));
	this.client.queueServiceActionCall("cuepoint_cuepoint", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add multiple cue points objects by uploading XML that contains multiple cue point definitions
 *		 .
 * @param	fileData	file		 (optional).
 * @return	KalturaCuePointListResponse.
 */
KalturaCuePointService.prototype.addFromBulk = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("cuepoint_cuepoint", "addFromBulk", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve an CuePoint object by id
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaCuePoint.
 */
KalturaCuePointService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("cuepoint_cuepoint", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List cue point objects by filter and pager
 *		 .
 * @param	filter	KalturaCuePointFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCuePointListResponse.
 */
KalturaCuePointService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("cuepoint_cuepoint", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * count cue point objects by filter
 *		 .
 * @param	filter	KalturaCuePointFilter		 (optional, default: null).
 * @return	int.
 */
KalturaCuePointService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("cuepoint_cuepoint", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update cue point by id 
 *		 .
 * @param	id	string		 (optional).
 * @param	cuePoint	KalturaCuePoint		 (optional).
 * @return	KalturaCuePoint.
 */
KalturaCuePointService.prototype.update = function(callback, id, cuePoint){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "cuePoint", toParams(cuePoint));
	this.client.queueServiceActionCall("cuepoint_cuepoint", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * delete cue point by id, and delete all children cue points
 *		 .
 * @param	id	string		 (optional).
 * @return	.
 */
KalturaCuePointService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("cuepoint_cuepoint", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: annotation.
 * The available service actions:
 * @action	add	Allows you to add an annotation object associated with an entry
 *		 .
 * @action	update	Update annotation by id
 *		 .
 * @action	list	List annotation objects by filter and pager
 *		.
 * @action	addFromBulk	Allows you to add multiple cue points objects by uploading XML that contains multiple cue point definitions
 *		 .
 * @action	get	Retrieve an CuePoint object by id
 *		 .
 * @action	count	count cue point objects by filter
 *		 .
 * @action	delete	delete cue point by id, and delete all children cue points
 *		 .
*/
function KalturaAnnotationService(client){
	this.init(client);
}
KalturaAnnotationService.inheritsFrom (KalturaServiceBase);
/**
 * Allows you to add an annotation object associated with an entry
 *		 .
 * @param	annotation	KalturaCuePoint		 (optional).
 * @return	KalturaAnnotation.
 */
KalturaAnnotationService.prototype.add = function(callback, annotation){
	var kparams = new Object();
	this.client.addParam(kparams, "annotation", toParams(annotation));
	this.client.queueServiceActionCall("annotation_annotation", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update annotation by id
 *		 .
 * @param	id	string		 (optional).
 * @param	annotation	KalturaCuePoint		 (optional).
 * @return	KalturaAnnotation.
 */
KalturaAnnotationService.prototype.update = function(callback, id, annotation){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "annotation", toParams(annotation));
	this.client.queueServiceActionCall("annotation_annotation", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List annotation objects by filter and pager
 *		.
 * @param	filter	KalturaCuePointFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaAnnotationListResponse.
 */
KalturaAnnotationService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("annotation_annotation", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add multiple cue points objects by uploading XML that contains multiple cue point definitions
 *		 .
 * @param	fileData	file		 (optional).
 * @return	KalturaCuePointListResponse.
 */
KalturaAnnotationService.prototype.addFromBulk = function(callback, fileData){
	var kparams = new Object();
	kfiles = new Object();
	this.client.addParam(kfiles, "fileData", fileData);
	this.client.queueServiceActionCall("annotation_annotation", "addFromBulk", kparams, kfiles);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve an CuePoint object by id
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaCuePoint.
 */
KalturaAnnotationService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("annotation_annotation", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * count cue point objects by filter
 *		 .
 * @param	filter	KalturaCuePointFilter		 (optional, default: null).
 * @return	int.
 */
KalturaAnnotationService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("annotation_annotation", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * delete cue point by id, and delete all children cue points
 *		 .
 * @param	id	string		 (optional).
 * @return	.
 */
KalturaAnnotationService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("annotation_annotation", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: quiz.
 * The available service actions:
 * @action	add	Allows to add a quiz to an entry
 *		 .
 * @action	update	Allows to update a quiz
 *		 .
 * @action	get	Allows to get a quiz
 *		 .
 * @action	list	List quiz objects by filter and pager
 *		 .
 * @action	getUrl	sends a with an api request for pdf from quiz object
 *		 .
*/
function KalturaQuizService(client){
	this.init(client);
}
KalturaQuizService.inheritsFrom (KalturaServiceBase);
/**
 * Allows to add a quiz to an entry
 *		 .
 * @param	entryId	string		 (optional).
 * @param	quiz	KalturaQuiz		 (optional).
 * @return	KalturaQuiz.
 */
KalturaQuizService.prototype.add = function(callback, entryId, quiz){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "quiz", toParams(quiz));
	this.client.queueServiceActionCall("quiz_quiz", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows to update a quiz
 *		 .
 * @param	entryId	string		 (optional).
 * @param	quiz	KalturaQuiz		 (optional).
 * @return	KalturaQuiz.
 */
KalturaQuizService.prototype.update = function(callback, entryId, quiz){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "quiz", toParams(quiz));
	this.client.queueServiceActionCall("quiz_quiz", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows to get a quiz
 *		 .
 * @param	entryId	string		 (optional).
 * @return	KalturaQuiz.
 */
KalturaQuizService.prototype.get = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("quiz_quiz", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List quiz objects by filter and pager
 *		 .
 * @param	filter	KalturaQuizFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaQuizListResponse.
 */
KalturaQuizService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("quiz_quiz", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * sends a with an api request for pdf from quiz object
 *		 .
 * @param	entryId	string		 (optional).
 * @param	quizOutputType	int		 (optional, enum: KalturaQuizOutputType).
 * @return	string.
 */
KalturaQuizService.prototype.getUrl = function(callback, entryId, quizOutputType){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "quizOutputType", quizOutputType);
	this.client.queueServiceActionCall("quiz_quiz", "getUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: shortLink.
 * The available service actions:
 * @action	list	List short link objects by filter and pager
 *		 .
 * @action	add	Allows you to add a short link object
 *		 .
 * @action	get	Retrieve an short link object by id
 *		 .
 * @action	update	Update exisitng short link
 *		 .
 * @action	delete	Mark the short link as deleted
 *		 .
*/
function KalturaShortLinkService(client){
	this.init(client);
}
KalturaShortLinkService.inheritsFrom (KalturaServiceBase);
/**
 * List short link objects by filter and pager
 *		 .
 * @param	filter	KalturaShortLinkFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaShortLinkListResponse.
 */
KalturaShortLinkService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("shortlink_shortlink", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Allows you to add a short link object
 *		 .
 * @param	shortLink	KalturaShortLink		 (optional).
 * @return	KalturaShortLink.
 */
KalturaShortLinkService.prototype.add = function(callback, shortLink){
	var kparams = new Object();
	this.client.addParam(kparams, "shortLink", toParams(shortLink));
	this.client.queueServiceActionCall("shortlink_shortlink", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve an short link object by id
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaShortLink.
 */
KalturaShortLinkService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("shortlink_shortlink", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update exisitng short link
 *		 .
 * @param	id	string		 (optional).
 * @param	shortLink	KalturaShortLink		 (optional).
 * @return	KalturaShortLink.
 */
KalturaShortLinkService.prototype.update = function(callback, id, shortLink){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "shortLink", toParams(shortLink));
	this.client.queueServiceActionCall("shortlink_shortlink", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Mark the short link as deleted
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaShortLink.
 */
KalturaShortLinkService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("shortlink_shortlink", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: bulk.
 * The available service actions:
 * @action	get	Get bulk upload batch job by id
 *		 .
 * @action	list	List bulk upload batch jobs
 *		 .
 * @action	abort	Aborts the bulk upload and all its child jobs
 *		 .
*/
function KalturaBulkService(client){
	this.init(client);
}
KalturaBulkService.inheritsFrom (KalturaServiceBase);
/**
 * Get bulk upload batch job by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaBulkUpload.
 */
KalturaBulkService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("bulkupload_bulk", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List bulk upload batch jobs
 *		 .
 * @param	bulkUploadFilter	KalturaBulkUploadFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaBulkUploadListResponse.
 */
KalturaBulkService.prototype.listAction = function(callback, bulkUploadFilter, pager){
	if(!bulkUploadFilter)
		bulkUploadFilter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (bulkUploadFilter != null)
		this.client.addParam(kparams, "bulkUploadFilter", toParams(bulkUploadFilter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("bulkupload_bulk", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Aborts the bulk upload and all its child jobs
 *		 .
 * @param	id	int		job id (optional).
 * @return	KalturaBulkUpload.
 */
KalturaBulkService.prototype.abort = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("bulkupload_bulk", "abort", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: dropFolder.
 * The available service actions:
 * @action	add	Allows you to add a new KalturaDropFolder object
 *		 .
 * @action	get	Retrieve a KalturaDropFolder object by ID
 *		 .
 * @action	update	Update an existing KalturaDropFolder object
 *		 .
 * @action	delete	Mark the KalturaDropFolder object as deleted
 *		 .
 * @action	list	List KalturaDropFolder objects
 *		 .
*/
function KalturaDropFolderService(client){
	this.init(client);
}
KalturaDropFolderService.inheritsFrom (KalturaServiceBase);
/**
 * Allows you to add a new KalturaDropFolder object
 *		 .
 * @param	dropFolder	KalturaDropFolder		 (optional).
 * @return	KalturaDropFolder.
 */
KalturaDropFolderService.prototype.add = function(callback, dropFolder){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolder", toParams(dropFolder));
	this.client.queueServiceActionCall("dropfolder_dropfolder", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a KalturaDropFolder object by ID
 *		 .
 * @param	dropFolderId	int		 (optional).
 * @return	KalturaDropFolder.
 */
KalturaDropFolderService.prototype.get = function(callback, dropFolderId){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderId", dropFolderId);
	this.client.queueServiceActionCall("dropfolder_dropfolder", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing KalturaDropFolder object
 *		 .
 * @param	dropFolderId	int		 (optional).
 * @param	dropFolder	KalturaDropFolder		Id (optional).
 * @return	KalturaDropFolder.
 */
KalturaDropFolderService.prototype.update = function(callback, dropFolderId, dropFolder){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderId", dropFolderId);
	this.client.addParam(kparams, "dropFolder", toParams(dropFolder));
	this.client.queueServiceActionCall("dropfolder_dropfolder", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Mark the KalturaDropFolder object as deleted
 *		 .
 * @param	dropFolderId	int		 (optional).
 * @return	KalturaDropFolder.
 */
KalturaDropFolderService.prototype.deleteAction = function(callback, dropFolderId){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderId", dropFolderId);
	this.client.queueServiceActionCall("dropfolder_dropfolder", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List KalturaDropFolder objects
 *		 .
 * @param	filter	KalturaDropFolderFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaDropFolderListResponse.
 */
KalturaDropFolderService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("dropfolder_dropfolder", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: dropFolderFile.
 * The available service actions:
 * @action	add	Allows you to add a new KalturaDropFolderFile object
 *		 .
 * @action	get	Retrieve a KalturaDropFolderFile object by ID
 *		 .
 * @action	update	Update an existing KalturaDropFolderFile object
 *		 .
 * @action	updateStatus	Update status of KalturaDropFolderFile
 *		 .
 * @action	delete	Mark the KalturaDropFolderFile object as deleted
 *		 .
 * @action	list	List KalturaDropFolderFile objects
 *		 .
 * @action	ignore	Set the KalturaDropFolderFile status to ignore (KalturaDropFolderFileStatus::IGNORE)
 *		 .
*/
function KalturaDropFolderFileService(client){
	this.init(client);
}
KalturaDropFolderFileService.inheritsFrom (KalturaServiceBase);
/**
 * Allows you to add a new KalturaDropFolderFile object
 *		 .
 * @param	dropFolderFile	KalturaDropFolderFile		 (optional).
 * @return	KalturaDropFolderFile.
 */
KalturaDropFolderFileService.prototype.add = function(callback, dropFolderFile){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderFile", toParams(dropFolderFile));
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a KalturaDropFolderFile object by ID
 *		 .
 * @param	dropFolderFileId	int		 (optional).
 * @return	KalturaDropFolderFile.
 */
KalturaDropFolderFileService.prototype.get = function(callback, dropFolderFileId){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderFileId", dropFolderFileId);
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing KalturaDropFolderFile object
 *		 .
 * @param	dropFolderFileId	int		 (optional).
 * @param	dropFolderFile	KalturaDropFolderFile		Id (optional).
 * @return	KalturaDropFolderFile.
 */
KalturaDropFolderFileService.prototype.update = function(callback, dropFolderFileId, dropFolderFile){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderFileId", dropFolderFileId);
	this.client.addParam(kparams, "dropFolderFile", toParams(dropFolderFile));
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update status of KalturaDropFolderFile
 *		 .
 * @param	dropFolderFileId	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaDropFolderFileStatus).
 * @return	KalturaDropFolderFile.
 */
KalturaDropFolderFileService.prototype.updateStatus = function(callback, dropFolderFileId, status){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderFileId", dropFolderFileId);
	this.client.addParam(kparams, "status", status);
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Mark the KalturaDropFolderFile object as deleted
 *		 .
 * @param	dropFolderFileId	int		 (optional).
 * @return	KalturaDropFolderFile.
 */
KalturaDropFolderFileService.prototype.deleteAction = function(callback, dropFolderFileId){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderFileId", dropFolderFileId);
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List KalturaDropFolderFile objects
 *		 .
 * @param	filter	KalturaDropFolderFileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaDropFolderFileListResponse.
 */
KalturaDropFolderFileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Set the KalturaDropFolderFile status to ignore (KalturaDropFolderFileStatus::IGNORE)
 *		 .
 * @param	dropFolderFileId	int		 (optional).
 * @return	KalturaDropFolderFile.
 */
KalturaDropFolderFileService.prototype.ignore = function(callback, dropFolderFileId){
	var kparams = new Object();
	this.client.addParam(kparams, "dropFolderFileId", dropFolderFileId);
	this.client.queueServiceActionCall("dropfolder_dropfolderfile", "ignore", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: captionAsset.
 * The available service actions:
 * @action	add	Add caption asset
 *	     .
 * @action	setContent	Update content of caption asset
 *	     .
 * @action	update	Update caption asset
 *	     .
 * @action	getUrl	Get download URL for the asset
 *		 .
 * @action	getRemotePaths	Get remote storage existing paths for the asset
 *		 .
 * @action	setAsDefault	Markss the caption as default and removes that mark from all other caption assets of the entry.
 *		 .
 * @action	get	.
 * @action	list	List caption Assets by filter and pager
 *		 .
 * @action	delete	.
*/
function KalturaCaptionAssetService(client){
	this.init(client);
}
KalturaCaptionAssetService.inheritsFrom (KalturaServiceBase);
/**
 * Add caption asset
 *	     .
 * @param	entryId	string		 (optional).
 * @param	captionAsset	KalturaCaptionAsset		 (optional).
 * @return	KalturaCaptionAsset.
 */
KalturaCaptionAssetService.prototype.add = function(callback, entryId, captionAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "captionAsset", toParams(captionAsset));
	this.client.queueServiceActionCall("caption_captionasset", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update content of caption asset
 *	     .
 * @param	id	string		 (optional).
 * @param	contentResource	KalturaContentResource		 (optional).
 * @return	KalturaCaptionAsset.
 */
KalturaCaptionAssetService.prototype.setContent = function(callback, id, contentResource){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "contentResource", toParams(contentResource));
	this.client.queueServiceActionCall("caption_captionasset", "setContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update caption asset
 *	     .
 * @param	id	string		 (optional).
 * @param	captionAsset	KalturaCaptionAsset		 (optional).
 * @return	KalturaCaptionAsset.
 */
KalturaCaptionAssetService.prototype.update = function(callback, id, captionAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "captionAsset", toParams(captionAsset));
	this.client.queueServiceActionCall("caption_captionasset", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get download URL for the asset
 *		 .
 * @param	id	string		 (optional).
 * @param	storageId	int		 (optional, default: null).
 * @return	string.
 */
KalturaCaptionAssetService.prototype.getUrl = function(callback, id, storageId){
	if(!storageId)
		storageId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "storageId", storageId);
	this.client.queueServiceActionCall("caption_captionasset", "getUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get remote storage existing paths for the asset
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaRemotePathListResponse.
 */
KalturaCaptionAssetService.prototype.getRemotePaths = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("caption_captionasset", "getRemotePaths", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Markss the caption as default and removes that mark from all other caption assets of the entry.
 *		 .
 * @param	captionAssetId	string		 (optional).
 * @return	.
 */
KalturaCaptionAssetService.prototype.setAsDefault = function(callback, captionAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "captionAssetId", captionAssetId);
	this.client.queueServiceActionCall("caption_captionasset", "setAsDefault", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	captionAssetId	string		 (optional).
 * @return	KalturaCaptionAsset.
 */
KalturaCaptionAssetService.prototype.get = function(callback, captionAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "captionAssetId", captionAssetId);
	this.client.queueServiceActionCall("caption_captionasset", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List caption Assets by filter and pager
 *		 .
 * @param	filter	KalturaAssetFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCaptionAssetListResponse.
 */
KalturaCaptionAssetService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("caption_captionasset", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	captionAssetId	string		 (optional).
 * @return	.
 */
KalturaCaptionAssetService.prototype.deleteAction = function(callback, captionAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "captionAssetId", captionAssetId);
	this.client.queueServiceActionCall("caption_captionasset", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: captionParams.
 * The available service actions:
 * @action	add	Add new Caption Params
 *		 .
 * @action	get	Get Caption Params by ID
 *		 .
 * @action	update	Update Caption Params by ID
 *		 .
 * @action	delete	Delete Caption Params by ID
 *		 .
 * @action	list	List Caption Params by filter with paging support (By default - all system default params will be listed too)
 *		 .
*/
function KalturaCaptionParamsService(client){
	this.init(client);
}
KalturaCaptionParamsService.inheritsFrom (KalturaServiceBase);
/**
 * Add new Caption Params
 *		 .
 * @param	captionParams	KalturaCaptionParams		 (optional).
 * @return	KalturaCaptionParams.
 */
KalturaCaptionParamsService.prototype.add = function(callback, captionParams){
	var kparams = new Object();
	this.client.addParam(kparams, "captionParams", toParams(captionParams));
	this.client.queueServiceActionCall("caption_captionparams", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get Caption Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaCaptionParams.
 */
KalturaCaptionParamsService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("caption_captionparams", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update Caption Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @param	captionParams	KalturaCaptionParams		 (optional).
 * @return	KalturaCaptionParams.
 */
KalturaCaptionParamsService.prototype.update = function(callback, id, captionParams){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "captionParams", toParams(captionParams));
	this.client.queueServiceActionCall("caption_captionparams", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete Caption Params by ID
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaCaptionParamsService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("caption_captionparams", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List Caption Params by filter with paging support (By default - all system default params will be listed too)
 *		 .
 * @param	filter	KalturaCaptionParamsFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCaptionParamsListResponse.
 */
KalturaCaptionParamsService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("caption_captionparams", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: captionAssetItem.
 * The available service actions:
 * @action	search	Search caption asset items by filter, pager and free text
 *		 .
 * @action	searchEntries	Search caption asset items by filter, pager and free text
 *		 .
*/
function KalturaCaptionAssetItemService(client){
	this.init(client);
}
KalturaCaptionAssetItemService.inheritsFrom (KalturaServiceBase);
/**
 * Search caption asset items by filter, pager and free text
 *		 .
 * @param	entryFilter	KalturaBaseEntryFilter		 (optional, default: null).
 * @param	captionAssetItemFilter	KalturaCaptionAssetItemFilter		 (optional, default: null).
 * @param	captionAssetItemPager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaCaptionAssetItemListResponse.
 */
KalturaCaptionAssetItemService.prototype.search = function(callback, entryFilter, captionAssetItemFilter, captionAssetItemPager){
	if(!entryFilter)
		entryFilter = null;
	if(!captionAssetItemFilter)
		captionAssetItemFilter = null;
	if(!captionAssetItemPager)
		captionAssetItemPager = null;
	var kparams = new Object();
	if (entryFilter != null)
		this.client.addParam(kparams, "entryFilter", toParams(entryFilter));
	if (captionAssetItemFilter != null)
		this.client.addParam(kparams, "captionAssetItemFilter", toParams(captionAssetItemFilter));
	if (captionAssetItemPager != null)
		this.client.addParam(kparams, "captionAssetItemPager", toParams(captionAssetItemPager));
	this.client.queueServiceActionCall("captionsearch_captionassetitem", "search", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Search caption asset items by filter, pager and free text
 *		 .
 * @param	entryFilter	KalturaBaseEntryFilter		 (optional, default: null).
 * @param	captionAssetItemFilter	KalturaCaptionAssetItemFilter		 (optional, default: null).
 * @param	captionAssetItemPager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaBaseEntryListResponse.
 */
KalturaCaptionAssetItemService.prototype.searchEntries = function(callback, entryFilter, captionAssetItemFilter, captionAssetItemPager){
	if(!entryFilter)
		entryFilter = null;
	if(!captionAssetItemFilter)
		captionAssetItemFilter = null;
	if(!captionAssetItemPager)
		captionAssetItemPager = null;
	var kparams = new Object();
	if (entryFilter != null)
		this.client.addParam(kparams, "entryFilter", toParams(entryFilter));
	if (captionAssetItemFilter != null)
		this.client.addParam(kparams, "captionAssetItemFilter", toParams(captionAssetItemFilter));
	if (captionAssetItemPager != null)
		this.client.addParam(kparams, "captionAssetItemPager", toParams(captionAssetItemPager));
	this.client.queueServiceActionCall("captionsearch_captionassetitem", "searchEntries", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: attachmentAsset.
 * The available service actions:
 * @action	add	Add attachment asset
 *	     .
 * @action	setContent	Update content of attachment asset
 *	     .
 * @action	update	Update attachment asset
 *	     .
 * @action	getUrl	Get download URL for the asset
 *		 .
 * @action	getRemotePaths	Get remote storage existing paths for the asset
 *		 .
 * @action	get	.
 * @action	list	List attachment Assets by filter and pager
 *		 .
 * @action	delete	.
*/
function KalturaAttachmentAssetService(client){
	this.init(client);
}
KalturaAttachmentAssetService.inheritsFrom (KalturaServiceBase);
/**
 * Add attachment asset
 *	     .
 * @param	entryId	string		 (optional).
 * @param	attachmentAsset	KalturaAttachmentAsset		 (optional).
 * @return	KalturaAttachmentAsset.
 */
KalturaAttachmentAssetService.prototype.add = function(callback, entryId, attachmentAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "attachmentAsset", toParams(attachmentAsset));
	this.client.queueServiceActionCall("attachment_attachmentasset", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update content of attachment asset
 *	     .
 * @param	id	string		 (optional).
 * @param	contentResource	KalturaContentResource		 (optional).
 * @return	KalturaAttachmentAsset.
 */
KalturaAttachmentAssetService.prototype.setContent = function(callback, id, contentResource){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "contentResource", toParams(contentResource));
	this.client.queueServiceActionCall("attachment_attachmentasset", "setContent", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update attachment asset
 *	     .
 * @param	id	string		 (optional).
 * @param	attachmentAsset	KalturaAttachmentAsset		 (optional).
 * @return	KalturaAttachmentAsset.
 */
KalturaAttachmentAssetService.prototype.update = function(callback, id, attachmentAsset){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "attachmentAsset", toParams(attachmentAsset));
	this.client.queueServiceActionCall("attachment_attachmentasset", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get download URL for the asset
 *		 .
 * @param	id	string		 (optional).
 * @param	storageId	int		 (optional, default: null).
 * @return	string.
 */
KalturaAttachmentAssetService.prototype.getUrl = function(callback, id, storageId){
	if(!storageId)
		storageId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "storageId", storageId);
	this.client.queueServiceActionCall("attachment_attachmentasset", "getUrl", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get remote storage existing paths for the asset
 *		 .
 * @param	id	string		 (optional).
 * @return	KalturaRemotePathListResponse.
 */
KalturaAttachmentAssetService.prototype.getRemotePaths = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("attachment_attachmentasset", "getRemotePaths", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	attachmentAssetId	string		 (optional).
 * @return	KalturaAttachmentAsset.
 */
KalturaAttachmentAssetService.prototype.get = function(callback, attachmentAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "attachmentAssetId", attachmentAssetId);
	this.client.queueServiceActionCall("attachment_attachmentasset", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List attachment Assets by filter and pager
 *		 .
 * @param	filter	KalturaAssetFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaAttachmentAssetListResponse.
 */
KalturaAttachmentAssetService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("attachment_attachmentasset", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	attachmentAssetId	string		 (optional).
 * @return	.
 */
KalturaAttachmentAssetService.prototype.deleteAction = function(callback, attachmentAssetId){
	var kparams = new Object();
	this.client.addParam(kparams, "attachmentAssetId", attachmentAssetId);
	this.client.queueServiceActionCall("attachment_attachmentasset", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: tag.
 * The available service actions:
 * @action	search	.
 * @action	deletePending	Action goes over all tags with instanceCount==0 and checks whether they need to be removed from the DB. Returns number of removed tags.
 *	     .
 * @action	indexCategoryEntryTags	.
*/
function KalturaTagService(client){
	this.init(client);
}
KalturaTagService.inheritsFrom (KalturaServiceBase);
/**
 * .
 * @param	tagFilter	KalturaTagFilter		 (optional).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaTagListResponse.
 */
KalturaTagService.prototype.search = function(callback, tagFilter, pager){
	if(!pager)
		pager = null;
	var kparams = new Object();
	this.client.addParam(kparams, "tagFilter", toParams(tagFilter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("tagsearch_tag", "search", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Action goes over all tags with instanceCount==0 and checks whether they need to be removed from the DB. Returns number of removed tags.
 *	     .
 * @return	int.
 */
KalturaTagService.prototype.deletePending = function(callback){
	var kparams = new Object();
	this.client.queueServiceActionCall("tagsearch_tag", "deletePending", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	categoryId	int		 (optional).
 * @param	pcToDecrement	string		 (optional).
 * @param	pcToIncrement	string		 (optional).
 * @return	.
 */
KalturaTagService.prototype.indexCategoryEntryTags = function(callback, categoryId, pcToDecrement, pcToIncrement){
	var kparams = new Object();
	this.client.addParam(kparams, "categoryId", categoryId);
	this.client.addParam(kparams, "pcToDecrement", pcToDecrement);
	this.client.addParam(kparams, "pcToIncrement", pcToIncrement);
	this.client.queueServiceActionCall("tagsearch_tag", "indexCategoryEntryTags", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: like.
 * The available service actions:
 * @action	like	.
 * @action	unlike	.
 * @action	checkLikeExists	.
 * @action	list	.
*/
function KalturaLikeService(client){
	this.init(client);
}
KalturaLikeService.inheritsFrom (KalturaServiceBase);
/**
 * .
 * @param	entryId	string		 (optional).
 * @return	bool.
 */
KalturaLikeService.prototype.like = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("like_like", "like", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @return	bool.
 */
KalturaLikeService.prototype.unlike = function(callback, entryId){
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.queueServiceActionCall("like_like", "unlike", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	entryId	string		 (optional).
 * @param	userId	string		 (optional, default: null).
 * @return	bool.
 */
KalturaLikeService.prototype.checkLikeExists = function(callback, entryId, userId){
	if(!userId)
		userId = null;
	var kparams = new Object();
	this.client.addParam(kparams, "entryId", entryId);
	this.client.addParam(kparams, "userId", userId);
	this.client.queueServiceActionCall("like_like", "checkLikeExists", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaLikeFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaLikeListResponse.
 */
KalturaLikeService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("like_like", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: varConsole.
 * The available service actions:
 * @action	getPartnerUsage	Function which calulates partner usage of a group of a VAR's sub-publishers
 *	     .
 * @action	updateStatus	Function to change a sub-publisher's status
 *		 .
*/
function KalturaVarConsoleService(client){
	this.init(client);
}
KalturaVarConsoleService.inheritsFrom (KalturaServiceBase);
/**
 * Function which calulates partner usage of a group of a VAR's sub-publishers
 *	     .
 * @param	partnerFilter	KalturaPartnerFilter		 (optional, default: null).
 * @param	usageFilter	KalturaReportInputFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaPartnerUsageListResponse.
 */
KalturaVarConsoleService.prototype.getPartnerUsage = function(callback, partnerFilter, usageFilter, pager){
	if(!partnerFilter)
		partnerFilter = null;
	if(!usageFilter)
		usageFilter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (partnerFilter != null)
		this.client.addParam(kparams, "partnerFilter", toParams(partnerFilter));
	if (usageFilter != null)
		this.client.addParam(kparams, "usageFilter", toParams(usageFilter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("varconsole_varconsole", "getPartnerUsage", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Function to change a sub-publisher's status
 *		 .
 * @param	id	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaPartnerStatus).
 * @return	.
 */
KalturaVarConsoleService.prototype.updateStatus = function(callback, id, status){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "status", status);
	this.client.queueServiceActionCall("varconsole_varconsole", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: eventNotificationTemplate.
 * The available service actions:
 * @action	add	This action allows for the creation of new backend event types in the system. This action requires access to the Kaltura server Admin Console. If you're looking to register to existing event types, please use the clone action instead.
 *		 .
 * @action	clone	This action allows registering to various backend event. Use this action to create notifications that will react to events such as new video was uploaded or metadata field was updated. To see the list of available event types, call the listTemplates action.
 *		 .
 * @action	get	Retrieve an event notification template object by id
 *		 .
 * @action	update	Update an existing event notification template object
 *		 .
 * @action	updateStatus	Update event notification template status by id
 *		 .
 * @action	delete	Delete an event notification template object
 *		 .
 * @action	list	list event notification template objects
 *		 .
 * @action	listByPartner	.
 * @action	dispatch	Dispatch event notification object by id
 *		 .
 * @action	listTemplates	Action lists the template partner event notification templates.
 *		 .
*/
function KalturaEventNotificationTemplateService(client){
	this.init(client);
}
KalturaEventNotificationTemplateService.inheritsFrom (KalturaServiceBase);
/**
 * This action allows for the creation of new backend event types in the system. This action requires access to the Kaltura server Admin Console. If you're looking to register to existing event types, please use the clone action instead.
 *		 .
 * @param	eventNotificationTemplate	KalturaEventNotificationTemplate		 (optional).
 * @return	KalturaEventNotificationTemplate.
 */
KalturaEventNotificationTemplateService.prototype.add = function(callback, eventNotificationTemplate){
	var kparams = new Object();
	this.client.addParam(kparams, "eventNotificationTemplate", toParams(eventNotificationTemplate));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * This action allows registering to various backend event. Use this action to create notifications that will react to events such as new video was uploaded or metadata field was updated. To see the list of available event types, call the listTemplates action.
 *		 .
 * @param	id	int		source template to clone (optional).
 * @param	eventNotificationTemplate	KalturaEventNotificationTemplate		overwrite configuration object (optional, default: null).
 * @return	KalturaEventNotificationTemplate.
 */
KalturaEventNotificationTemplateService.prototype.cloneAction = function(callback, id, eventNotificationTemplate){
	if(!eventNotificationTemplate)
		eventNotificationTemplate = null;
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	if (eventNotificationTemplate != null)
		this.client.addParam(kparams, "eventNotificationTemplate", toParams(eventNotificationTemplate));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "clone", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve an event notification template object by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaEventNotificationTemplate.
 */
KalturaEventNotificationTemplateService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing event notification template object
 *		 .
 * @param	id	int		 (optional).
 * @param	eventNotificationTemplate	KalturaEventNotificationTemplate		 (optional).
 * @return	KalturaEventNotificationTemplate.
 */
KalturaEventNotificationTemplateService.prototype.update = function(callback, id, eventNotificationTemplate){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "eventNotificationTemplate", toParams(eventNotificationTemplate));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update event notification template status by id
 *		 .
 * @param	id	int		 (optional).
 * @param	status	int		 (optional, enum: KalturaEventNotificationTemplateStatus).
 * @return	KalturaEventNotificationTemplate.
 */
KalturaEventNotificationTemplateService.prototype.updateStatus = function(callback, id, status){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "status", status);
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "updateStatus", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete an event notification template object
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaEventNotificationTemplateService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * list event notification template objects
 *		 .
 * @param	filter	KalturaEventNotificationTemplateFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaEventNotificationTemplateListResponse.
 */
KalturaEventNotificationTemplateService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	filter	KalturaPartnerFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaEventNotificationTemplateListResponse.
 */
KalturaEventNotificationTemplateService.prototype.listByPartner = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "listByPartner", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Dispatch event notification object by id
 *		 .
 * @param	id	int		 (optional).
 * @param	scope	KalturaEventNotificationScope		 (optional).
 * @return	int.
 */
KalturaEventNotificationTemplateService.prototype.dispatch = function(callback, id, scope){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "scope", toParams(scope));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "dispatch", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Action lists the template partner event notification templates.
 *		 .
 * @param	filter	KalturaEventNotificationTemplateFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaEventNotificationTemplateListResponse.
 */
KalturaEventNotificationTemplateService.prototype.listTemplates = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("eventnotification_eventnotificationtemplate", "listTemplates", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: externalMedia.
 * The available service actions:
 * @action	add	Add external media entry
 *		 .
 * @action	get	Get external media entry by ID.
 *		 .
 * @action	update	Update external media entry. Only the properties that were set will be updated.
 *		 .
 * @action	delete	Delete a external media entry.
 *		 .
 * @action	list	List media entries by filter with paging support.
 *		 .
 * @action	count	Count media entries by filter.
 *		 .
*/
function KalturaExternalMediaService(client){
	this.init(client);
}
KalturaExternalMediaService.inheritsFrom (KalturaServiceBase);
/**
 * Add external media entry
 *		 .
 * @param	entry	KalturaExternalMediaEntry		 (optional).
 * @return	KalturaExternalMediaEntry.
 */
KalturaExternalMediaService.prototype.add = function(callback, entry){
	var kparams = new Object();
	this.client.addParam(kparams, "entry", toParams(entry));
	this.client.queueServiceActionCall("externalmedia_externalmedia", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Get external media entry by ID.
 *		 .
 * @param	id	string		External media entry id (optional).
 * @return	KalturaExternalMediaEntry.
 */
KalturaExternalMediaService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("externalmedia_externalmedia", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update external media entry. Only the properties that were set will be updated.
 *		 .
 * @param	id	string		External media entry id to update (optional).
 * @param	entry	KalturaExternalMediaEntry		External media entry object to update (optional).
 * @return	KalturaExternalMediaEntry.
 */
KalturaExternalMediaService.prototype.update = function(callback, id, entry){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "entry", toParams(entry));
	this.client.queueServiceActionCall("externalmedia_externalmedia", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a external media entry.
 *		 .
 * @param	id	string		External media entry id to delete (optional).
 * @return	.
 */
KalturaExternalMediaService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("externalmedia_externalmedia", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List media entries by filter with paging support.
 *		 .
 * @param	filter	KalturaExternalMediaEntryFilter		External media entry filter (optional, default: null).
 * @param	pager	KalturaFilterPager		Pager (optional, default: null).
 * @return	KalturaExternalMediaEntryListResponse.
 */
KalturaExternalMediaService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("externalmedia_externalmedia", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Count media entries by filter.
 *		 .
 * @param	filter	KalturaExternalMediaEntryFilter		External media entry filter (optional, default: null).
 * @return	int.
 */
KalturaExternalMediaService.prototype.count = function(callback, filter){
	if(!filter)
		filter = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	this.client.queueServiceActionCall("externalmedia_externalmedia", "count", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: scheduledTaskProfile.
 * The available service actions:
 * @action	add	Add a new scheduled task profile
 *		 .
 * @action	get	Retrieve a scheduled task profile by id
 *		 .
 * @action	update	Update an existing scheduled task profile
 *		 .
 * @action	delete	Delete a scheduled task profile
 *		 .
 * @action	list	List scheduled task profiles
 *		 .
 * @action	requestDryRun	.
 * @action	getDryRunResults	.
*/
function KalturaScheduledTaskProfileService(client){
	this.init(client);
}
KalturaScheduledTaskProfileService.inheritsFrom (KalturaServiceBase);
/**
 * Add a new scheduled task profile
 *		 .
 * @param	scheduledTaskProfile	KalturaScheduledTaskProfile		 (optional).
 * @return	KalturaScheduledTaskProfile.
 */
KalturaScheduledTaskProfileService.prototype.add = function(callback, scheduledTaskProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "scheduledTaskProfile", toParams(scheduledTaskProfile));
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "add", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Retrieve a scheduled task profile by id
 *		 .
 * @param	id	int		 (optional).
 * @return	KalturaScheduledTaskProfile.
 */
KalturaScheduledTaskProfileService.prototype.get = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "get", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Update an existing scheduled task profile
 *		 .
 * @param	id	int		 (optional).
 * @param	scheduledTaskProfile	KalturaScheduledTaskProfile		 (optional).
 * @return	KalturaScheduledTaskProfile.
 */
KalturaScheduledTaskProfileService.prototype.update = function(callback, id, scheduledTaskProfile){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.addParam(kparams, "scheduledTaskProfile", toParams(scheduledTaskProfile));
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "update", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * Delete a scheduled task profile
 *		 .
 * @param	id	int		 (optional).
 * @return	.
 */
KalturaScheduledTaskProfileService.prototype.deleteAction = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "delete", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * List scheduled task profiles
 *		 .
 * @param	filter	KalturaScheduledTaskProfileFilter		 (optional, default: null).
 * @param	pager	KalturaFilterPager		 (optional, default: null).
 * @return	KalturaScheduledTaskProfileListResponse.
 */
KalturaScheduledTaskProfileService.prototype.listAction = function(callback, filter, pager){
	if(!filter)
		filter = null;
	if(!pager)
		pager = null;
	var kparams = new Object();
	if (filter != null)
		this.client.addParam(kparams, "filter", toParams(filter));
	if (pager != null)
		this.client.addParam(kparams, "pager", toParams(pager));
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "list", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	scheduledTaskProfileId	int		 (optional).
 * @param	maxResults	int		 (optional, default: 500).
 * @return	int.
 */
KalturaScheduledTaskProfileService.prototype.requestDryRun = function(callback, scheduledTaskProfileId, maxResults){
	if(!maxResults)
		maxResults = 500;
	var kparams = new Object();
	this.client.addParam(kparams, "scheduledTaskProfileId", scheduledTaskProfileId);
	this.client.addParam(kparams, "maxResults", maxResults);
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "requestDryRun", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	requestId	int		 (optional).
 * @return	KalturaObjectListResponse.
 */
KalturaScheduledTaskProfileService.prototype.getDryRunResults = function(callback, requestId){
	var kparams = new Object();
	this.client.addParam(kparams, "requestId", requestId);
	this.client.queueServiceActionCall("scheduledtask_scheduledtaskprofile", "getDryRunResults", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

/**
 *Class definition for the Kaltura service: integration.
 * The available service actions:
 * @action	dispatch	Dispatch integration task
 *		 .
 * @action	notify	.
*/
function KalturaIntegrationService(client){
	this.init(client);
}
KalturaIntegrationService.inheritsFrom (KalturaServiceBase);
/**
 * Dispatch integration task
 *		 .
 * @param	data	KalturaIntegrationJobData		 (optional).
 * @param	objectType	string		 (optional, enum: KalturaBatchJobObjectType).
 * @param	objectId	string		 (optional).
 * @return	int.
 */
KalturaIntegrationService.prototype.dispatch = function(callback, data, objectType, objectId){
	var kparams = new Object();
	this.client.addParam(kparams, "data", toParams(data));
	this.client.addParam(kparams, "objectType", objectType);
	this.client.addParam(kparams, "objectId", objectId);
	this.client.queueServiceActionCall("integration_integration", "dispatch", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}
/**
 * .
 * @param	id	int		integration job id (optional).
 * @return	.
 */
KalturaIntegrationService.prototype.notify = function(callback, id){
	var kparams = new Object();
	this.client.addParam(kparams, "id", id);
	this.client.queueServiceActionCall("integration_integration", "notify", kparams);
	if (!this.client.isMultiRequest())
		this.client.doQueue(callback);
}

;
// ===================================================================================================
//                           _  __     _ _
//                          | |/ /__ _| | |_ _  _ _ _ __ _
//                          | ' </ _` | |  _| || | '_/ _` |
//                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
//
// This file is part of the Kaltura Collaborative Media Suite which allows users
// to do with audio, video, and animation what Wiki platfroms allow them to do with
// text.
//
// Copyright (C) 2006-2015  Kaltura Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @ignore
// ===================================================================================================
/**
 * The Kaltura Client - this is the facade through which all service actions should be called.
 * @param config the Kaltura configuration object holding partner credentials (type: KalturaConfiguration).
 */
function KalturaClient(config){
	this.init(config);
}
KalturaClient.inheritsFrom (KalturaClientBase);
KalturaClient.prototype.apiVersion = "3.3.0";
/**
 * Manage access control profiles
 *	 
 * @param KalturaAccessControlProfileService
 */
KalturaClient.prototype.accessControlProfile = null;
/**
 * Add & Manage Access Controls
 *	 
 * @param KalturaAccessControlService
 */
KalturaClient.prototype.accessControl = null;
/**
 * Manage details for the administrative user
 *	 
 * @param KalturaAdminUserService
 */
KalturaClient.prototype.adminUser = null;
/**
 * Manage application authentication tokens
 *	 
 * @param KalturaAppTokenService
 */
KalturaClient.prototype.appToken = null;
/**
 * Base Entry Service
 *	 
 * @param KalturaBaseEntryService
 */
KalturaClient.prototype.baseEntry = null;
/**
 * Bulk upload service is used to upload & manage bulk uploads using CSV files.
 *	 This service manages only entry bulk uploads.
 *	 
 * @param KalturaBulkUploadService
 */
KalturaClient.prototype.bulkUpload = null;
/**
 * Add & Manage CategoryEntry - assign entry to category
 *	 
 * @param KalturaCategoryEntryService
 */
KalturaClient.prototype.categoryEntry = null;
/**
 * Add & Manage Categories
 *	 
 * @param KalturaCategoryService
 */
KalturaClient.prototype.category = null;
/**
 * Add & Manage CategoryUser - membership of a user in a category
 *	 
 * @param KalturaCategoryUserService
 */
KalturaClient.prototype.categoryUser = null;
/**
 * Manage the connection between Conversion Profiles and Asset Params
 *	 
 * @param KalturaConversionProfileAssetParamsService
 */
KalturaClient.prototype.conversionProfileAssetParams = null;
/**
 * Add & Manage Conversion Profiles
 *	 
 * @param KalturaConversionProfileService
 */
KalturaClient.prototype.conversionProfile = null;
/**
 * Data service lets you manage data content (textual content)
 *	 
 * @param KalturaDataService
 */
KalturaClient.prototype.data = null;
/**
 * delivery service is used to control delivery objects
 *	 
 * @param KalturaDeliveryProfileService
 */
KalturaClient.prototype.deliveryProfile = null;
/**
 * Document service
 *	 
 * @param KalturaDocumentService
 */
KalturaClient.prototype.document = null;
/**
 * EmailIngestionProfile service lets you manage email ingestion profile records
 *	 
 * @param KalturaEmailIngestionProfileService
 */
KalturaClient.prototype.EmailIngestionProfile = null;
/**
 * Manage file assets
 *	 
 * @param KalturaFileAssetService
 */
KalturaClient.prototype.fileAsset = null;
/**
 * Retrieve information and invoke actions on Flavor Asset
 *	 
 * @param KalturaFlavorAssetService
 */
KalturaClient.prototype.flavorAsset = null;
/**
 * Flavor Params Output service
 *	 
 * @param KalturaFlavorParamsOutputService
 */
KalturaClient.prototype.flavorParamsOutput = null;
/**
 * Add & Manage Flavor Params
 *	 
 * @param KalturaFlavorParamsService
 */
KalturaClient.prototype.flavorParams = null;
/**
 * Add & Manage GroupUser
 *	 
 * @param KalturaGroupUserService
 */
KalturaClient.prototype.groupUser = null;
/**
 * Manage live channel segments
 *	 
 * @param KalturaLiveChannelSegmentService
 */
KalturaClient.prototype.liveChannelSegment = null;
/**
 * Live Channel service lets you manage live channels
 *	 
 * @param KalturaLiveChannelService
 */
KalturaClient.prototype.liveChannel = null;
/**
 * 
 * @param KalturaLiveReportsService
 */
KalturaClient.prototype.liveReports = null;
/**
 * Stats Service
 *	 
 * @param KalturaLiveStatsService
 */
KalturaClient.prototype.liveStats = null;
/**
 * Live Stream service lets you manage live stream entries
 *	 
 * @param KalturaLiveStreamService
 */
KalturaClient.prototype.liveStream = null;
/**
 * Media Info service
 *	 
 * @param KalturaMediaInfoService
 */
KalturaClient.prototype.mediaInfo = null;
/**
 * Media service lets you upload and manage media files (images / videos & audio)
 *	 
 * @param KalturaMediaService
 */
KalturaClient.prototype.media = null;
/**
 * A Mix is an XML unique format invented by Kaltura, it allows the user to create a mix of videos and images, in and out points, transitions, text overlays, soundtrack, effects and much more...
 *	 Mixing service lets you create a new mix, manage its metadata and make basic manipulations.   
 *	 
 * @param KalturaMixingService
 */
KalturaClient.prototype.mixing = null;
/**
 * Notification Service
 *	 
 * @param KalturaNotificationService
 */
KalturaClient.prototype.notification = null;
/**
 * partner service allows you to change/manage your partner personal details and settings as well
 *	 
 * @param KalturaPartnerService
 */
KalturaClient.prototype.partner = null;
/**
 * PermissionItem service lets you create and manage permission items
 *	 
 * @param KalturaPermissionItemService
 */
KalturaClient.prototype.permissionItem = null;
/**
 * Permission service lets you create and manage user permissions
 *	 
 * @param KalturaPermissionService
 */
KalturaClient.prototype.permission = null;
/**
 * Playlist service lets you create,manage and play your playlists
 *	 Playlists could be static (containing a fixed list of entries) or dynamic (baseed on a filter)
 *	 
 * @param KalturaPlaylistService
 */
KalturaClient.prototype.playlist = null;
/**
 * api for getting reports data by the report type and some inputFilter
 *	 
 * @param KalturaReportService
 */
KalturaClient.prototype.report = null;
/**
 * Manage response profiles
 *	 
 * @param KalturaResponseProfileService
 */
KalturaClient.prototype.responseProfile = null;
/**
 * Expose the schema definitions for syndication MRSS, bulk upload XML and other schema types. 
 *	 
 * @param KalturaSchemaService
 */
KalturaClient.prototype.schema = null;
/**
 * Search service allows you to search for media in various media providers
 *	 This service is being used mostly by the CW component
 *	 
 * @param KalturaSearchService
 */
KalturaClient.prototype.search = null;
/**
 * Server Node service
 *	 
 * @param KalturaServerNodeService
 */
KalturaClient.prototype.serverNode = null;
/**
 * Session service
 *	 
 * @param KalturaSessionService
 */
KalturaClient.prototype.session = null;
/**
 * Stats Service
 *	 
 * @param KalturaStatsService
 */
KalturaClient.prototype.stats = null;
/**
 * Storage Profiles service
 *	 
 * @param KalturaStorageProfileService
 */
KalturaClient.prototype.storageProfile = null;
/**
 * Add & Manage Syndication Feeds
 *	 
 * @param KalturaSyndicationFeedService
 */
KalturaClient.prototype.syndicationFeed = null;
/**
 * System service is used for internal system helpers & to retrieve system level information
 *	 
 * @param KalturaSystemService
 */
KalturaClient.prototype.system = null;
/**
 * Retrieve information and invoke actions on Thumb Asset
 *	 
 * @param KalturaThumbAssetService
 */
KalturaClient.prototype.thumbAsset = null;
/**
 * Thumbnail Params Output service
 *	 
 * @param KalturaThumbParamsOutputService
 */
KalturaClient.prototype.thumbParamsOutput = null;
/**
 * Add & Manage Thumb Params
 *	 
 * @param KalturaThumbParamsService
 */
KalturaClient.prototype.thumbParams = null;
/**
 * UiConf service lets you create and manage your UIConfs for the various flash components
 *	 This service is used by the KMC-ApplicationStudio
 *	 
 * @param KalturaUiConfService
 */
KalturaClient.prototype.uiConf = null;
/**
 * 
 * @param KalturaUploadService
 */
KalturaClient.prototype.upload = null;
/**
 * 
 * @param KalturaUploadTokenService
 */
KalturaClient.prototype.uploadToken = null;
/**
 * 
 * @param KalturaUserEntryService
 */
KalturaClient.prototype.userEntry = null;
/**
 * UserRole service lets you create and manage user roles
 *	 
 * @param KalturaUserRoleService
 */
KalturaClient.prototype.userRole = null;
/**
 * Manage partner users on Kaltura's side
 *	 The userId in kaltura is the unique Id in the partner's system, and the [partnerId,Id] couple are unique key in kaltura's DB
 *	 
 * @param KalturaUserService
 */
KalturaClient.prototype.user = null;
/**
 * widget service for full widget management
 *	 
 * @param KalturaWidgetService
 */
KalturaClient.prototype.widget = null;
/**
 * Internal Service is used for actions that are used internally in Kaltura applications and might be changed in the future without any notice.
 *	 
 * @param KalturaXInternalService
 */
KalturaClient.prototype.xInternal = null;
/**
 * Metadata service
 *	 
 * @param KalturaMetadataService
 */
KalturaClient.prototype.metadata = null;
/**
 * Metadata Profile service
 *	 
 * @param KalturaMetadataProfileService
 */
KalturaClient.prototype.metadataProfile = null;
/**
 * Document service lets you upload and manage document files
 *	 
 * @param KalturaDocumentsService
 */
KalturaClient.prototype.documents = null;
/**
 * System partner service
 *	 
 * @param KalturaSystemPartnerService
 */
KalturaClient.prototype.systemPartner = null;
/**
 * Entry Admin service
 *	 
 * @param KalturaEntryAdminService
 */
KalturaClient.prototype.entryAdmin = null;
/**
 * UiConf Admin service
 *	 
 * @param KalturaUiConfAdminService
 */
KalturaClient.prototype.uiConfAdmin = null;
/**
 * 
 * @param KalturaReportAdminService
 */
KalturaClient.prototype.reportAdmin = null;
/**
 * Internal Tools Service
 *	 
 * @param KalturaKalturaInternalToolsSystemHelperService
 */
KalturaClient.prototype.kalturaInternalToolsSystemHelper = null;
/**
 * Virus scan profile service
 *	 
 * @param KalturaVirusScanProfileService
 */
KalturaClient.prototype.virusScanProfile = null;
/**
 * Distribution Profile service
 *	 
 * @param KalturaDistributionProfileService
 */
KalturaClient.prototype.distributionProfile = null;
/**
 * Entry Distribution service
 *	 
 * @param KalturaEntryDistributionService
 */
KalturaClient.prototype.entryDistribution = null;
/**
 * Distribution Provider service
 *	 
 * @param KalturaDistributionProviderService
 */
KalturaClient.prototype.distributionProvider = null;
/**
 * Generic Distribution Provider service
 *	 
 * @param KalturaGenericDistributionProviderService
 */
KalturaClient.prototype.genericDistributionProvider = null;
/**
 * Generic Distribution Provider Actions service
 *	 
 * @param KalturaGenericDistributionProviderActionService
 */
KalturaClient.prototype.genericDistributionProviderAction = null;
/**
 * Cue Point service
 *	 
 * @param KalturaCuePointService
 */
KalturaClient.prototype.cuePoint = null;
/**
 * Annotation service - Video Annotation
 *	 
 * @param KalturaAnnotationService
 */
KalturaClient.prototype.annotation = null;
/**
 * Allows user to handle quizzes
 *	 
 * @param KalturaQuizService
 */
KalturaClient.prototype.quiz = null;
/**
 * Short link service
 *	 
 * @param KalturaShortLinkService
 */
KalturaClient.prototype.shortLink = null;
/**
 * Bulk upload service is used to upload & manage bulk uploads
 *	 
 * @param KalturaBulkService
 */
KalturaClient.prototype.bulk = null;
/**
 * DropFolder service lets you create and manage drop folders
 *	 
 * @param KalturaDropFolderService
 */
KalturaClient.prototype.dropFolder = null;
/**
 * DropFolderFile service lets you create and manage drop folder files
 *	 
 * @param KalturaDropFolderFileService
 */
KalturaClient.prototype.dropFolderFile = null;
/**
 * Retrieve information and invoke actions on caption Asset
 *	 
 * @param KalturaCaptionAssetService
 */
KalturaClient.prototype.captionAsset = null;
/**
 * Add & Manage Caption Params
 *	 
 * @param KalturaCaptionParamsService
 */
KalturaClient.prototype.captionParams = null;
/**
 * Search caption asset items
 *	 
 * @param KalturaCaptionAssetItemService
 */
KalturaClient.prototype.captionAssetItem = null;
/**
 * Retrieve information and invoke actions on attachment Asset
 *	 
 * @param KalturaAttachmentAssetService
 */
KalturaClient.prototype.attachmentAsset = null;
/**
 * Search object tags
 *	 
 * @param KalturaTagService
 */
KalturaClient.prototype.tag = null;
/**
 * Allows user to 'like' or 'unlike' and entry
 *	 
 * @param KalturaLikeService
 */
KalturaClient.prototype.like = null;
/**
 * Utility service for the Multi-publishers console
 *	 
 * @param KalturaVarConsoleService
 */
KalturaClient.prototype.varConsole = null;
/**
 * Event notification template service lets you create and manage event notification templates
 *	 
 * @param KalturaEventNotificationTemplateService
 */
KalturaClient.prototype.eventNotificationTemplate = null;
/**
 * External media service lets you upload and manage embed codes and external playable content
 *	 
 * @param KalturaExternalMediaService
 */
KalturaClient.prototype.externalMedia = null;
/**
 * Schedule task service lets you create and manage scheduled task profiles
 *	 
 * @param KalturaScheduledTaskProfileService
 */
KalturaClient.prototype.scheduledTaskProfile = null;
/**
 * Integration service lets you dispatch integration tasks
 *	 
 * @param KalturaIntegrationService
 */
KalturaClient.prototype.integration = null;
/**
 * The client constructor.
 * @param config the Kaltura configuration object holding partner credentials (type: KalturaConfiguration).
 */
KalturaClient.prototype.init = function(config){
	//call the super constructor:
	KalturaClientBase.prototype.init.apply(this, arguments);
	//initialize client services:
	this.accessControlProfile = new KalturaAccessControlProfileService(this);
	this.accessControl = new KalturaAccessControlService(this);
	this.adminUser = new KalturaAdminUserService(this);
	this.appToken = new KalturaAppTokenService(this);
	this.baseEntry = new KalturaBaseEntryService(this);
	this.bulkUpload = new KalturaBulkUploadService(this);
	this.categoryEntry = new KalturaCategoryEntryService(this);
	this.category = new KalturaCategoryService(this);
	this.categoryUser = new KalturaCategoryUserService(this);
	this.conversionProfileAssetParams = new KalturaConversionProfileAssetParamsService(this);
	this.conversionProfile = new KalturaConversionProfileService(this);
	this.data = new KalturaDataService(this);
	this.deliveryProfile = new KalturaDeliveryProfileService(this);
	this.document = new KalturaDocumentService(this);
	this.EmailIngestionProfile = new KalturaEmailIngestionProfileService(this);
	this.fileAsset = new KalturaFileAssetService(this);
	this.flavorAsset = new KalturaFlavorAssetService(this);
	this.flavorParamsOutput = new KalturaFlavorParamsOutputService(this);
	this.flavorParams = new KalturaFlavorParamsService(this);
	this.groupUser = new KalturaGroupUserService(this);
	this.liveChannelSegment = new KalturaLiveChannelSegmentService(this);
	this.liveChannel = new KalturaLiveChannelService(this);
	this.liveReports = new KalturaLiveReportsService(this);
	this.liveStats = new KalturaLiveStatsService(this);
	this.liveStream = new KalturaLiveStreamService(this);
	this.mediaInfo = new KalturaMediaInfoService(this);
	this.media = new KalturaMediaService(this);
	this.mixing = new KalturaMixingService(this);
	this.notification = new KalturaNotificationService(this);
	this.partner = new KalturaPartnerService(this);
	this.permissionItem = new KalturaPermissionItemService(this);
	this.permission = new KalturaPermissionService(this);
	this.playlist = new KalturaPlaylistService(this);
	this.report = new KalturaReportService(this);
	this.responseProfile = new KalturaResponseProfileService(this);
	this.schema = new KalturaSchemaService(this);
	this.search = new KalturaSearchService(this);
	this.serverNode = new KalturaServerNodeService(this);
	this.session = new KalturaSessionService(this);
	this.stats = new KalturaStatsService(this);
	this.storageProfile = new KalturaStorageProfileService(this);
	this.syndicationFeed = new KalturaSyndicationFeedService(this);
	this.system = new KalturaSystemService(this);
	this.thumbAsset = new KalturaThumbAssetService(this);
	this.thumbParamsOutput = new KalturaThumbParamsOutputService(this);
	this.thumbParams = new KalturaThumbParamsService(this);
	this.uiConf = new KalturaUiConfService(this);
	this.upload = new KalturaUploadService(this);
	this.uploadToken = new KalturaUploadTokenService(this);
	this.userEntry = new KalturaUserEntryService(this);
	this.userRole = new KalturaUserRoleService(this);
	this.user = new KalturaUserService(this);
	this.widget = new KalturaWidgetService(this);
	this.xInternal = new KalturaXInternalService(this);
	this.metadata = new KalturaMetadataService(this);
	this.metadataProfile = new KalturaMetadataProfileService(this);
	this.documents = new KalturaDocumentsService(this);
	this.systemPartner = new KalturaSystemPartnerService(this);
	this.entryAdmin = new KalturaEntryAdminService(this);
	this.uiConfAdmin = new KalturaUiConfAdminService(this);
	this.reportAdmin = new KalturaReportAdminService(this);
	this.kalturaInternalToolsSystemHelper = new KalturaKalturaInternalToolsSystemHelperService(this);
	this.virusScanProfile = new KalturaVirusScanProfileService(this);
	this.distributionProfile = new KalturaDistributionProfileService(this);
	this.entryDistribution = new KalturaEntryDistributionService(this);
	this.distributionProvider = new KalturaDistributionProviderService(this);
	this.genericDistributionProvider = new KalturaGenericDistributionProviderService(this);
	this.genericDistributionProviderAction = new KalturaGenericDistributionProviderActionService(this);
	this.cuePoint = new KalturaCuePointService(this);
	this.annotation = new KalturaAnnotationService(this);
	this.quiz = new KalturaQuizService(this);
	this.shortLink = new KalturaShortLinkService(this);
	this.bulk = new KalturaBulkService(this);
	this.dropFolder = new KalturaDropFolderService(this);
	this.dropFolderFile = new KalturaDropFolderFileService(this);
	this.captionAsset = new KalturaCaptionAssetService(this);
	this.captionParams = new KalturaCaptionParamsService(this);
	this.captionAssetItem = new KalturaCaptionAssetItemService(this);
	this.attachmentAsset = new KalturaAttachmentAssetService(this);
	this.tag = new KalturaTagService(this);
	this.like = new KalturaLikeService(this);
	this.varConsole = new KalturaVarConsoleService(this);
	this.eventNotificationTemplate = new KalturaEventNotificationTemplateService(this);
	this.externalMedia = new KalturaExternalMediaService(this);
	this.scheduledTaskProfile = new KalturaScheduledTaskProfileService(this);
	this.integration = new KalturaIntegrationService(this);
}
